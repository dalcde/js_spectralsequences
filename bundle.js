(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global){
"use strict";function compare(e,t){if(e===t)return 0;for(var r=e.length,n=t.length,i=0,a=Math.min(r,n);i<a;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0}function isBuffer(e){return global.Buffer&&"function"==typeof global.Buffer.isBuffer?global.Buffer.isBuffer(e):!(null==e||!e._isBuffer)}var util=require("util/"),hasOwn=Object.prototype.hasOwnProperty,pSlice=Array.prototype.slice,functionsHaveNames="foo"===function(){}.name;function pToString(e){return Object.prototype.toString.call(e)}function isView(e){return!isBuffer(e)&&("function"==typeof global.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):!!e&&(e instanceof DataView||!!(e.buffer&&e.buffer instanceof ArrayBuffer))))}var assert=module.exports=ok,regex=/\s*function\s+([^\(\s]*)\s*/;function getName(e){if(util.isFunction(e)){if(functionsHaveNames)return e.name;var t=e.toString().match(regex);return t&&t[1]}}function truncate(e,t){return"string"==typeof e?e.length<t?e:e.slice(0,t):e}function inspect(e){if(functionsHaveNames||!util.isFunction(e))return util.inspect(e);var t=getName(e);return"[Function"+(t?": "+t:"")+"]"}function getMessage(e){return truncate(inspect(e.actual),128)+" "+e.operator+" "+truncate(inspect(e.expected),128)}function fail(e,t,r,n,i){throw new assert.AssertionError({message:r,actual:e,expected:t,operator:n,stackStartFunction:i})}function ok(e,t){e||fail(e,!0,t,"==",assert.ok)}function _deepEqual(e,t,r,n){if(e===t)return!0;if(isBuffer(e)&&isBuffer(t))return 0===compare(e,t);if(util.isDate(e)&&util.isDate(t))return e.getTime()===t.getTime();if(util.isRegExp(e)&&util.isRegExp(t))return e.source===t.source&&e.global===t.global&&e.multiline===t.multiline&&e.lastIndex===t.lastIndex&&e.ignoreCase===t.ignoreCase;if(null!==e&&"object"==typeof e||null!==t&&"object"==typeof t){if(isView(e)&&isView(t)&&pToString(e)===pToString(t)&&!(e instanceof Float32Array||e instanceof Float64Array))return 0===compare(new Uint8Array(e.buffer),new Uint8Array(t.buffer));if(isBuffer(e)!==isBuffer(t))return!1;var i=(n=n||{actual:[],expected:[]}).actual.indexOf(e);return-1!==i&&i===n.expected.indexOf(t)||(n.actual.push(e),n.expected.push(t),objEquiv(e,t,r,n))}return r?e===t:e==t}function isArguments(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function objEquiv(e,t,r,n){if(null==e||null==t)return!1;if(util.isPrimitive(e)||util.isPrimitive(t))return e===t;if(r&&Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1;var i=isArguments(e),a=isArguments(t);if(i&&!a||!i&&a)return!1;if(i)return _deepEqual(e=pSlice.call(e),t=pSlice.call(t),r);var s,u,o=objectKeys(e),f=objectKeys(t);if(o.length!==f.length)return!1;for(o.sort(),f.sort(),u=o.length-1;u>=0;u--)if(o[u]!==f[u])return!1;for(u=o.length-1;u>=0;u--)if(!_deepEqual(e[s=o[u]],t[s],r,n))return!1;return!0}function notDeepStrictEqual(e,t,r){_deepEqual(e,t,!0)&&fail(e,t,r,"notDeepStrictEqual",notDeepStrictEqual)}function expectedException(e,t){if(!e||!t)return!1;if("[object RegExp]"==Object.prototype.toString.call(t))return t.test(e);try{if(e instanceof t)return!0}catch(e){}return!Error.isPrototypeOf(t)&&!0===t.call({},e)}function _tryBlock(e){var t;try{e()}catch(e){t=e}return t}function _throws(e,t,r,n){var i;if("function"!=typeof t)throw new TypeError('"block" argument must be a function');"string"==typeof r&&(n=r,r=null),i=_tryBlock(t),n=(r&&r.name?" ("+r.name+").":".")+(n?" "+n:"."),e&&!i&&fail(i,r,"Missing expected exception"+n);var a="string"==typeof n,s=!e&&i&&!r;if((!e&&util.isError(i)&&a&&expectedException(i,r)||s)&&fail(i,r,"Got unwanted exception"+n),e&&i&&r&&!expectedException(i,r)||!e&&i)throw i}assert.AssertionError=function(e){this.name="AssertionError",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,e.message?(this.message=e.message,this.generatedMessage=!1):(this.message=getMessage(this),this.generatedMessage=!0);var t=e.stackStartFunction||fail;if(Error.captureStackTrace)Error.captureStackTrace(this,t);else{var r=new Error;if(r.stack){var n=r.stack,i=getName(t),a=n.indexOf("\n"+i);if(a>=0){var s=n.indexOf("\n",a+1);n=n.substring(s+1)}this.stack=n}}},util.inherits(assert.AssertionError,Error),assert.fail=fail,assert.ok=ok,assert.equal=function(e,t,r){e!=t&&fail(e,t,r,"==",assert.equal)},assert.notEqual=function(e,t,r){e==t&&fail(e,t,r,"!=",assert.notEqual)},assert.deepEqual=function(e,t,r){_deepEqual(e,t,!1)||fail(e,t,r,"deepEqual",assert.deepEqual)},assert.deepStrictEqual=function(e,t,r){_deepEqual(e,t,!0)||fail(e,t,r,"deepStrictEqual",assert.deepStrictEqual)},assert.notDeepEqual=function(e,t,r){_deepEqual(e,t,!1)&&fail(e,t,r,"notDeepEqual",assert.notDeepEqual)},assert.notDeepStrictEqual=notDeepStrictEqual,assert.strictEqual=function(e,t,r){e!==t&&fail(e,t,r,"===",assert.strictEqual)},assert.notStrictEqual=function(e,t,r){e===t&&fail(e,t,r,"!==",assert.notStrictEqual)},assert.throws=function(e,t,r){_throws(!0,e,t,r)},assert.doesNotThrow=function(e,t,r){_throws(!1,e,t,r)},assert.ifError=function(e){if(e)throw e};var objectKeys=Object.keys||function(e){var t=[];for(var r in e)hasOwn.call(e,r)&&t.push(r);return t};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"util/":4}],2:[function(require,module,exports){
"function"==typeof Object.create?module.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:module.exports=function(t,e){t.super_=e;var o=function(){};o.prototype=e.prototype,t.prototype=new o,t.prototype.constructor=t};

},{}],3:[function(require,module,exports){
module.exports=function(o){return o&&"object"==typeof o&&"function"==typeof o.copy&&"function"==typeof o.fill&&"function"==typeof o.readUInt8};

},{}],4:[function(require,module,exports){
(function (process,global){
var formatRegExp=/%[sdj%]/g;exports.format=function(e){if(!isString(e)){for(var r=[],t=0;t<arguments.length;t++)r.push(inspect(arguments[t]));return r.join(" ")}t=1;for(var n=arguments,i=n.length,o=String(e).replace(formatRegExp,function(e){if("%%"===e)return"%";if(t>=i)return e;switch(e){case"%s":return String(n[t++]);case"%d":return Number(n[t++]);case"%j":try{return JSON.stringify(n[t++])}catch(e){return"[Circular]"}default:return e}}),s=n[t];t<i;s=n[++t])isNull(s)||!isObject(s)?o+=" "+s:o+=" "+inspect(s);return o},exports.deprecate=function(e,r){if(isUndefined(global.process))return function(){return exports.deprecate(e,r).apply(this,arguments)};if(!0===process.noDeprecation)return e;var t=!1;return function(){if(!t){if(process.throwDeprecation)throw new Error(r);process.traceDeprecation?console.trace(r):console.error(r),t=!0}return e.apply(this,arguments)}};var debugEnviron,debugs={};function inspect(e,r){var t={seen:[],stylize:stylizeNoColor};return arguments.length>=3&&(t.depth=arguments[2]),arguments.length>=4&&(t.colors=arguments[3]),isBoolean(r)?t.showHidden=r:r&&exports._extend(t,r),isUndefined(t.showHidden)&&(t.showHidden=!1),isUndefined(t.depth)&&(t.depth=2),isUndefined(t.colors)&&(t.colors=!1),isUndefined(t.customInspect)&&(t.customInspect=!0),t.colors&&(t.stylize=stylizeWithColor),formatValue(t,e,t.depth)}function stylizeWithColor(e,r){var t=inspect.styles[r];return t?"["+inspect.colors[t][0]+"m"+e+"["+inspect.colors[t][1]+"m":e}function stylizeNoColor(e,r){return e}function arrayToHash(e){var r={};return e.forEach(function(e,t){r[e]=!0}),r}function formatValue(e,r,t){if(e.customInspect&&r&&isFunction(r.inspect)&&r.inspect!==exports.inspect&&(!r.constructor||r.constructor.prototype!==r)){var n=r.inspect(t,e);return isString(n)||(n=formatValue(e,n,t)),n}var i=formatPrimitive(e,r);if(i)return i;var o=Object.keys(r),s=arrayToHash(o);if(e.showHidden&&(o=Object.getOwnPropertyNames(r)),isError(r)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return formatError(r);if(0===o.length){if(isFunction(r)){var u=r.name?": "+r.name:"";return e.stylize("[Function"+u+"]","special")}if(isRegExp(r))return e.stylize(RegExp.prototype.toString.call(r),"regexp");if(isDate(r))return e.stylize(Date.prototype.toString.call(r),"date");if(isError(r))return formatError(r)}var c,a="",l=!1,p=["{","}"];(isArray(r)&&(l=!0,p=["[","]"]),isFunction(r))&&(a=" [Function"+(r.name?": "+r.name:"")+"]");return isRegExp(r)&&(a=" "+RegExp.prototype.toString.call(r)),isDate(r)&&(a=" "+Date.prototype.toUTCString.call(r)),isError(r)&&(a=" "+formatError(r)),0!==o.length||l&&0!=r.length?t<0?isRegExp(r)?e.stylize(RegExp.prototype.toString.call(r),"regexp"):e.stylize("[Object]","special"):(e.seen.push(r),c=l?formatArray(e,r,t,s,o):o.map(function(n){return formatProperty(e,r,t,s,n,l)}),e.seen.pop(),reduceToSingleString(c,a,p)):p[0]+a+p[1]}function formatPrimitive(e,r){if(isUndefined(r))return e.stylize("undefined","undefined");if(isString(r)){var t="'"+JSON.stringify(r).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(t,"string")}return isNumber(r)?e.stylize(""+r,"number"):isBoolean(r)?e.stylize(""+r,"boolean"):isNull(r)?e.stylize("null","null"):void 0}function formatError(e){return"["+Error.prototype.toString.call(e)+"]"}function formatArray(e,r,t,n,i){for(var o=[],s=0,u=r.length;s<u;++s)hasOwnProperty(r,String(s))?o.push(formatProperty(e,r,t,n,String(s),!0)):o.push("");return i.forEach(function(i){i.match(/^\d+$/)||o.push(formatProperty(e,r,t,n,i,!0))}),o}function formatProperty(e,r,t,n,i,o){var s,u,c;if((c=Object.getOwnPropertyDescriptor(r,i)||{value:r[i]}).get?u=c.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):c.set&&(u=e.stylize("[Setter]","special")),hasOwnProperty(n,i)||(s="["+i+"]"),u||(e.seen.indexOf(c.value)<0?(u=isNull(t)?formatValue(e,c.value,null):formatValue(e,c.value,t-1)).indexOf("\n")>-1&&(u=o?u.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+u.split("\n").map(function(e){return"   "+e}).join("\n")):u=e.stylize("[Circular]","special")),isUndefined(s)){if(o&&i.match(/^\d+$/))return u;(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+u}function reduceToSingleString(e,r,t){return e.reduce(function(e,r){return 0,r.indexOf("\n")>=0&&0,e+r.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60?t[0]+(""===r?"":r+"\n ")+" "+e.join(",\n  ")+" "+t[1]:t[0]+r+" "+e.join(", ")+" "+t[1]}function isArray(e){return Array.isArray(e)}function isBoolean(e){return"boolean"==typeof e}function isNull(e){return null===e}function isNullOrUndefined(e){return null==e}function isNumber(e){return"number"==typeof e}function isString(e){return"string"==typeof e}function isSymbol(e){return"symbol"==typeof e}function isUndefined(e){return void 0===e}function isRegExp(e){return isObject(e)&&"[object RegExp]"===objectToString(e)}function isObject(e){return"object"==typeof e&&null!==e}function isDate(e){return isObject(e)&&"[object Date]"===objectToString(e)}function isError(e){return isObject(e)&&("[object Error]"===objectToString(e)||e instanceof Error)}function isFunction(e){return"function"==typeof e}function isPrimitive(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e}function objectToString(e){return Object.prototype.toString.call(e)}function pad(e){return e<10?"0"+e.toString(10):e.toString(10)}exports.debuglog=function(e){if(isUndefined(debugEnviron)&&(debugEnviron=process.env.NODE_DEBUG||""),e=e.toUpperCase(),!debugs[e])if(new RegExp("\\b"+e+"\\b","i").test(debugEnviron)){var r=process.pid;debugs[e]=function(){var t=exports.format.apply(exports,arguments);console.error("%s %d: %s",e,r,t)}}else debugs[e]=function(){};return debugs[e]},exports.inspect=inspect,inspect.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},inspect.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},exports.isArray=isArray,exports.isBoolean=isBoolean,exports.isNull=isNull,exports.isNullOrUndefined=isNullOrUndefined,exports.isNumber=isNumber,exports.isString=isString,exports.isSymbol=isSymbol,exports.isUndefined=isUndefined,exports.isRegExp=isRegExp,exports.isObject=isObject,exports.isDate=isDate,exports.isError=isError,exports.isFunction=isFunction,exports.isPrimitive=isPrimitive,exports.isBuffer=require("./support/isBuffer");var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function timestamp(){var e=new Date,r=[pad(e.getHours()),pad(e.getMinutes()),pad(e.getSeconds())].join(":");return[e.getDate(),months[e.getMonth()],r].join(" ")}function hasOwnProperty(e,r){return Object.prototype.hasOwnProperty.call(e,r)}exports.log=function(){console.log("%s - %s",timestamp(),exports.format.apply(exports,arguments))},exports.inherits=require("inherits"),exports._extend=function(e,r){if(!r||!isObject(r))return e;for(var t=Object.keys(r),n=t.length;n--;)e[t[n]]=r[t[n]];return e};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":3,"_process":39,"inherits":2}],5:[function(require,module,exports){
!function(n,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports):"function"==typeof define&&define.amd?define(["exports"],r):r(n.d3=n.d3||{})}(this,function(n){"use strict";function r(n,r){return n<r?-1:n>r?1:n>=r?0:NaN}function t(n){var t;return 1===n.length&&(t=n,n=function(n,e){return r(t(n),e)}),{left:function(r,t,e,o){for(null==e&&(e=0),null==o&&(o=r.length);e<o;){var u=e+o>>>1;n(r[u],t)<0?e=u+1:o=u}return e},right:function(r,t,e,o){for(null==e&&(e=0),null==o&&(o=r.length);e<o;){var u=e+o>>>1;n(r[u],t)>0?o=u:e=u+1}return e}}}var e=t(r),o=e.right,u=e.left;function f(n,r){return[n,r]}function l(n){return null===n?NaN:+n}function i(n,r){var t,e,o=n.length,u=0,f=-1,i=0,a=0;if(null==r)for(;++f<o;)isNaN(t=l(n[f]))||(a+=(e=t-i)*(t-(i+=e/++u)));else for(;++f<o;)isNaN(t=l(r(n[f],f,n)))||(a+=(e=t-i)*(t-(i+=e/++u)));if(u>1)return a/(u-1)}function a(n,r){var t=i(n,r);return t?Math.sqrt(t):t}function h(n,r){var t,e,o,u=n.length,f=-1;if(null==r){for(;++f<u;)if(null!=(t=n[f])&&t>=t)for(e=o=t;++f<u;)null!=(t=n[f])&&(e>t&&(e=t),o<t&&(o=t))}else for(;++f<u;)if(null!=(t=r(n[f],f,n))&&t>=t)for(e=o=t;++f<u;)null!=(t=r(n[f],f,n))&&(e>t&&(e=t),o<t&&(o=t));return[e,o]}var c=Array.prototype,s=c.slice,g=c.map;function v(n){return function(){return n}}function M(n){return n}function p(n,r,t){n=+n,r=+r,t=(o=arguments.length)<2?(r=n,n=0,1):o<3?1:+t;for(var e=-1,o=0|Math.max(0,Math.ceil((r-n)/t)),u=new Array(o);++e<o;)u[e]=n+e*t;return u}var d=Math.sqrt(50),y=Math.sqrt(10),N=Math.sqrt(2);function m(n,r,t){var e=(r-n)/Math.max(0,t),o=Math.floor(Math.log(e)/Math.LN10),u=e/Math.pow(10,o);return o>=0?(u>=d?10:u>=y?5:u>=N?2:1)*Math.pow(10,o):-Math.pow(10,-o)/(u>=d?10:u>=y?5:u>=N?2:1)}function w(n,r,t){var e=Math.abs(r-n)/Math.max(0,t),o=Math.pow(10,Math.floor(Math.log(e)/Math.LN10)),u=e/o;return u>=d?o*=10:u>=y?o*=5:u>=N&&(o*=2),r<n?-o:o}function A(n){return Math.ceil(Math.log(n.length)/Math.LN2)+1}function x(n,r,t){if(null==t&&(t=l),e=n.length){if((r=+r)<=0||e<2)return+t(n[0],0,n);if(r>=1)return+t(n[e-1],e-1,n);var e,o=(e-1)*r,u=Math.floor(o),f=+t(n[u],u,n);return f+(+t(n[u+1],u+1,n)-f)*(o-u)}}function b(n,r){var t,e,o=n.length,u=-1;if(null==r){for(;++u<o;)if(null!=(t=n[u])&&t>=t)for(e=t;++u<o;)null!=(t=n[u])&&e>t&&(e=t)}else for(;++u<o;)if(null!=(t=r(n[u],u,n))&&t>=t)for(e=t;++u<o;)null!=(t=r(n[u],u,n))&&e>t&&(e=t);return e}function q(n){if(!(o=n.length))return[];for(var r=-1,t=b(n,L),e=new Array(t);++r<t;)for(var o,u=-1,f=e[r]=new Array(o);++u<o;)f[u]=n[u][r];return e}function L(n){return n.length}n.bisect=o,n.bisectRight=o,n.bisectLeft=u,n.ascending=r,n.bisector=t,n.cross=function(n,r,t){var e,o,u,l,i=n.length,a=r.length,h=new Array(i*a);for(null==t&&(t=f),e=u=0;e<i;++e)for(l=n[e],o=0;o<a;++o,++u)h[u]=t(l,r[o]);return h},n.descending=function(n,r){return r<n?-1:r>n?1:r>=n?0:NaN},n.deviation=a,n.extent=h,n.histogram=function(){var n=M,r=h,t=A;function e(e){var u,f,l=e.length,i=new Array(l);for(u=0;u<l;++u)i[u]=n(e[u],u,e);var a=r(i),h=a[0],c=a[1],s=t(i,h,c);Array.isArray(s)||(s=w(h,c,s),s=p(Math.ceil(h/s)*s,c,s));for(var g=s.length;s[0]<=h;)s.shift(),--g;for(;s[g-1]>c;)s.pop(),--g;var v,M=new Array(g+1);for(u=0;u<=g;++u)(v=M[u]=[]).x0=u>0?s[u-1]:h,v.x1=u<g?s[u]:c;for(u=0;u<l;++u)h<=(f=i[u])&&f<=c&&M[o(s,f,0,g)].push(e[u]);return M}return e.value=function(r){return arguments.length?(n="function"==typeof r?r:v(r),e):n},e.domain=function(n){return arguments.length?(r="function"==typeof n?n:v([n[0],n[1]]),e):r},e.thresholds=function(n){return arguments.length?(t="function"==typeof n?n:Array.isArray(n)?v(s.call(n)):v(n),e):t},e},n.thresholdFreedmanDiaconis=function(n,t,e){return n=g.call(n,l).sort(r),Math.ceil((e-t)/(2*(x(n,.75)-x(n,.25))*Math.pow(n.length,-1/3)))},n.thresholdScott=function(n,r,t){return Math.ceil((t-r)/(3.5*a(n)*Math.pow(n.length,-1/3)))},n.thresholdSturges=A,n.max=function(n,r){var t,e,o=n.length,u=-1;if(null==r){for(;++u<o;)if(null!=(t=n[u])&&t>=t)for(e=t;++u<o;)null!=(t=n[u])&&t>e&&(e=t)}else for(;++u<o;)if(null!=(t=r(n[u],u,n))&&t>=t)for(e=t;++u<o;)null!=(t=r(n[u],u,n))&&t>e&&(e=t);return e},n.mean=function(n,r){var t,e=n.length,o=e,u=-1,f=0;if(null==r)for(;++u<e;)isNaN(t=l(n[u]))?--o:f+=t;else for(;++u<e;)isNaN(t=l(r(n[u],u,n)))?--o:f+=t;if(o)return f/o},n.median=function(n,t){var e,o=n.length,u=-1,f=[];if(null==t)for(;++u<o;)isNaN(e=l(n[u]))||f.push(e);else for(;++u<o;)isNaN(e=l(t(n[u],u,n)))||f.push(e);return x(f.sort(r),.5)},n.merge=function(n){for(var r,t,e,o=n.length,u=-1,f=0;++u<o;)f+=n[u].length;for(t=new Array(f);--o>=0;)for(r=(e=n[o]).length;--r>=0;)t[--f]=e[r];return t},n.min=b,n.pairs=function(n,r){null==r&&(r=f);for(var t=0,e=n.length-1,o=n[0],u=new Array(e<0?0:e);t<e;)u[t]=r(o,o=n[++t]);return u},n.permute=function(n,r){for(var t=r.length,e=new Array(t);t--;)e[t]=n[r[t]];return e},n.quantile=x,n.range=p,n.scan=function(n,t){if(e=n.length){var e,o,u=0,f=0,l=n[f];for(null==t&&(t=r);++u<e;)(t(o=n[u],l)<0||0!==t(l,l))&&(l=o,f=u);return 0===t(l,l)?f:void 0}},n.shuffle=function(n,r,t){for(var e,o,u=(null==t?n.length:t)-(r=null==r?0:+r);u;)o=Math.random()*u--|0,e=n[u+r],n[u+r]=n[o+r],n[o+r]=e;return n},n.sum=function(n,r){var t,e=n.length,o=-1,u=0;if(null==r)for(;++o<e;)(t=+n[o])&&(u+=t);else for(;++o<e;)(t=+r(n[o],o,n))&&(u+=t);return u},n.ticks=function(n,r,t){var e,o,u,f,l=-1;if(t=+t,(n=+n)==(r=+r)&&t>0)return[n];if((e=r<n)&&(o=n,n=r,r=o),0===(f=m(n,r,t))||!isFinite(f))return[];if(f>0)for(n=Math.ceil(n/f),r=Math.floor(r/f),u=new Array(o=Math.ceil(r-n+1));++l<o;)u[l]=(n+l)*f;else for(n=Math.floor(n*f),r=Math.ceil(r*f),u=new Array(o=Math.ceil(n-r+1));++l<o;)u[l]=(n-l)/f;return e&&u.reverse(),u},n.tickIncrement=m,n.tickStep=w,n.transpose=q,n.variance=i,n.zip=function(){return q(arguments)},Object.defineProperty(n,"__esModule",{value:!0})});

},{}],6:[function(require,module,exports){
!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports):"function"==typeof define&&define.amd?define(["exports"],n):n(t.d3=t.d3||{})}(this,function(t){"use strict";var n=Array.prototype.slice;function r(t){return t}var e=1,i=2,a=3,o=4,u=1e-6;function c(t){return"translate("+(t+.5)+",0)"}function l(t){return"translate(0,"+(t+.5)+")"}function s(){return!this.__axis}function f(t,f){var d=[],m=null,p=null,h=6,g=6,x=3,k=t===e||t===o?-1:1,y=t===o||t===i?"x":"y",v=t===e||t===a?c:l;function M(n){var c=null==m?f.ticks?f.ticks.apply(f,d):f.domain():m,l=null==p?f.tickFormat?f.tickFormat.apply(f,d):r:p,M=Math.max(h,0)+x,_=f.range(),b=+_[0]+.5,A=+_[_.length-1]+.5,F=(f.bandwidth?function(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(r){return+t(r)+n}}:function(t){return function(n){return+t(n)}})(f.copy()),V=n.selection?n.selection():n,z=V.selectAll(".domain").data([null]),H=V.selectAll(".tick").data(c,f).order(),C=H.exit(),S=H.enter().append("g").attr("class","tick"),j=H.select("line"),w=H.select("text");z=z.merge(z.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),H=H.merge(S),j=j.merge(S.append("line").attr("stroke","currentColor").attr(y+"2",k*h)),w=w.merge(S.append("text").attr("fill","currentColor").attr(y,k*M).attr("dy",t===e?"0em":t===a?"0.71em":"0.32em")),n!==V&&(z=z.transition(n),H=H.transition(n),j=j.transition(n),w=w.transition(n),C=C.transition(n).attr("opacity",u).attr("transform",function(t){return isFinite(t=F(t))?v(t):this.getAttribute("transform")}),S.attr("opacity",u).attr("transform",function(t){var n=this.parentNode.__axis;return v(n&&isFinite(n=n(t))?n:F(t))})),C.remove(),z.attr("d",t===o||t==i?g?"M"+k*g+","+b+"H0.5V"+A+"H"+k*g:"M0.5,"+b+"V"+A:g?"M"+b+","+k*g+"V0.5H"+A+"V"+k*g:"M"+b+",0.5H"+A),H.attr("opacity",1).attr("transform",function(t){return v(F(t))}),j.attr(y+"2",k*h),w.attr(y,k*M).text(l),V.filter(s).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===i?"start":t===o?"end":"middle"),V.each(function(){this.__axis=F})}return M.scale=function(t){return arguments.length?(f=t,M):f},M.ticks=function(){return d=n.call(arguments),M},M.tickArguments=function(t){return arguments.length?(d=null==t?[]:n.call(t),M):d.slice()},M.tickValues=function(t){return arguments.length?(m=null==t?null:n.call(t),M):m&&m.slice()},M.tickFormat=function(t){return arguments.length?(p=t,M):p},M.tickSize=function(t){return arguments.length?(h=g=+t,M):h},M.tickSizeInner=function(t){return arguments.length?(h=+t,M):h},M.tickSizeOuter=function(t){return arguments.length?(g=+t,M):g},M.tickPadding=function(t){return arguments.length?(x=+t,M):x},M}t.axisTop=function(t){return f(e,t)},t.axisRight=function(t){return f(i,t)},t.axisBottom=function(t){return f(a,t)},t.axisLeft=function(t){return f(o,t)},Object.defineProperty(t,"__esModule",{value:!0})});

},{}],7:[function(require,module,exports){
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("d3-selection"),require("d3-dispatch"),require("d3-drag"),require("d3-interpolate"),require("d3-transition")):"function"==typeof define&&define.amd?define(["exports","d3-selection","d3-dispatch","d3-drag","d3-interpolate","d3-transition"],e):e(t.d3=t.d3||{},t.d3,t.d3,t.d3,t.d3,t.d3)}(this,function(t,e,n,r,s,i){"use strict";function a(t){return function(){return t}}function u(t,e,n){this.target=t,this.type=e,this.selection=n}function o(){e.event.stopImmediatePropagation()}function l(){e.event.preventDefault(),e.event.stopImmediatePropagation()}var c={name:"drag"},h={name:"space"},f={name:"handle"},p={name:"center"},d={name:"x",handles:["e","w"].map(_),input:function(t,e){return t&&[[t[0],e[0][1]],[t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},v={name:"y",handles:["n","s"].map(_),input:function(t,e){return t&&[[e[0][0],t[0]],[e[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},m={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(_),input:function(t){return t},output:function(t){return t}},y={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},b={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},w={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},g={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},x={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function _(t){return{type:t}}function M(){return!e.event.button}function k(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function z(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function A(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function q(t){var m,q=k,E=M,K=n.dispatch(S,"start","brush","end"),P=6;function S(n){var r=n.property("__brush",D).selectAll(".overlay").data([_("overlay")]);r.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",y.overlay).merge(r).each(function(){var t=z(this).extent;e.select(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),n.selectAll(".selection").data([_("selection")]).enter().append("rect").attr("class","selection").attr("cursor",y.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var s=n.selectAll(".handle").data(t.handles,function(t){return t.type});s.exit().remove(),s.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return y[t.type]}),n.each(T).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",C)}function T(){var t=e.select(this),n=z(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?n[1][0]-P/2:n[0][0]-P/2}).attr("y",function(t){return"s"===t.type[0]?n[1][1]-P/2:n[0][1]-P/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+P:P}).attr("height",function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+P:P})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function V(t,e){return t.__brush.emitter||new j(t,e)}function j(t,e){this.that=t,this.args=e,this.state=t.__brush,this.active=0}function C(){if(e.event.touches){if(e.event.changedTouches.length<e.event.touches.length)return l()}else if(m)return;if(E.apply(this,arguments)){var n,s,a,u,_,M,k,q,K,P,S,j,C,D=this,I=e.event.target.__data__.type,G="selection"===(e.event.metaKey?I="overlay":I)?c:e.event.altKey?p:f,N=t===v?null:g[I],O=t===d?null:x[I],X=z(D),Y=X.extent,B=X.selection,F=Y[0][0],H=Y[0][1],J=Y[1][0],L=Y[1][1],Q=N&&O&&e.event.shiftKey,R=e.mouse(D),U=R,W=V(D,arguments).beforestart();"overlay"===I?X.selection=B=[[n=t===v?F:R[0],a=t===d?H:R[1]],[_=t===v?J:n,k=t===d?L:a]]:(n=B[0][0],a=B[0][1],_=B[1][0],k=B[1][1]),s=n,u=a,M=_,q=k;var Z=e.select(D).attr("pointer-events","none"),$=Z.selectAll(".overlay").attr("cursor",y[I]);if(e.event.touches)Z.on("touchmove.brush",et,!0).on("touchend.brush touchcancel.brush",rt,!0);else{var tt=e.select(e.event.view).on("keydown.brush",function(){switch(e.event.keyCode){case 16:Q=N&&O;break;case 18:G===f&&(N&&(_=M-K*N,n=s+K*N),O&&(k=q-P*O,a=u+P*O),G=p,nt());break;case 32:G!==f&&G!==p||(N<0?_=M-K:N>0&&(n=s-K),O<0?k=q-P:O>0&&(a=u-P),G=h,$.attr("cursor",y.selection),nt());break;default:return}l()},!0).on("keyup.brush",function(){switch(e.event.keyCode){case 16:Q&&(j=C=Q=!1,nt());break;case 18:G===p&&(N<0?_=M:N>0&&(n=s),O<0?k=q:O>0&&(a=u),G=f,nt());break;case 32:G===h&&(e.event.altKey?(N&&(_=M-K*N,n=s+K*N),O&&(k=q-P*O,a=u+P*O),G=p):(N<0?_=M:N>0&&(n=s),O<0?k=q:O>0&&(a=u),G=f),$.attr("cursor",y[I]),nt());break;default:return}l()},!0).on("mousemove.brush",et,!0).on("mouseup.brush",rt,!0);r.dragDisable(e.event.view)}o(),i.interrupt(D),T.call(D),W.start()}function et(){var t=e.mouse(D);!Q||j||C||(Math.abs(t[0]-U[0])>Math.abs(t[1]-U[1])?C=!0:j=!0),U=t,S=!0,l(),nt()}function nt(){var t;switch(K=U[0]-R[0],P=U[1]-R[1],G){case h:case c:N&&(K=Math.max(F-n,Math.min(J-_,K)),s=n+K,M=_+K),O&&(P=Math.max(H-a,Math.min(L-k,P)),u=a+P,q=k+P);break;case f:N<0?(K=Math.max(F-n,Math.min(J-n,K)),s=n+K,M=_):N>0&&(K=Math.max(F-_,Math.min(J-_,K)),s=n,M=_+K),O<0?(P=Math.max(H-a,Math.min(L-a,P)),u=a+P,q=k):O>0&&(P=Math.max(H-k,Math.min(L-k,P)),u=a,q=k+P);break;case p:N&&(s=Math.max(F,Math.min(J,n-K*N)),M=Math.max(F,Math.min(J,_+K*N))),O&&(u=Math.max(H,Math.min(L,a-P*O)),q=Math.max(H,Math.min(L,k+P*O)))}M<s&&(N*=-1,t=n,n=_,_=t,t=s,s=M,M=t,I in b&&$.attr("cursor",y[I=b[I]])),q<u&&(O*=-1,t=a,a=k,k=t,t=u,u=q,q=t,I in w&&$.attr("cursor",y[I=w[I]])),X.selection&&(B=X.selection),j&&(s=B[0][0],M=B[1][0]),C&&(u=B[0][1],q=B[1][1]),B[0][0]===s&&B[0][1]===u&&B[1][0]===M&&B[1][1]===q||(X.selection=[[s,u],[M,q]],T.call(D),W.brush())}function rt(){if(o(),e.event.touches){if(e.event.touches.length)return;m&&clearTimeout(m),m=setTimeout(function(){m=null},500),Z.on("touchmove.brush touchend.brush touchcancel.brush",null)}else r.dragEnable(e.event.view,S),tt.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);Z.attr("pointer-events","all"),$.attr("cursor",y.overlay),X.selection&&(B=X.selection),A(B)&&(X.selection=null,T.call(D)),W.end()}}function D(){var e=this.__brush||{selection:null};return e.extent=q.apply(this,arguments),e.dim=t,e}return S.move=function(e,n){e.selection?e.on("start.brush",function(){V(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){V(this,arguments).end()}).tween("brush",function(){var e=this,r=e.__brush,i=V(e,arguments),a=r.selection,u=t.input("function"==typeof n?n.apply(this,arguments):n,r.extent),o=s.interpolate(a,u);function l(t){r.selection=1===t&&A(u)?null:o(t),T.call(e),i.brush()}return a&&u?l:l(1)}):e.each(function(){var e=arguments,r=this.__brush,s=t.input("function"==typeof n?n.apply(this,e):n,r.extent),a=V(this,e).beforestart();i.interrupt(this),r.selection=null==s||A(s)?null:s,T.call(this),a.start().brush().end()})},j.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(n){e.customEvent(new u(S,n,t.output(this.state.selection)),K.apply,K,[n,this.that,this.args])}},S.extent=function(t){return arguments.length?(q="function"==typeof t?t:a([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),S):q},S.filter=function(t){return arguments.length?(E="function"==typeof t?t:a(!!t),S):E},S.handleSize=function(t){return arguments.length?(P=+t,S):P},S.on=function(){var t=K.on.apply(K,arguments);return t===K?S:t},S}t.brush=function(){return q(m)},t.brushX=function(){return q(d)},t.brushY=function(){return q(v)},t.brushSelection=function(t){var e=t.__brush;return e?e.dim.output(e.selection):null},Object.defineProperty(t,"__esModule",{value:!0})});

},{"d3-dispatch":12,"d3-drag":13,"d3-interpolate":21,"d3-selection":28,"d3-transition":33}],8:[function(require,module,exports){
!function(n,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("d3-array"),require("d3-path")):"function"==typeof define&&define.amd?define(["exports","d3-array","d3-path"],t):t(n.d3=n.d3||{},n.d3,n.d3)}(this,function(n,t,r){"use strict";var e=Math.cos,u=Math.sin,o=Math.PI,a=o/2,l=2*o,i=Math.max;var c=Array.prototype.slice;function f(n){return function(){return n}}function s(n){return n.source}function p(n){return n.target}function h(n){return n.radius}function d(n){return n.startAngle}function g(n){return n.endAngle}n.chord=function(){var n=0,r=null,e=null,u=null;function o(o){var a,c,f,s,p,h,d=o.length,g=[],v=t.range(d),y=[],A=[],x=A.groups=new Array(d),b=new Array(d*d);for(a=0,p=-1;++p<d;){for(c=0,h=-1;++h<d;)c+=o[p][h];g.push(c),y.push(t.range(d)),a+=c}for(r&&v.sort(function(n,t){return r(g[n],g[t])}),e&&y.forEach(function(n,t){n.sort(function(n,r){return e(o[t][n],o[t][r])})}),s=(a=i(0,l-n*d)/a)?n:l/d,c=0,p=-1;++p<d;){for(f=c,h=-1;++h<d;){var M=v[p],m=y[M][h],q=o[M][m],_=c,C=c+=q*a;b[m*d+M]={index:M,subindex:m,startAngle:_,endAngle:C,value:q}}x[M]={index:M,startAngle:f,endAngle:c,value:g[M]},c+=s}for(p=-1;++p<d;)for(h=p-1;++h<d;){var P=b[h*d+p],T=b[p*d+h];(P.value||T.value)&&A.push(P.value<T.value?{source:T,target:P}:{source:P,target:T})}return u?A.sort(u):A}return o.padAngle=function(t){return arguments.length?(n=i(0,t),o):n},o.sortGroups=function(n){return arguments.length?(r=n,o):r},o.sortSubgroups=function(n){return arguments.length?(e=n,o):e},o.sortChords=function(n){return arguments.length?(null==n?u=null:(t=n,u=function(n,r){return t(n.source.value+n.target.value,r.source.value+r.target.value)})._=n,o):u&&u._;var t},o},n.ribbon=function(){var n=s,t=p,o=h,l=d,i=g,v=null;function y(){var f,s=c.call(arguments),p=n.apply(this,s),h=t.apply(this,s),d=+o.apply(this,(s[0]=p,s)),g=l.apply(this,s)-a,y=i.apply(this,s)-a,A=d*e(g),x=d*u(g),b=+o.apply(this,(s[0]=h,s)),M=l.apply(this,s)-a,m=i.apply(this,s)-a;if(v||(v=f=r.path()),v.moveTo(A,x),v.arc(0,0,d,g,y),g===M&&y===m||(v.quadraticCurveTo(0,0,b*e(M),b*u(M)),v.arc(0,0,b,M,m)),v.quadraticCurveTo(0,0,A,x),v.closePath(),f)return v=null,f+""||null}return y.radius=function(n){return arguments.length?(o="function"==typeof n?n:f(+n),y):o},y.startAngle=function(n){return arguments.length?(l="function"==typeof n?n:f(+n),y):l},y.endAngle=function(n){return arguments.length?(i="function"==typeof n?n:f(+n),y):i},y.source=function(t){return arguments.length?(n=t,y):n},y.target=function(n){return arguments.length?(t=n,y):t},y.context=function(n){return arguments.length?(v=null==n?null:n,y):v},y},Object.defineProperty(n,"__esModule",{value:!0})});

},{"d3-array":5,"d3-path":22}],9:[function(require,module,exports){
!function(n,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(n.d3=n.d3||{})}(this,function(n){"use strict";function t(){}function e(n,e){var r=new t;if(n instanceof t)n.each(function(n,t){r.set(t,n)});else if(Array.isArray(n)){var i,u=-1,o=n.length;if(null==e)for(;++u<o;)r.set(u,n[u]);else for(;++u<o;)r.set(e(i=n[u],u,n),i)}else if(n)for(var s in n)r.set(s,n[s]);return r}function r(){return{}}function i(n,t,e){n[t]=e}function u(){return e()}function o(n,t,e){n.set(t,e)}function s(){}t.prototype=e.prototype={constructor:t,has:function(n){return"$"+n in this},get:function(n){return this["$"+n]},set:function(n,t){return this["$"+n]=t,this},remove:function(n){var t="$"+n;return t in this&&delete this[t]},clear:function(){for(var n in this)"$"===n[0]&&delete this[n]},keys:function(){var n=[];for(var t in this)"$"===t[0]&&n.push(t.slice(1));return n},values:function(){var n=[];for(var t in this)"$"===t[0]&&n.push(this[t]);return n},entries:function(){var n=[];for(var t in this)"$"===t[0]&&n.push({key:t.slice(1),value:this[t]});return n},size:function(){var n=0;for(var t in this)"$"===t[0]&&++n;return n},empty:function(){for(var n in this)if("$"===n[0])return!1;return!0},each:function(n){for(var t in this)"$"===t[0]&&n(this[t],t.slice(1),this)}};var f=e.prototype;function c(n,t){var e=new s;if(n instanceof s)n.each(function(n){e.add(n)});else if(n){var r=-1,i=n.length;if(null==t)for(;++r<i;)e.add(n[r]);else for(;++r<i;)e.add(t(n[r],r,n))}return e}s.prototype=c.prototype={constructor:s,has:f.has,add:function(n){return this["$"+(n+="")]=n,this},remove:f.remove,clear:f.clear,values:f.keys,size:f.size,empty:f.empty,each:f.each},n.nest=function(){var n,t,s,f=[],c=[];function a(r,i,u,o){if(i>=f.length)return null!=n&&r.sort(n),null!=t?t(r):r;for(var s,c,h,l=-1,v=r.length,p=f[i++],y=e(),d=u();++l<v;)(h=y.get(s=p(c=r[l])+""))?h.push(c):y.set(s,[c]);return y.each(function(n,t){o(d,t,a(n,i,u,o))}),d}return s={object:function(n){return a(n,0,r,i)},map:function(n){return a(n,0,u,o)},entries:function(n){return function n(e,r){if(++r>f.length)return e;var i,u=c[r-1];return null!=t&&r>=f.length?i=e.entries():(i=[],e.each(function(t,e){i.push({key:e,values:n(t,r)})})),null!=u?i.sort(function(n,t){return u(n.key,t.key)}):i}(a(n,0,u,o),0)},key:function(n){return f.push(n),s},sortKeys:function(n){return c[f.length-1]=n,s},sortValues:function(t){return n=t,s},rollup:function(n){return t=n,s}}},n.set=c,n.map=e,n.keys=function(n){var t=[];for(var e in n)t.push(e);return t},n.values=function(n){var t=[];for(var e in n)t.push(n[e]);return t},n.entries=function(n){var t=[];for(var e in n)t.push({key:e,value:n[e]});return t},Object.defineProperty(n,"__esModule",{value:!0})});

},{}],10:[function(require,module,exports){
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e(t.d3=t.d3||{})}(this,function(t){"use strict";function e(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function n(t,e){var n=Object.create(t.prototype);for(var i in e)n[i]=e[i];return n}function i(){}var r="\\s*([+-]?\\d+)\\s*",a="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",h="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",s=/^#([0-9a-f]{3})$/,o=/^#([0-9a-f]{6})$/,l=new RegExp("^rgb\\("+[r,r,r]+"\\)$"),u=new RegExp("^rgb\\("+[h,h,h]+"\\)$"),c=new RegExp("^rgba\\("+[r,r,r,a]+"\\)$"),g=new RegExp("^rgba\\("+[h,h,h,a]+"\\)$"),d=new RegExp("^hsl\\("+[a,h,h]+"\\)$"),p=new RegExp("^hsla\\("+[a,h,h,a]+"\\)$"),f={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function b(t){var e;return t=(t+"").trim().toLowerCase(),(e=s.exec(t))?new N((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=o.exec(t))?y(parseInt(e[1],16)):(e=l.exec(t))?new N(e[1],e[2],e[3],1):(e=u.exec(t))?new N(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=c.exec(t))?w(e[1],e[2],e[3],e[4]):(e=g.exec(t))?w(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=d.exec(t))?v(e[1],e[2]/100,e[3]/100,1):(e=p.exec(t))?v(e[1],e[2]/100,e[3]/100,e[4]):f.hasOwnProperty(t)?y(f[t]):"transparent"===t?new N(NaN,NaN,NaN,0):null}function y(t){return new N(t>>16&255,t>>8&255,255&t,1)}function w(t,e,n,i){return i<=0&&(t=e=n=NaN),new N(t,e,n,i)}function m(t){return t instanceof i||(t=b(t)),t?new N((t=t.rgb()).r,t.g,t.b,t.opacity):new N}function k(t,e,n,i){return 1===arguments.length?m(t):new N(t,e,n,null==i?1:i)}function N(t,e,n,i){this.r=+t,this.g=+e,this.b=+n,this.opacity=+i}function M(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function v(t,e,n,i){return i<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new q(t,e,n,i)}function x(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof q)return new q(t.h,t.s,t.l,t.opacity);if(t instanceof i||(t=b(t)),!t)return new q;if(t instanceof q)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,a=Math.min(e,n,r),h=Math.max(e,n,r),s=NaN,o=h-a,l=(h+a)/2;return o?(s=e===h?(n-r)/o+6*(n<r):n===h?(r-e)/o+2:(e-n)/o+4,o/=l<.5?h+a:2-h-a,s*=60):o=l>0&&l<1?0:s,new q(s,o,l,t.opacity)}(t):new q(t,e,n,null==r?1:r)}function q(t,e,n,i){this.h=+t,this.s=+e,this.l=+n,this.opacity=+i}function E(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}e(i,b,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),e(N,k,n(i,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new N(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new N(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+M(this.r)+M(this.g)+M(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),e(q,x,n(i,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new q(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new q(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,i=n+(n<.5?n:1-n)*e,r=2*n-i;return new N(E(t>=240?t-240:t+120,r,i),E(t,r,i),E(t<120?t+240:t-120,r,i),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var $=Math.PI/180,R=180/Math.PI,j=.96422,I=1,P=.82521,O=4/29,S=6/29,_=3*S*S,z=S*S*S;function C(t){if(t instanceof A)return new A(t.l,t.a,t.b,t.opacity);if(t instanceof K){if(isNaN(t.h))return new A(t.l,0,0,t.opacity);var e=t.h*$;return new A(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof N||(t=m(t));var n,i,r=G(t.r),a=G(t.g),h=G(t.b),s=B((.2225045*r+.7168786*a+.0606169*h)/I);return r===a&&a===h?n=i=s:(n=B((.4360747*r+.3850649*a+.1430804*h)/j),i=B((.0139322*r+.0971045*a+.7141733*h)/P)),new A(116*s-16,500*(n-s),200*(s-i),t.opacity)}function L(t,e,n,i){return 1===arguments.length?C(t):new A(t,e,n,null==i?1:i)}function A(t,e,n,i){this.l=+t,this.a=+e,this.b=+n,this.opacity=+i}function B(t){return t>z?Math.pow(t,1/3):t/_+O}function D(t){return t>S?t*t*t:_*(t-O)}function F(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function G(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function H(t){if(t instanceof K)return new K(t.h,t.c,t.l,t.opacity);if(t instanceof A||(t=C(t)),0===t.a&&0===t.b)return new K(NaN,0,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*R;return new K(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function J(t,e,n,i){return 1===arguments.length?H(t):new K(t,e,n,null==i?1:i)}function K(t,e,n,i){this.h=+t,this.c=+e,this.l=+n,this.opacity=+i}e(A,L,n(i,{brighter:function(t){return new A(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new A(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new N(F(3.1338561*(e=j*D(e))-1.6168667*(t=I*D(t))-.4906146*(n=P*D(n))),F(-.9787684*e+1.9161415*t+.033454*n),F(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),e(K,J,n(i,{brighter:function(t){return new K(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new K(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return C(this).rgb()}}));var Q=-.14861,T=1.78277,U=-.29227,V=-.90649,W=1.97294,X=W*V,Y=W*T,Z=T*U-V*Q;function tt(t,e,n,i){return 1===arguments.length?function(t){if(t instanceof et)return new et(t.h,t.s,t.l,t.opacity);t instanceof N||(t=m(t));var e=t.r/255,n=t.g/255,i=t.b/255,r=(Z*i+X*e-Y*n)/(Z+X-Y),a=i-r,h=(W*(n-r)-U*a)/V,s=Math.sqrt(h*h+a*a)/(W*r*(1-r)),o=s?Math.atan2(h,a)*R-120:NaN;return new et(o<0?o+360:o,s,r,t.opacity)}(t):new et(t,e,n,null==i?1:i)}function et(t,e,n,i){this.h=+t,this.s=+e,this.l=+n,this.opacity=+i}e(et,tt,n(i,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new et(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new et(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*$,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),i=Math.cos(t),r=Math.sin(t);return new N(255*(e+n*(Q*i+T*r)),255*(e+n*(U*i+V*r)),255*(e+n*(W*i)),this.opacity)}})),t.color=b,t.rgb=k,t.hsl=x,t.lab=L,t.hcl=J,t.lch=function(t,e,n,i){return 1===arguments.length?H(t):new K(n,e,t,null==i?1:i)},t.gray=function(t,e){return new A(t,0,0,null==e?1:e)},t.cubehelix=tt,Object.defineProperty(t,"__esModule",{value:!0})});

},{}],11:[function(require,module,exports){
!function(t,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports,require("d3-array")):"function"==typeof define&&define.amd?define(["exports","d3-array"],r):r(t.d3=t.d3||{},t.d3)}(this,function(t,r){"use strict";var n=Array.prototype.slice;function e(t,r){return t-r}function i(t){return function(){return t}}function a(t,r){for(var n,e=-1,i=r.length;++e<i;)if(n=o(t,r[e]))return n;return 0}function o(t,r){for(var n=r[0],e=r[1],i=-1,a=0,o=t.length,f=o-1;a<o;f=a++){var u=t[a],c=u[0],d=u[1],l=t[f],s=l[0],g=l[1];if(h(u,l,r))return 0;d>e!=g>e&&n<(s-c)*(e-d)/(g-d)+c&&(i=-i)}return i}function h(t,r,n){var e,i,a,o;return function(t,r,n){return(r[0]-t[0])*(n[1]-t[1])==(n[0]-t[0])*(r[1]-t[1])}(t,r,n)&&(i=t[e=+(t[0]===r[0])],a=n[e],o=r[e],i<=a&&a<=o||o<=a&&a<=i)}function f(){}var u=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]];function c(){var t=1,o=1,h=r.thresholdSturges,c=g;function d(t){var n=h(t);if(Array.isArray(n))n=n.slice().sort(e);else{var i=r.extent(t),a=i[0],o=i[1];n=r.tickStep(a,o,n),n=r.range(Math.floor(a/n)*n,Math.floor(o/n)*n,n)}return n.map(function(r){return l(t,r)})}function l(r,n){var e=[],i=[];return function(r,n,e){var i,a,h,f,c,d,l=new Array,g=new Array;i=a=-1,f=r[0]>=n,u[f<<1].forEach(v);for(;++i<t-1;)h=f,f=r[i+1]>=n,u[h|f<<1].forEach(v);u[f<<0].forEach(v);for(;++a<o-1;){for(i=-1,f=r[a*t+t]>=n,c=r[a*t]>=n,u[f<<1|c<<2].forEach(v);++i<t-1;)h=f,f=r[a*t+t+i+1]>=n,d=c,c=r[a*t+i+1]>=n,u[h|f<<1|c<<2|d<<3].forEach(v);u[f|c<<3].forEach(v)}i=-1,c=r[a*t]>=n,u[c<<2].forEach(v);for(;++i<t-1;)d=c,c=r[a*t+i+1]>=n,u[c<<2|d<<3].forEach(v);function v(t){var r,n,o=[t[0][0]+i,t[0][1]+a],h=[t[1][0]+i,t[1][1]+a],f=s(o),u=s(h);(r=g[f])?(n=l[u])?(delete g[r.end],delete l[n.start],r===n?(r.ring.push(h),e(r.ring)):l[r.start]=g[n.end]={start:r.start,end:n.end,ring:r.ring.concat(n.ring)}):(delete g[r.end],r.ring.push(h),g[r.end=u]=r):(r=l[u])?(n=g[f])?(delete l[r.start],delete g[n.end],r===n?(r.ring.push(h),e(r.ring)):l[n.start]=g[r.end]={start:n.start,end:r.end,ring:n.ring.concat(r.ring)}):(delete l[r.start],r.ring.unshift(o),l[r.start=f]=r):l[f]=g[u]={start:f,end:u,ring:[o,h]}}u[c<<3].forEach(v)}(r,n,function(t){c(t,r,n),function(t){for(var r=0,n=t.length,e=t[n-1][1]*t[0][0]-t[n-1][0]*t[0][1];++r<n;)e+=t[r-1][1]*t[r][0]-t[r-1][0]*t[r][1];return e}(t)>0?e.push([t]):i.push(t)}),i.forEach(function(t){for(var r,n=0,i=e.length;n<i;++n)if(-1!==a((r=e[n])[0],t))return void r.push(t)}),{type:"MultiPolygon",value:n,coordinates:e}}function s(r){return 2*r[0]+r[1]*(t+1)*4}function g(r,n,e){r.forEach(function(r){var i,a=r[0],h=r[1],f=0|a,u=0|h,c=n[u*t+f];a>0&&a<t&&f===a&&(i=n[u*t+f-1],r[0]=a+(e-i)/(c-i)-.5),h>0&&h<o&&u===h&&(i=n[(u-1)*t+f],r[1]=h+(e-i)/(c-i)-.5)})}return d.contour=l,d.size=function(r){if(!arguments.length)return[t,o];var n=Math.ceil(r[0]),e=Math.ceil(r[1]);if(!(n>0&&e>0))throw new Error("invalid size");return t=n,o=e,d},d.thresholds=function(t){return arguments.length?(h="function"==typeof t?t:Array.isArray(t)?i(n.call(t)):i(t),d):h},d.smooth=function(t){return arguments.length?(c=t?g:f,d):c===g},d}function d(t,r,n){for(var e=t.width,i=t.height,a=1+(n<<1),o=0;o<i;++o)for(var h=0,f=0;h<e+n;++h)h<e&&(f+=t.data[h+o*e]),h>=n&&(h>=a&&(f-=t.data[h-a+o*e]),r.data[h-n+o*e]=f/Math.min(h+1,e-1+a-h,a))}function l(t,r,n){for(var e=t.width,i=t.height,a=1+(n<<1),o=0;o<e;++o)for(var h=0,f=0;h<i+n;++h)h<i&&(f+=t.data[o+h*e]),h>=n&&(h>=a&&(f-=t.data[o+(h-a)*e]),r.data[o+(h-n)*e]=f/Math.min(h+1,i-1+a-h,a))}function s(t){return t[0]}function g(t){return t[1]}function v(){return 1}t.contours=c,t.contourDensity=function(){var t=s,e=g,a=v,o=960,h=500,f=20,u=2,w=3*f,y=o+2*w>>u,p=h+2*w>>u,M=i(20);function E(n){var i=new Float32Array(y*p),o=new Float32Array(y*p);n.forEach(function(r,n,o){var h=+t(r,n,o)+w>>u,f=+e(r,n,o)+w>>u,c=+a(r,n,o);h>=0&&h<y&&f>=0&&f<p&&(i[h+f*y]+=c)}),d({width:y,height:p,data:i},{width:y,height:p,data:o},f>>u),l({width:y,height:p,data:o},{width:y,height:p,data:i},f>>u),d({width:y,height:p,data:i},{width:y,height:p,data:o},f>>u),l({width:y,height:p,data:o},{width:y,height:p,data:i},f>>u),d({width:y,height:p,data:i},{width:y,height:p,data:o},f>>u),l({width:y,height:p,data:o},{width:y,height:p,data:i},f>>u);var h=M(i);if(!Array.isArray(h)){var s=r.max(i);h=r.tickStep(0,s,h),(h=r.range(0,Math.floor(s/h)*h,h)).shift()}return c().thresholds(h).size([y,p])(i).map(A)}function A(t){return t.value*=Math.pow(2,-2*u),t.coordinates.forEach(m),t}function m(t){t.forEach(z)}function z(t){t.forEach(x)}function x(t){t[0]=t[0]*Math.pow(2,u)-w,t[1]=t[1]*Math.pow(2,u)-w}function b(){return y=o+2*(w=3*f)>>u,p=h+2*w>>u,E}return E.x=function(r){return arguments.length?(t="function"==typeof r?r:i(+r),E):t},E.y=function(t){return arguments.length?(e="function"==typeof t?t:i(+t),E):e},E.weight=function(t){return arguments.length?(a="function"==typeof t?t:i(+t),E):a},E.size=function(t){if(!arguments.length)return[o,h];var r=Math.ceil(t[0]),n=Math.ceil(t[1]);if(!(r>=0||r>=0))throw new Error("invalid size");return o=r,h=n,b()},E.cellSize=function(t){if(!arguments.length)return 1<<u;if(!((t=+t)>=1))throw new Error("invalid cell size");return u=Math.floor(Math.log(t)/Math.LN2),b()},E.thresholds=function(t){return arguments.length?(M="function"==typeof t?t:Array.isArray(t)?i(n.call(t)):i(t),E):M},E.bandwidth=function(t){if(!arguments.length)return Math.sqrt(f*(f+1));if(!((t=+t)>=0))throw new Error("invalid bandwidth");return f=Math.round((Math.sqrt(4*t*t+1)-1)/2),b()},E},Object.defineProperty(t,"__esModule",{value:!0})});

},{"d3-array":5}],12:[function(require,module,exports){
!function(n,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e(n.d3=n.d3||{})}(this,function(n){"use strict";var e={value:function(){}};function t(){for(var n,e=0,t=arguments.length,o={};e<t;++e){if(!(n=arguments[e]+"")||n in o)throw new Error("illegal type: "+n);o[n]=[]}return new r(o)}function r(n){this._=n}function o(n,e){for(var t,r=0,o=n.length;r<o;++r)if((t=n[r]).name===e)return t.value}function i(n,t,r){for(var o=0,i=n.length;o<i;++o)if(n[o].name===t){n[o]=e,n=n.slice(0,o).concat(n.slice(o+1));break}return null!=r&&n.push({name:t,value:r}),n}r.prototype=t.prototype={constructor:r,on:function(n,e){var t,r,f=this._,l=(r=f,(n+"").trim().split(/^|\s+/).map(function(n){var e="",t=n.indexOf(".");if(t>=0&&(e=n.slice(t+1),n=n.slice(0,t)),n&&!r.hasOwnProperty(n))throw new Error("unknown type: "+n);return{type:n,name:e}})),a=-1,u=l.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++a<u;)if(t=(n=l[a]).type)f[t]=i(f[t],n.name,e);else if(null==e)for(t in f)f[t]=i(f[t],n.name,null);return this}for(;++a<u;)if((t=(n=l[a]).type)&&(t=o(f[t],n.name)))return t},copy:function(){var n={},e=this._;for(var t in e)n[t]=e[t].slice();return new r(n)},call:function(n,e){if((t=arguments.length-2)>0)for(var t,r,o=new Array(t),i=0;i<t;++i)o[i]=arguments[i+2];if(!this._.hasOwnProperty(n))throw new Error("unknown type: "+n);for(i=0,t=(r=this._[n]).length;i<t;++i)r[i].value.apply(e,o)},apply:function(n,e,t){if(!this._.hasOwnProperty(n))throw new Error("unknown type: "+n);for(var r=this._[n],o=0,i=r.length;o<i;++o)r[o].value.apply(e,t)}},n.dispatch=t,Object.defineProperty(n,"__esModule",{value:!0})});

},{}],13:[function(require,module,exports){
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("d3-selection"),require("d3-dispatch")):"function"==typeof define&&define.amd?define(["exports","d3-selection","d3-dispatch"],e):e(t.d3=t.d3||{},t.d3,t.d3)}(this,function(t,e,n){"use strict";function o(){e.event.stopImmediatePropagation()}function i(){e.event.preventDefault(),e.event.stopImmediatePropagation()}function r(t){var n=t.document.documentElement,o=e.select(t).on("dragstart.drag",i,!0);"onselectstart"in n?o.on("selectstart.drag",i,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")}function c(t,n){var o=t.document.documentElement,r=e.select(t).on("dragstart.drag",null);n&&(r.on("click.drag",i,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in o?r.on("selectstart.drag",null):(o.style.MozUserSelect=o.__noselect,delete o.__noselect)}function u(t){return function(){return t}}function s(t,e,n,o,i,r,c,u,s,a){this.target=t,this.type=e,this.subject=n,this.identifier=o,this.active=i,this.x=r,this.y=c,this.dx=u,this.dy=s,this._=a}function a(){return!e.event.button}function l(){return this.parentNode}function d(t){return null==t?{x:e.event.x,y:e.event.y}:t}function f(){return"ontouchstart"in this}s.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t},t.drag=function(){var t,h,p,v,g=a,m=l,y=d,b=f,_={},w=n.dispatch("start","drag","end"),x=0,T=0;function j(t){t.on("mousedown.drag",k).filter(b).on("touchstart.drag",q).on("touchmove.drag",z).on("touchend.drag touchcancel.drag",D).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function k(){if(!v&&g.apply(this,arguments)){var n=P("mouse",m.apply(this,arguments),e.mouse,this,arguments);n&&(e.select(e.event.view).on("mousemove.drag",E,!0).on("mouseup.drag",M,!0),r(e.event.view),o(),p=!1,t=e.event.clientX,h=e.event.clientY,n("start"))}}function E(){if(i(),!p){var n=e.event.clientX-t,o=e.event.clientY-h;p=n*n+o*o>T}_.mouse("drag")}function M(){e.select(e.event.view).on("mousemove.drag mouseup.drag",null),c(e.event.view,p),i(),_.mouse("end")}function q(){if(g.apply(this,arguments)){var t,n,i=e.event.changedTouches,r=m.apply(this,arguments),c=i.length;for(t=0;t<c;++t)(n=P(i[t].identifier,r,e.touch,this,arguments))&&(o(),n("start"))}}function z(){var t,n,o=e.event.changedTouches,r=o.length;for(t=0;t<r;++t)(n=_[o[t].identifier])&&(i(),n("drag"))}function D(){var t,n,i=e.event.changedTouches,r=i.length;for(v&&clearTimeout(v),v=setTimeout(function(){v=null},500),t=0;t<r;++t)(n=_[i[t].identifier])&&(o(),n("end"))}function P(t,n,o,i,r){var c,u,a,l=o(n,t),d=w.copy();if(e.customEvent(new s(j,"beforestart",c,t,x,l[0],l[1],0,0,d),function(){return null!=(e.event.subject=c=y.apply(i,r))&&(u=c.x-l[0]||0,a=c.y-l[1]||0,!0)}))return function f(h){var p,v=l;switch(h){case"start":_[t]=f,p=x++;break;case"end":delete _[t],--x;case"drag":l=o(n,t),p=x}e.customEvent(new s(j,h,c,t,p,l[0]+u,l[1]+a,l[0]-v[0],l[1]-v[1],d),d.apply,d,[h,i,r])}}return j.filter=function(t){return arguments.length?(g="function"==typeof t?t:u(!!t),j):g},j.container=function(t){return arguments.length?(m="function"==typeof t?t:u(t),j):m},j.subject=function(t){return arguments.length?(y="function"==typeof t?t:u(t),j):y},j.touchable=function(t){return arguments.length?(b="function"==typeof t?t:u(!!t),j):b},j.on=function(){var t=w.on.apply(w,arguments);return t===w?j:t},j.clickDistance=function(t){return arguments.length?(T=(t=+t)*t,j):Math.sqrt(T)},j},t.dragDisable=r,t.dragEnable=c,Object.defineProperty(t,"__esModule",{value:!0})});

},{"d3-dispatch":12,"d3-selection":28}],14:[function(require,module,exports){
!function(r,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports):"function"==typeof define&&define.amd?define(["exports"],n):n(r.d3=r.d3||{})}(this,function(r){"use strict";var n={},t={},e=34,o=10,a=13;function u(r){return new Function("d","return {"+r.map(function(r,n){return JSON.stringify(r)+": d["+n+"]"}).join(",")+"}")}function i(r){var n=Object.create(null),t=[];return r.forEach(function(r){for(var e in r)e in n||t.push(n[e]=e)}),t}function f(r,n){var t=r+"",e=t.length;return e<n?new Array(n-e+1).join(0)+t:t}function s(r){var n,t=r.getUTCHours(),e=r.getUTCMinutes(),o=r.getUTCSeconds(),a=r.getUTCMilliseconds();return isNaN(r)?"Invalid Date":((n=r.getUTCFullYear())<0?"-"+f(-n,6):n>9999?"+"+f(n,6):f(n,4))+"-"+f(r.getUTCMonth()+1,2)+"-"+f(r.getUTCDate(),2)+(a?"T"+f(t,2)+":"+f(e,2)+":"+f(o,2)+"."+f(a,3)+"Z":o?"T"+f(t,2)+":"+f(e,2)+":"+f(o,2)+"Z":e||t?"T"+f(t,2)+":"+f(e,2)+"Z":"")}function c(r){var f=new RegExp('["'+r+"\n\r]"),c=r.charCodeAt(0);function d(r,u){var i,f=[],s=r.length,d=0,l=0,v=s<=0,m=!1;function p(){if(v)return t;if(m)return m=!1,n;var u,i,f=d;if(r.charCodeAt(f)===e){for(;d++<s&&r.charCodeAt(d)!==e||r.charCodeAt(++d)===e;);return(u=d)>=s?v=!0:(i=r.charCodeAt(d++))===o?m=!0:i===a&&(m=!0,r.charCodeAt(d)===o&&++d),r.slice(f+1,u-1).replace(/""/g,'"')}for(;d<s;){if((i=r.charCodeAt(u=d++))===o)m=!0;else if(i===a)m=!0,r.charCodeAt(d)===o&&++d;else if(i!==c)continue;return r.slice(f,u)}return v=!0,r.slice(f,s)}for(r.charCodeAt(s-1)===o&&--s,r.charCodeAt(s-1)===a&&--s;(i=p())!==t;){for(var h=[];i!==n&&i!==t;)h.push(i),i=p();u&&null==(h=u(h,l++))||f.push(h)}return f}function l(n,t){return n.map(function(n){return t.map(function(r){return m(n[r])}).join(r)})}function v(n){return n.map(m).join(r)}function m(r){return null==r?"":r instanceof Date?s(r):f.test(r+="")?'"'+r.replace(/"/g,'""')+'"':r}return{parse:function(r,n){var t,e,o=d(r,function(r,o){if(t)return t(r,o-1);e=r,t=n?function(r,n){var t=u(r);return function(e,o){return n(t(e),o,r)}}(r,n):u(r)});return o.columns=e||[],o},parseRows:d,format:function(n,t){return null==t&&(t=i(n)),[t.map(m).join(r)].concat(l(n,t)).join("\n")},formatBody:function(r,n){return null==n&&(n=i(r)),l(r,n).join("\n")},formatRows:function(r){return r.map(v).join("\n")}}}var d=c(","),l=d.parse,v=d.parseRows,m=d.format,p=d.formatBody,h=d.formatRows,C=c("\t"),w=C.parse,g=C.parseRows,y=C.format,T=C.formatBody,j=C.formatRows;r.dsvFormat=c,r.csvParse=l,r.csvParseRows=v,r.csvFormat=m,r.csvFormatBody=p,r.csvFormatRows=h,r.tsvParse=w,r.tsvParseRows=g,r.tsvFormat=y,r.tsvFormatBody=T,r.tsvFormatRows=j,r.autoType=function(r){for(var n in r){var t,e=r[n].trim();if(e)if("true"===e)e=!0;else if("false"===e)e=!1;else if("NaN"===e)e=NaN;else if(isNaN(t=+e)){if(!/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/.test(e))continue;e=new Date(e)}else e=t;else e=null;r[n]=e}return r},Object.defineProperty(r,"__esModule",{value:!0})});

},{}],15:[function(require,module,exports){
!function(n,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(n.d3=n.d3||{})}(this,function(n){"use strict";function t(n){return((n*=2)<=1?n*n:--n*(2-n)+1)/2}function e(n){return((n*=2)<=1?n*n*n:(n-=2)*n*n+2)/2}var u=function n(t){function e(n){return Math.pow(n,t)}return t=+t,e.exponent=n,e}(3),r=function n(t){function e(n){return 1-Math.pow(1-n,t)}return t=+t,e.exponent=n,e}(3),a=function n(t){function e(n){return((n*=2)<=1?Math.pow(n,t):2-Math.pow(2-n,t))/2}return t=+t,e.exponent=n,e}(3),o=Math.PI,i=o/2;function c(n){return(1-Math.cos(o*n))/2}function s(n){return((n*=2)<=1?Math.pow(2,10*n-10):2-Math.pow(2,10-10*n))/2}function f(n){return((n*=2)<=1?1-Math.sqrt(1-n*n):Math.sqrt(1-(n-=2)*n)+1)/2}var h=4/11,p=6/11,M=8/11,d=.75,I=9/11,O=10/11,l=.9375,x=21/22,w=63/64,v=1/h/h;function m(n){return(n=+n)<h?v*n*n:n<M?v*(n-=p)*n+d:n<O?v*(n-=I)*n+l:v*(n-=x)*n+w}var y=function n(t){function e(n){return n*n*((t+1)*n-t)}return t=+t,e.overshoot=n,e}(1.70158),B=function n(t){function e(n){return--n*n*((t+1)*n+t)+1}return t=+t,e.overshoot=n,e}(1.70158),C=function n(t){function e(n){return((n*=2)<1?n*n*((t+1)*n-t):(n-=2)*n*((t+1)*n+t)+2)/2}return t=+t,e.overshoot=n,e}(1.70158),E=2*Math.PI,P=function n(t,e){var u=Math.asin(1/(t=Math.max(1,t)))*(e/=E);function r(n){return t*Math.pow(2,10*--n)*Math.sin((u-n)/e)}return r.amplitude=function(t){return n(t,e*E)},r.period=function(e){return n(t,e)},r}(1,.3),b=function n(t,e){var u=Math.asin(1/(t=Math.max(1,t)))*(e/=E);function r(n){return 1-t*Math.pow(2,-10*(n=+n))*Math.sin((n+u)/e)}return r.amplitude=function(t){return n(t,e*E)},r.period=function(e){return n(t,e)},r}(1,.3),k=function n(t,e){var u=Math.asin(1/(t=Math.max(1,t)))*(e/=E);function r(n){return((n=2*n-1)<0?t*Math.pow(2,10*n)*Math.sin((u-n)/e):2-t*Math.pow(2,-10*n)*Math.sin((u+n)/e))/2}return r.amplitude=function(t){return n(t,e*E)},r.period=function(e){return n(t,e)},r}(1,.3);n.easeLinear=function(n){return+n},n.easeQuad=t,n.easeQuadIn=function(n){return n*n},n.easeQuadOut=function(n){return n*(2-n)},n.easeQuadInOut=t,n.easeCubic=e,n.easeCubicIn=function(n){return n*n*n},n.easeCubicOut=function(n){return--n*n*n+1},n.easeCubicInOut=e,n.easePoly=a,n.easePolyIn=u,n.easePolyOut=r,n.easePolyInOut=a,n.easeSin=c,n.easeSinIn=function(n){return 1-Math.cos(n*i)},n.easeSinOut=function(n){return Math.sin(n*i)},n.easeSinInOut=c,n.easeExp=s,n.easeExpIn=function(n){return Math.pow(2,10*n-10)},n.easeExpOut=function(n){return 1-Math.pow(2,-10*n)},n.easeExpInOut=s,n.easeCircle=f,n.easeCircleIn=function(n){return 1-Math.sqrt(1-n*n)},n.easeCircleOut=function(n){return Math.sqrt(1- --n*n)},n.easeCircleInOut=f,n.easeBounce=m,n.easeBounceIn=function(n){return 1-m(1-n)},n.easeBounceOut=m,n.easeBounceInOut=function(n){return((n*=2)<=1?1-m(1-n):m(n-1)+1)/2},n.easeBack=C,n.easeBackIn=y,n.easeBackOut=B,n.easeBackInOut=C,n.easeElastic=b,n.easeElasticIn=P,n.easeElasticOut=b,n.easeElasticInOut=k,Object.defineProperty(n,"__esModule",{value:!0})});

},{}],16:[function(require,module,exports){
!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("d3-dsv")):"function"==typeof define&&define.amd?define(["exports","d3-dsv"],n):n(t.d3=t.d3||{},t.d3)}(this,function(t,n){"use strict";function e(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.blob()}function r(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.arrayBuffer()}function o(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}function u(t,n){return fetch(t,n).then(o)}function f(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),u(n,e).then(function(n){return t(n,r)})}}var i=f(n.csvParse),s=f(n.tsvParse);function c(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}function a(t){return function(n,e){return u(n,e).then(function(n){return(new DOMParser).parseFromString(n,t)})}}var d=a("application/xml"),h=a("text/html"),v=a("image/svg+xml");t.blob=function(t,n){return fetch(t,n).then(e)},t.buffer=function(t,n){return fetch(t,n).then(r)},t.dsv=function(t,e,r,o){3===arguments.length&&"function"==typeof r&&(o=r,r=void 0);var f=n.dsvFormat(t);return u(e,r).then(function(t){return f.parse(t,o)})},t.csv=i,t.tsv=s,t.image=function(t,n){return new Promise(function(e,r){var o=new Image;for(var u in n)o[u]=n[u];o.onerror=r,o.onload=function(){e(o)},o.src=t})},t.json=function(t,n){return fetch(t,n).then(c)},t.text=u,t.xml=d,t.html=h,t.svg=v,Object.defineProperty(t,"__esModule",{value:!0})});

},{"d3-dsv":14}],17:[function(require,module,exports){
!function(n,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("d3-quadtree"),require("d3-collection"),require("d3-dispatch"),require("d3-timer")):"function"==typeof define&&define.amd?define(["exports","d3-quadtree","d3-collection","d3-dispatch","d3-timer"],t):t(n.d3=n.d3||{},n.d3,n.d3,n.d3,n.d3)}(this,function(n,t,e,r,i){"use strict";function u(n){return function(){return n}}function o(){return 1e-6*(Math.random()-.5)}function f(n){return n.x+n.vx}function a(n){return n.y+n.vy}function c(n){return n.index}function l(n,t){var e=n.get(t);if(!e)throw new Error("missing: "+t);return e}function h(n){return n.x}function v(n){return n.y}var y=10,d=Math.PI*(3-Math.sqrt(5));n.forceCenter=function(n,t){var e;function r(){var r,i,u=e.length,o=0,f=0;for(r=0;r<u;++r)o+=(i=e[r]).x,f+=i.y;for(o=o/u-n,f=f/u-t,r=0;r<u;++r)(i=e[r]).x-=o,i.y-=f}return null==n&&(n=0),null==t&&(t=0),r.initialize=function(n){e=n},r.x=function(t){return arguments.length?(n=+t,r):n},r.y=function(n){return arguments.length?(t=+n,r):t},r},n.forceCollide=function(n){var e,r,i=1,c=1;function l(){for(var n,u,l,v,y,d,x,g=e.length,s=0;s<c;++s)for(u=t.quadtree(e,f,a).visitAfter(h),n=0;n<g;++n)l=e[n],d=r[l.index],x=d*d,v=l.x+l.vx,y=l.y+l.vy,u.visit(p);function p(n,t,e,r,u){var f=n.data,a=n.r,c=d+a;if(!f)return t>v+c||r<v-c||e>y+c||u<y-c;if(f.index>l.index){var h=v-f.x-f.vx,g=y-f.y-f.vy,s=h*h+g*g;s<c*c&&(0===h&&(s+=(h=o())*h),0===g&&(s+=(g=o())*g),s=(c-(s=Math.sqrt(s)))/s*i,l.vx+=(h*=s)*(c=(a*=a)/(x+a)),l.vy+=(g*=s)*c,f.vx-=h*(c=1-c),f.vy-=g*c)}}}function h(n){if(n.data)return n.r=r[n.data.index];for(var t=n.r=0;t<4;++t)n[t]&&n[t].r>n.r&&(n.r=n[t].r)}function v(){if(e){var t,i,u=e.length;for(r=new Array(u),t=0;t<u;++t)i=e[t],r[i.index]=+n(i,t,e)}}return"function"!=typeof n&&(n=u(null==n?1:+n)),l.initialize=function(n){e=n,v()},l.iterations=function(n){return arguments.length?(c=+n,l):c},l.strength=function(n){return arguments.length?(i=+n,l):i},l.radius=function(t){return arguments.length?(n="function"==typeof t?t:u(+t),v(),l):n},l},n.forceLink=function(n){var t,r,i,f,a,h=c,v=function(n){return 1/Math.min(f[n.source.index],f[n.target.index])},y=u(30),d=1;function x(e){for(var i=0,u=n.length;i<d;++i)for(var f,c,l,h,v,y,x,g=0;g<u;++g)c=(f=n[g]).source,h=(l=f.target).x+l.vx-c.x-c.vx||o(),v=l.y+l.vy-c.y-c.vy||o(),h*=y=((y=Math.sqrt(h*h+v*v))-r[g])/y*e*t[g],v*=y,l.vx-=h*(x=a[g]),l.vy-=v*x,c.vx+=h*(x=1-x),c.vy+=v*x}function g(){if(i){var u,o,c=i.length,v=n.length,y=e.map(i,h);for(u=0,f=new Array(c);u<v;++u)(o=n[u]).index=u,"object"!=typeof o.source&&(o.source=l(y,o.source)),"object"!=typeof o.target&&(o.target=l(y,o.target)),f[o.source.index]=(f[o.source.index]||0)+1,f[o.target.index]=(f[o.target.index]||0)+1;for(u=0,a=new Array(v);u<v;++u)o=n[u],a[u]=f[o.source.index]/(f[o.source.index]+f[o.target.index]);t=new Array(v),s(),r=new Array(v),p()}}function s(){if(i)for(var e=0,r=n.length;e<r;++e)t[e]=+v(n[e],e,n)}function p(){if(i)for(var t=0,e=n.length;t<e;++t)r[t]=+y(n[t],t,n)}return null==n&&(n=[]),x.initialize=function(n){i=n,g()},x.links=function(t){return arguments.length?(n=t,g(),x):n},x.id=function(n){return arguments.length?(h=n,x):h},x.iterations=function(n){return arguments.length?(d=+n,x):d},x.strength=function(n){return arguments.length?(v="function"==typeof n?n:u(+n),s(),x):v},x.distance=function(n){return arguments.length?(y="function"==typeof n?n:u(+n),p(),x):y},x},n.forceManyBody=function(){var n,e,r,i,f=u(-30),a=1,c=1/0,l=.81;function y(i){var u,o=n.length,f=t.quadtree(n,h,v).visitAfter(x);for(r=i,u=0;u<o;++u)e=n[u],f.visit(g)}function d(){if(n){var t,e,r=n.length;for(i=new Array(r),t=0;t<r;++t)e=n[t],i[e.index]=+f(e,t,n)}}function x(n){var t,e,r,u,o,f=0,a=0;if(n.length){for(r=u=o=0;o<4;++o)(t=n[o])&&(e=Math.abs(t.value))&&(f+=t.value,a+=e,r+=e*t.x,u+=e*t.y);n.x=r/a,n.y=u/a}else{(t=n).x=t.data.x,t.y=t.data.y;do{f+=i[t.data.index]}while(t=t.next)}n.value=f}function g(n,t,u,f){if(!n.value)return!0;var h=n.x-e.x,v=n.y-e.y,y=f-t,d=h*h+v*v;if(y*y/l<d)return d<c&&(0===h&&(d+=(h=o())*h),0===v&&(d+=(v=o())*v),d<a&&(d=Math.sqrt(a*d)),e.vx+=h*n.value*r/d,e.vy+=v*n.value*r/d),!0;if(!(n.length||d>=c)){(n.data!==e||n.next)&&(0===h&&(d+=(h=o())*h),0===v&&(d+=(v=o())*v),d<a&&(d=Math.sqrt(a*d)));do{n.data!==e&&(y=i[n.data.index]*r/d,e.vx+=h*y,e.vy+=v*y)}while(n=n.next)}}return y.initialize=function(t){n=t,d()},y.strength=function(n){return arguments.length?(f="function"==typeof n?n:u(+n),d(),y):f},y.distanceMin=function(n){return arguments.length?(a=n*n,y):Math.sqrt(a)},y.distanceMax=function(n){return arguments.length?(c=n*n,y):Math.sqrt(c)},y.theta=function(n){return arguments.length?(l=n*n,y):Math.sqrt(l)},y},n.forceRadial=function(n,t,e){var r,i,o,f=u(.1);function a(n){for(var u=0,f=r.length;u<f;++u){var a=r[u],c=a.x-t||1e-6,l=a.y-e||1e-6,h=Math.sqrt(c*c+l*l),v=(o[u]-h)*i[u]*n/h;a.vx+=c*v,a.vy+=l*v}}function c(){if(r){var t,e=r.length;for(i=new Array(e),o=new Array(e),t=0;t<e;++t)o[t]=+n(r[t],t,r),i[t]=isNaN(o[t])?0:+f(r[t],t,r)}}return"function"!=typeof n&&(n=u(+n)),null==t&&(t=0),null==e&&(e=0),a.initialize=function(n){r=n,c()},a.strength=function(n){return arguments.length?(f="function"==typeof n?n:u(+n),c(),a):f},a.radius=function(t){return arguments.length?(n="function"==typeof t?t:u(+t),c(),a):n},a.x=function(n){return arguments.length?(t=+n,a):t},a.y=function(n){return arguments.length?(e=+n,a):e},a},n.forceSimulation=function(n){var t,u=1,o=.001,f=1-Math.pow(o,1/300),a=0,c=.6,l=e.map(),h=i.timer(x),v=r.dispatch("tick","end");function x(){g(),v.call("tick",t),u<o&&(h.stop(),v.call("end",t))}function g(e){var r,i,o=n.length;void 0===e&&(e=1);for(var h=0;h<e;++h)for(u+=(a-u)*f,l.each(function(n){n(u)}),r=0;r<o;++r)null==(i=n[r]).fx?i.x+=i.vx*=c:(i.x=i.fx,i.vx=0),null==i.fy?i.y+=i.vy*=c:(i.y=i.fy,i.vy=0);return t}function s(){for(var t,e=0,r=n.length;e<r;++e){if((t=n[e]).index=e,isNaN(t.fx)||(t.x=t.fx),isNaN(t.fy)||(t.y=t.fy),isNaN(t.x)||isNaN(t.y)){var i=y*Math.sqrt(e),u=e*d;t.x=i*Math.cos(u),t.y=i*Math.sin(u)}(isNaN(t.vx)||isNaN(t.vy))&&(t.vx=t.vy=0)}}function p(t){return t.initialize&&t.initialize(n),t}return null==n&&(n=[]),s(),t={tick:g,restart:function(){return h.restart(x),t},stop:function(){return h.stop(),t},nodes:function(e){return arguments.length?(n=e,s(),l.each(p),t):n},alpha:function(n){return arguments.length?(u=+n,t):u},alphaMin:function(n){return arguments.length?(o=+n,t):o},alphaDecay:function(n){return arguments.length?(f=+n,t):+f},alphaTarget:function(n){return arguments.length?(a=+n,t):a},velocityDecay:function(n){return arguments.length?(c=1-n,t):1-c},force:function(n,e){return arguments.length>1?(null==e?l.remove(n):l.set(n,p(e)),t):l.get(n)},find:function(t,e,r){var i,u,o,f,a,c=0,l=n.length;for(null==r?r=1/0:r*=r,c=0;c<l;++c)(o=(i=t-(f=n[c]).x)*i+(u=e-f.y)*u)<r&&(a=f,r=o);return a},on:function(n,e){return arguments.length>1?(v.on(n,e),t):v.on(n)}}},n.forceX=function(n){var t,e,r,i=u(.1);function o(n){for(var i,u=0,o=t.length;u<o;++u)(i=t[u]).vx+=(r[u]-i.x)*e[u]*n}function f(){if(t){var u,o=t.length;for(e=new Array(o),r=new Array(o),u=0;u<o;++u)e[u]=isNaN(r[u]=+n(t[u],u,t))?0:+i(t[u],u,t)}}return"function"!=typeof n&&(n=u(null==n?0:+n)),o.initialize=function(n){t=n,f()},o.strength=function(n){return arguments.length?(i="function"==typeof n?n:u(+n),f(),o):i},o.x=function(t){return arguments.length?(n="function"==typeof t?t:u(+t),f(),o):n},o},n.forceY=function(n){var t,e,r,i=u(.1);function o(n){for(var i,u=0,o=t.length;u<o;++u)(i=t[u]).vy+=(r[u]-i.y)*e[u]*n}function f(){if(t){var u,o=t.length;for(e=new Array(o),r=new Array(o),u=0;u<o;++u)e[u]=isNaN(r[u]=+n(t[u],u,t))?0:+i(t[u],u,t)}}return"function"!=typeof n&&(n=u(null==n?0:+n)),o.initialize=function(n){t=n,f()},o.strength=function(n){return arguments.length?(i="function"==typeof n?n:u(+n),f(),o):i},o.y=function(t){return arguments.length?(n="function"==typeof t?t:u(+t),f(),o):n},o},Object.defineProperty(n,"__esModule",{value:!0})});

},{"d3-collection":9,"d3-dispatch":12,"d3-quadtree":24,"d3-timer":32}],18:[function(require,module,exports){
!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports):"function"==typeof define&&define.amd?define(["exports"],n):n(t.d3=t.d3||{})}(this,function(t){"use strict";function n(t,n){if((r=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var r,e=t.slice(0,r);return[e.length>1?e[0]+e.slice(2):e,+t.slice(r+1)]}function r(t){return(t=n(Math.abs(t)))?t[1]:NaN}var e,i=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function o(t){return new a(t)}function a(t){if(!(n=i.exec(t)))throw new Error("invalid format: "+t);var n;this.fill=n[1]||" ",this.align=n[2]||">",this.sign=n[3]||"-",this.symbol=n[4]||"",this.zero=!!n[5],this.width=n[6]&&+n[6],this.comma=!!n[7],this.precision=n[8]&&+n[8].slice(1),this.trim=!!n[9],this.type=n[10]||""}function u(t,r){var e=n(t,r);if(!e)return t+"";var i=e[0],o=e[1];return o<0?"0."+new Array(-o).join("0")+i:i.length>o+1?i.slice(0,o+1)+"."+i.slice(o+1):i+new Array(o-i.length+2).join("0")}o.prototype=a.prototype,a.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var s={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return u(100*t,n)},r:u,s:function(t,r){var i=n(t,r);if(!i)return t+"";var o=i[0],a=i[1],u=a-(e=3*Math.max(-8,Math.min(8,Math.floor(a/3))))+1,s=o.length;return u===s?o:u>s?o+new Array(u-s+1).join("0"):u>0?o.slice(0,u)+"."+o.slice(u):"0."+new Array(1-u).join("0")+n(t,Math.max(0,r+u-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function c(t){return t}var f,h=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function l(t){var n,i,a=t.grouping&&t.thousands?(n=t.grouping,i=t.thousands,function(t,r){for(var e=t.length,o=[],a=0,u=n[0],s=0;e>0&&u>0&&(s+u+1>r&&(u=Math.max(1,r-s)),o.push(t.substring(e-=u,e+u)),!((s+=u+1)>r));)u=n[a=(a+1)%n.length];return o.reverse().join(i)}):c,u=t.currency,f=t.decimal,l=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):c,m=t.percent||"%";function p(t){var n=(t=o(t)).fill,r=t.align,i=t.sign,c=t.symbol,p=t.zero,g=t.width,d=t.comma,M=t.precision,x=t.trim,y=t.type;"n"===y?(d=!0,y="g"):s[y]||(null==M&&(M=12),x=!0,y="g"),(p||"0"===n&&"="===r)&&(p=!0,n="0",r="=");var b="$"===c?u[0]:"#"===c&&/[boxX]/.test(y)?"0"+y.toLowerCase():"",v="$"===c?u[1]:/[%p]/.test(y)?m:"",w=s[y],j=/[defgprs%]/.test(y);function k(t){var o,u,s,c=b,m=v;if("c"===y)m=w(t)+m,t="";else{var k=(t=+t)<0;if(t=w(Math.abs(t),M),x&&(t=function(t){t:for(var n,r=t.length,e=1,i=-1;e<r;++e)switch(t[e]){case".":i=n=e;break;case"0":0===i&&(i=e),n=e;break;default:if(i>0){if(!+t[e])break t;i=0}}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),k&&0==+t&&(k=!1),c=(k?"("===i?i:"-":"-"===i||"("===i?"":i)+c,m=("s"===y?h[8+e/3]:"")+m+(k&&"("===i?")":""),j)for(o=-1,u=t.length;++o<u;)if(48>(s=t.charCodeAt(o))||s>57){m=(46===s?f+t.slice(o+1):t.slice(o))+m,t=t.slice(0,o);break}}d&&!p&&(t=a(t,1/0));var S=c.length+t.length+m.length,P=S<g?new Array(g-S+1).join(n):"";switch(d&&p&&(t=a(P+t,P.length?g-m.length:1/0),P=""),r){case"<":t=c+t+m+P;break;case"=":t=c+P+t+m;break;case"^":t=P.slice(0,S=P.length>>1)+c+t+m+P.slice(S);break;default:t=P+c+t+m}return l(t)}return M=null==M?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,M)):Math.max(0,Math.min(20,M)),k.toString=function(){return t+""},k}return{format:p,formatPrefix:function(t,n){var e=p(((t=o(t)).type="f",t)),i=3*Math.max(-8,Math.min(8,Math.floor(r(n)/3))),a=Math.pow(10,-i),u=h[8+i/3];return function(t){return e(a*t)+u}}}}function m(n){return f=l(n),t.format=f.format,t.formatPrefix=f.formatPrefix,f}m({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),t.formatDefaultLocale=m,t.formatLocale=l,t.formatSpecifier=o,t.precisionFixed=function(t){return Math.max(0,-r(Math.abs(t)))},t.precisionPrefix=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(r(n)/3)))-r(Math.abs(t)))},t.precisionRound=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,r(n)-r(t))+1},Object.defineProperty(t,"__esModule",{value:!0})});

},{}],19:[function(require,module,exports){
!function(n,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("d3-array")):"function"==typeof define&&define.amd?define(["exports","d3-array"],t):t(n.d3=n.d3||{},n.d3)}(this,function(n,t){"use strict";function r(){return new i}function i(){this.reset()}i.prototype={constructor:i,reset:function(){this.s=this.t=0},add:function(n){o(e,n,this.t),o(this,e.s,this.s),this.s?this.t+=e.t:this.s=e.t},valueOf:function(){return this.s}};var e=new i;function o(n,t,r){var i=n.s=t+r,e=i-t,o=i-e;n.t=t-o+(r-e)}var u=1e-6,c=1e-12,a=Math.PI,l=a/2,f=a/4,s=2*a,p=180/a,h=a/180,g=Math.abs,v=Math.atan,d=Math.atan2,E=Math.cos,y=Math.ceil,S=Math.exp,m=Math.log,M=Math.pow,x=Math.sin,_=Math.sign||function(n){return n>0?1:n<0?-1:0},N=Math.sqrt,w=Math.tan;function R(n){return n>1?0:n<-1?a:Math.acos(n)}function C(n){return n>1?l:n<-1?-l:Math.asin(n)}function P(n){return(n=x(n/2))*n}function A(){}function j(n,t){n&&z.hasOwnProperty(n.type)&&z[n.type](n,t)}var q={Feature:function(n,t){j(n.geometry,t)},FeatureCollection:function(n,t){for(var r=n.features,i=-1,e=r.length;++i<e;)j(r[i].geometry,t)}},z={Sphere:function(n,t){t.sphere()},Point:function(n,t){n=n.coordinates,t.point(n[0],n[1],n[2])},MultiPoint:function(n,t){for(var r=n.coordinates,i=-1,e=r.length;++i<e;)n=r[i],t.point(n[0],n[1],n[2])},LineString:function(n,t){b(n.coordinates,t,0)},MultiLineString:function(n,t){for(var r=n.coordinates,i=-1,e=r.length;++i<e;)b(r[i],t,0)},Polygon:function(n,t){L(n.coordinates,t)},MultiPolygon:function(n,t){for(var r=n.coordinates,i=-1,e=r.length;++i<e;)L(r[i],t)},GeometryCollection:function(n,t){for(var r=n.geometries,i=-1,e=r.length;++i<e;)j(r[i],t)}};function b(n,t,r){var i,e=-1,o=n.length-r;for(t.lineStart();++e<o;)i=n[e],t.point(i[0],i[1],i[2]);t.lineEnd()}function L(n,t){var r=-1,i=n.length;for(t.polygonStart();++r<i;)b(n[r],t,1);t.polygonEnd()}function O(n,t){n&&q.hasOwnProperty(n.type)?q[n.type](n,t):j(n,t)}var G,T,k,F,H,I=r(),W=r(),B={point:A,lineStart:A,lineEnd:A,polygonStart:function(){I.reset(),B.lineStart=D,B.lineEnd=U},polygonEnd:function(){var n=+I;W.add(n<0?s+n:n),this.lineStart=this.lineEnd=this.point=A},sphere:function(){W.add(s)}};function D(){B.point=X}function U(){Y(G,T)}function X(n,t){B.point=Y,G=n,T=t,k=n*=h,F=E(t=(t*=h)/2+f),H=x(t)}function Y(n,t){var r=(n*=h)-k,i=r>=0?1:-1,e=i*r,o=E(t=(t*=h)/2+f),u=x(t),c=H*u,a=F*o+c*E(e),l=c*i*x(e);I.add(d(l,a)),k=n,F=o,H=u}function Z(n){return[d(n[1],n[0]),C(n[2])]}function J(n){var t=n[0],r=n[1],i=E(r);return[i*E(t),i*x(t),x(r)]}function K(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]}function Q(n,t){return[n[1]*t[2]-n[2]*t[1],n[2]*t[0]-n[0]*t[2],n[0]*t[1]-n[1]*t[0]]}function V(n,t){n[0]+=t[0],n[1]+=t[1],n[2]+=t[2]}function $(n,t){return[n[0]*t,n[1]*t,n[2]*t]}function nn(n){var t=N(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);n[0]/=t,n[1]/=t,n[2]/=t}var tn,rn,en,on,un,cn,an,ln,fn,sn,pn,hn,gn,vn,dn,En,yn,Sn,mn,Mn,xn,_n,Nn,wn,Rn,Cn,Pn=r(),An={point:jn,lineStart:zn,lineEnd:bn,polygonStart:function(){An.point=Ln,An.lineStart=On,An.lineEnd=Gn,Pn.reset(),B.polygonStart()},polygonEnd:function(){B.polygonEnd(),An.point=jn,An.lineStart=zn,An.lineEnd=bn,I<0?(tn=-(en=180),rn=-(on=90)):Pn>u?on=90:Pn<-u&&(rn=-90),sn[0]=tn,sn[1]=en}};function jn(n,t){fn.push(sn=[tn=n,en=n]),t<rn&&(rn=t),t>on&&(on=t)}function qn(n,t){var r=J([n*h,t*h]);if(ln){var i=Q(ln,r),e=Q([i[1],-i[0],0],i);nn(e),e=Z(e);var o,u=n-un,c=u>0?1:-1,a=e[0]*p*c,l=g(u)>180;l^(c*un<a&&a<c*n)?(o=e[1]*p)>on&&(on=o):l^(c*un<(a=(a+360)%360-180)&&a<c*n)?(o=-e[1]*p)<rn&&(rn=o):(t<rn&&(rn=t),t>on&&(on=t)),l?n<un?Tn(tn,n)>Tn(tn,en)&&(en=n):Tn(n,en)>Tn(tn,en)&&(tn=n):en>=tn?(n<tn&&(tn=n),n>en&&(en=n)):n>un?Tn(tn,n)>Tn(tn,en)&&(en=n):Tn(n,en)>Tn(tn,en)&&(tn=n)}else fn.push(sn=[tn=n,en=n]);t<rn&&(rn=t),t>on&&(on=t),ln=r,un=n}function zn(){An.point=qn}function bn(){sn[0]=tn,sn[1]=en,An.point=jn,ln=null}function Ln(n,t){if(ln){var r=n-un;Pn.add(g(r)>180?r+(r>0?360:-360):r)}else cn=n,an=t;B.point(n,t),qn(n,t)}function On(){B.lineStart()}function Gn(){Ln(cn,an),B.lineEnd(),g(Pn)>u&&(tn=-(en=180)),sn[0]=tn,sn[1]=en,ln=null}function Tn(n,t){return(t-=n)<0?t+360:t}function kn(n,t){return n[0]-t[0]}function Fn(n,t){return n[0]<=n[1]?n[0]<=t&&t<=n[1]:t<n[0]||n[1]<t}var Hn={sphere:A,point:In,lineStart:Bn,lineEnd:Xn,polygonStart:function(){Hn.lineStart=Yn,Hn.lineEnd=Zn},polygonEnd:function(){Hn.lineStart=Bn,Hn.lineEnd=Xn}};function In(n,t){n*=h;var r=E(t*=h);Wn(r*E(n),r*x(n),x(t))}function Wn(n,t,r){gn+=(n-gn)/++pn,vn+=(t-vn)/pn,dn+=(r-dn)/pn}function Bn(){Hn.point=Dn}function Dn(n,t){n*=h;var r=E(t*=h);wn=r*E(n),Rn=r*x(n),Cn=x(t),Hn.point=Un,Wn(wn,Rn,Cn)}function Un(n,t){n*=h;var r=E(t*=h),i=r*E(n),e=r*x(n),o=x(t),u=d(N((u=Rn*o-Cn*e)*u+(u=Cn*i-wn*o)*u+(u=wn*e-Rn*i)*u),wn*i+Rn*e+Cn*o);hn+=u,En+=u*(wn+(wn=i)),yn+=u*(Rn+(Rn=e)),Sn+=u*(Cn+(Cn=o)),Wn(wn,Rn,Cn)}function Xn(){Hn.point=In}function Yn(){Hn.point=Jn}function Zn(){Kn(_n,Nn),Hn.point=In}function Jn(n,t){_n=n,Nn=t,n*=h,t*=h,Hn.point=Kn;var r=E(t);wn=r*E(n),Rn=r*x(n),Cn=x(t),Wn(wn,Rn,Cn)}function Kn(n,t){n*=h;var r=E(t*=h),i=r*E(n),e=r*x(n),o=x(t),u=Rn*o-Cn*e,c=Cn*i-wn*o,a=wn*e-Rn*i,l=N(u*u+c*c+a*a),f=C(l),s=l&&-f/l;mn+=s*u,Mn+=s*c,xn+=s*a,hn+=f,En+=f*(wn+(wn=i)),yn+=f*(Rn+(Rn=e)),Sn+=f*(Cn+(Cn=o)),Wn(wn,Rn,Cn)}function Qn(n){return function(){return n}}function Vn(n,t){function r(r,i){return r=n(r,i),t(r[0],r[1])}return n.invert&&t.invert&&(r.invert=function(r,i){return(r=t.invert(r,i))&&n.invert(r[0],r[1])}),r}function $n(n,t){return[g(n)>a?n+Math.round(-n/s)*s:n,t]}function nt(n,t,r){return(n%=s)?t||r?Vn(rt(n),it(t,r)):rt(n):t||r?it(t,r):$n}function tt(n){return function(t,r){return[(t+=n)>a?t-s:t<-a?t+s:t,r]}}function rt(n){var t=tt(n);return t.invert=tt(-n),t}function it(n,t){var r=E(n),i=x(n),e=E(t),o=x(t);function u(n,t){var u=E(t),c=E(n)*u,a=x(n)*u,l=x(t),f=l*r+c*i;return[d(a*e-f*o,c*r-l*i),C(f*e+a*o)]}return u.invert=function(n,t){var u=E(t),c=E(n)*u,a=x(n)*u,l=x(t),f=l*e-a*o;return[d(a*e+l*o,c*r+f*i),C(f*r-c*i)]},u}function et(n){function t(t){return(t=n(t[0]*h,t[1]*h))[0]*=p,t[1]*=p,t}return n=nt(n[0]*h,n[1]*h,n.length>2?n[2]*h:0),t.invert=function(t){return(t=n.invert(t[0]*h,t[1]*h))[0]*=p,t[1]*=p,t},t}function ot(n,t,r,i,e,o){if(r){var u=E(t),c=x(t),a=i*r;null==e?(e=t+i*s,o=t-a/2):(e=ut(u,e),o=ut(u,o),(i>0?e<o:e>o)&&(e+=i*s));for(var l,f=e;i>0?f>o:f<o;f-=a)l=Z([u,-c*E(f),-c*x(f)]),n.point(l[0],l[1])}}function ut(n,t){(t=J(t))[0]-=n,nn(t);var r=R(-t[1]);return((-t[2]<0?-r:r)+s-u)%s}function ct(){var n,t=[];return{point:function(t,r){n.push([t,r])},lineStart:function(){t.push(n=[])},lineEnd:A,rejoin:function(){t.length>1&&t.push(t.pop().concat(t.shift()))},result:function(){var r=t;return t=[],n=null,r}}}function at(n,t){return g(n[0]-t[0])<u&&g(n[1]-t[1])<u}function lt(n,t,r,i){this.x=n,this.z=t,this.o=r,this.e=i,this.v=!1,this.n=this.p=null}function ft(n,t,r,i,e){var o,u,c=[],a=[];if(n.forEach(function(n){if(!((t=n.length-1)<=0)){var t,r,i=n[0],u=n[t];if(at(i,u)){for(e.lineStart(),o=0;o<t;++o)e.point((i=n[o])[0],i[1]);e.lineEnd()}else c.push(r=new lt(i,n,null,!0)),a.push(r.o=new lt(i,null,r,!1)),c.push(r=new lt(u,n,null,!1)),a.push(r.o=new lt(u,null,r,!0))}}),c.length){for(a.sort(t),st(c),st(a),o=0,u=a.length;o<u;++o)a[o].e=r=!r;for(var l,f,s=c[0];;){for(var p=s,h=!0;p.v;)if((p=p.n)===s)return;l=p.z,e.lineStart();do{if(p.v=p.o.v=!0,p.e){if(h)for(o=0,u=l.length;o<u;++o)e.point((f=l[o])[0],f[1]);else i(p.x,p.n.x,1,e);p=p.n}else{if(h)for(l=p.p.z,o=l.length-1;o>=0;--o)e.point((f=l[o])[0],f[1]);else i(p.x,p.p.x,-1,e);p=p.p}l=(p=p.o).z,h=!h}while(!p.v);e.lineEnd()}}}function st(n){if(t=n.length){for(var t,r,i=0,e=n[0];++i<t;)e.n=r=n[i],r.p=e,e=r;e.n=r=n[0],r.p=e}}$n.invert=$n;var pt=r();function ht(n,t){var r=t[0],i=t[1],e=x(i),o=[x(r),-E(r),0],c=0,p=0;pt.reset(),1===e?i=l+u:-1===e&&(i=-l-u);for(var h=0,g=n.length;h<g;++h)if(y=(v=n[h]).length)for(var v,y,S=v[y-1],m=S[0],M=S[1]/2+f,_=x(M),N=E(M),w=0;w<y;++w,m=P,_=j,N=q,S=R){var R=v[w],P=R[0],A=R[1]/2+f,j=x(A),q=E(A),z=P-m,b=z>=0?1:-1,L=b*z,O=L>a,G=_*j;if(pt.add(d(G*b*x(L),N*q+G*E(L))),c+=O?z+b*s:z,O^m>=r^P>=r){var T=Q(J(S),J(R));nn(T);var k=Q(o,T);nn(k);var F=(O^z>=0?-1:1)*C(k[2]);(i>F||i===F&&(T[0]||T[1]))&&(p+=O^z>=0?1:-1)}}return(c<-u||c<u&&pt<-u)^1&p}function gt(n,r,i,e){return function(o){var u,c,a,l=r(o),f=ct(),s=r(f),p=!1,h={point:g,lineStart:d,lineEnd:E,polygonStart:function(){h.point=y,h.lineStart=S,h.lineEnd=m,c=[],u=[]},polygonEnd:function(){h.point=g,h.lineStart=d,h.lineEnd=E,c=t.merge(c);var n=ht(u,e);c.length?(p||(o.polygonStart(),p=!0),ft(c,dt,n,i,o)):n&&(p||(o.polygonStart(),p=!0),o.lineStart(),i(null,null,1,o),o.lineEnd()),p&&(o.polygonEnd(),p=!1),c=u=null},sphere:function(){o.polygonStart(),o.lineStart(),i(null,null,1,o),o.lineEnd(),o.polygonEnd()}};function g(t,r){n(t,r)&&o.point(t,r)}function v(n,t){l.point(n,t)}function d(){h.point=v,l.lineStart()}function E(){h.point=g,l.lineEnd()}function y(n,t){a.push([n,t]),s.point(n,t)}function S(){s.lineStart(),a=[]}function m(){y(a[0][0],a[0][1]),s.lineEnd();var n,t,r,i,e=s.clean(),l=f.result(),h=l.length;if(a.pop(),u.push(a),a=null,h)if(1&e){if((t=(r=l[0]).length-1)>0){for(p||(o.polygonStart(),p=!0),o.lineStart(),n=0;n<t;++n)o.point((i=r[n])[0],i[1]);o.lineEnd()}}else h>1&&2&e&&l.push(l.pop().concat(l.shift())),c.push(l.filter(vt))}return h}}function vt(n){return n.length>1}function dt(n,t){return((n=n.x)[0]<0?n[1]-l-u:l-n[1])-((t=t.x)[0]<0?t[1]-l-u:l-t[1])}var Et=gt(function(){return!0},function(n){var t,r=NaN,i=NaN,e=NaN;return{lineStart:function(){n.lineStart(),t=1},point:function(o,c){var f=o>0?a:-a,s=g(o-r);g(s-a)<u?(n.point(r,i=(i+c)/2>0?l:-l),n.point(e,i),n.lineEnd(),n.lineStart(),n.point(f,i),n.point(o,i),t=0):e!==f&&s>=a&&(g(r-e)<u&&(r-=e*u),g(o-f)<u&&(o-=f*u),i=function(n,t,r,i){var e,o,c=x(n-r);return g(c)>u?v((x(t)*(o=E(i))*x(r)-x(i)*(e=E(t))*x(n))/(e*o*c)):(t+i)/2}(r,i,o,c),n.point(e,i),n.lineEnd(),n.lineStart(),n.point(f,i),t=0),n.point(r=o,i=c),e=f},lineEnd:function(){n.lineEnd(),r=i=NaN},clean:function(){return 2-t}}},function(n,t,r,i){var e;if(null==n)e=r*l,i.point(-a,e),i.point(0,e),i.point(a,e),i.point(a,0),i.point(a,-e),i.point(0,-e),i.point(-a,-e),i.point(-a,0),i.point(-a,e);else if(g(n[0]-t[0])>u){var o=n[0]<t[0]?a:-a;e=r*o/2,i.point(-o,e),i.point(0,e),i.point(o,e)}else i.point(t[0],t[1])},[-a,-l]);function yt(n){var t=E(n),r=6*h,i=t>0,e=g(t)>u;function o(n,r){return E(n)*E(r)>t}function c(n,r,i){var e=[1,0,0],o=Q(J(n),J(r)),c=K(o,o),l=o[0],f=c-l*l;if(!f)return!i&&n;var s=t*c/f,p=-t*l/f,h=Q(e,o),v=$(e,s);V(v,$(o,p));var d=h,E=K(v,d),y=K(d,d),S=E*E-y*(K(v,v)-1);if(!(S<0)){var m=N(S),M=$(d,(-E-m)/y);if(V(M,v),M=Z(M),!i)return M;var x,_=n[0],w=r[0],R=n[1],C=r[1];w<_&&(x=_,_=w,w=x);var P=w-_,A=g(P-a)<u;if(!A&&C<R&&(x=R,R=C,C=x),A||P<u?A?R+C>0^M[1]<(g(M[0]-_)<u?R:C):R<=M[1]&&M[1]<=C:P>a^(_<=M[0]&&M[0]<=w)){var j=$(d,(-E+m)/y);return V(j,v),[M,Z(j)]}}}function l(t,r){var e=i?n:a-n,o=0;return t<-e?o|=1:t>e&&(o|=2),r<-e?o|=4:r>e&&(o|=8),o}return gt(o,function(n){var t,r,f,s,p;return{lineStart:function(){s=f=!1,p=1},point:function(h,g){var v,d=[h,g],E=o(h,g),y=i?E?0:l(h,g):E?l(h+(h<0?a:-a),g):0;if(!t&&(s=f=E)&&n.lineStart(),E!==f&&(!(v=c(t,d))||at(t,v)||at(d,v))&&(d[0]+=u,d[1]+=u,E=o(d[0],d[1])),E!==f)p=0,E?(n.lineStart(),v=c(d,t),n.point(v[0],v[1])):(v=c(t,d),n.point(v[0],v[1]),n.lineEnd()),t=v;else if(e&&t&&i^E){var S;y&r||!(S=c(d,t,!0))||(p=0,i?(n.lineStart(),n.point(S[0][0],S[0][1]),n.point(S[1][0],S[1][1]),n.lineEnd()):(n.point(S[1][0],S[1][1]),n.lineEnd(),n.lineStart(),n.point(S[0][0],S[0][1])))}!E||t&&at(t,d)||n.point(d[0],d[1]),t=d,f=E,r=y},lineEnd:function(){f&&n.lineEnd(),t=null},clean:function(){return p|(s&&f)<<1}}},function(t,i,e,o){ot(o,n,r,e,t,i)},i?[0,-n]:[-a,n-a])}var St=1e9,mt=-St;function Mt(n,r,i,e){function o(t,o){return n<=t&&t<=i&&r<=o&&o<=e}function c(t,o,u,c){var l=0,s=0;if(null==t||(l=a(t,u))!==(s=a(o,u))||f(t,o)<0^u>0)do{c.point(0===l||3===l?n:i,l>1?e:r)}while((l=(l+u+4)%4)!==s);else c.point(o[0],o[1])}function a(t,e){return g(t[0]-n)<u?e>0?0:3:g(t[0]-i)<u?e>0?2:1:g(t[1]-r)<u?e>0?1:0:e>0?3:2}function l(n,t){return f(n.x,t.x)}function f(n,t){var r=a(n,1),i=a(t,1);return r!==i?r-i:0===r?t[1]-n[1]:1===r?n[0]-t[0]:2===r?n[1]-t[1]:t[0]-n[0]}return function(u){var a,f,s,p,h,g,v,d,E,y,S,m=u,M=ct(),x={point:_,lineStart:function(){x.point=N,f&&f.push(s=[]);y=!0,E=!1,v=d=NaN},lineEnd:function(){a&&(N(p,h),g&&E&&M.rejoin(),a.push(M.result()));x.point=_,E&&m.lineEnd()},polygonStart:function(){m=M,a=[],f=[],S=!0},polygonEnd:function(){var r=function(){for(var t=0,r=0,i=f.length;r<i;++r)for(var o,u,c=f[r],a=1,l=c.length,s=c[0],p=s[0],h=s[1];a<l;++a)o=p,u=h,s=c[a],p=s[0],h=s[1],u<=e?h>e&&(p-o)*(e-u)>(h-u)*(n-o)&&++t:h<=e&&(p-o)*(e-u)<(h-u)*(n-o)&&--t;return t}(),i=S&&r,o=(a=t.merge(a)).length;(i||o)&&(u.polygonStart(),i&&(u.lineStart(),c(null,null,1,u),u.lineEnd()),o&&ft(a,l,r,c,u),u.polygonEnd());m=u,a=f=s=null}};function _(n,t){o(n,t)&&m.point(n,t)}function N(t,u){var c=o(t,u);if(f&&s.push([t,u]),y)p=t,h=u,g=c,y=!1,c&&(m.lineStart(),m.point(t,u));else if(c&&E)m.point(t,u);else{var a=[v=Math.max(mt,Math.min(St,v)),d=Math.max(mt,Math.min(St,d))],l=[t=Math.max(mt,Math.min(St,t)),u=Math.max(mt,Math.min(St,u))];!function(n,t,r,i,e,o){var u,c=n[0],a=n[1],l=0,f=1,s=t[0]-c,p=t[1]-a;if(u=r-c,s||!(u>0)){if(u/=s,s<0){if(u<l)return;u<f&&(f=u)}else if(s>0){if(u>f)return;u>l&&(l=u)}if(u=e-c,s||!(u<0)){if(u/=s,s<0){if(u>f)return;u>l&&(l=u)}else if(s>0){if(u<l)return;u<f&&(f=u)}if(u=i-a,p||!(u>0)){if(u/=p,p<0){if(u<l)return;u<f&&(f=u)}else if(p>0){if(u>f)return;u>l&&(l=u)}if(u=o-a,p||!(u<0)){if(u/=p,p<0){if(u>f)return;u>l&&(l=u)}else if(p>0){if(u<l)return;u<f&&(f=u)}return l>0&&(n[0]=c+l*s,n[1]=a+l*p),f<1&&(t[0]=c+f*s,t[1]=a+f*p),!0}}}}}(a,l,n,r,i,e)?c&&(m.lineStart(),m.point(t,u),S=!1):(E||(m.lineStart(),m.point(a[0],a[1])),m.point(l[0],l[1]),c||m.lineEnd(),S=!1)}v=t,d=u,E=c}return x}}var xt,_t,Nt,wt=r(),Rt={sphere:A,point:A,lineStart:function(){Rt.point=Pt,Rt.lineEnd=Ct},lineEnd:A,polygonStart:A,polygonEnd:A};function Ct(){Rt.point=Rt.lineEnd=A}function Pt(n,t){xt=n*=h,_t=x(t*=h),Nt=E(t),Rt.point=At}function At(n,t){n*=h;var r=x(t*=h),i=E(t),e=g(n-xt),o=E(e),u=i*x(e),c=Nt*r-_t*i*o,a=_t*r+Nt*i*o;wt.add(d(N(u*u+c*c),a)),xt=n,_t=r,Nt=i}function jt(n){return wt.reset(),O(n,Rt),+wt}var qt=[null,null],zt={type:"LineString",coordinates:qt};function bt(n,t){return qt[0]=n,qt[1]=t,jt(zt)}var Lt={Feature:function(n,t){return Gt(n.geometry,t)},FeatureCollection:function(n,t){for(var r=n.features,i=-1,e=r.length;++i<e;)if(Gt(r[i].geometry,t))return!0;return!1}},Ot={Sphere:function(){return!0},Point:function(n,t){return Tt(n.coordinates,t)},MultiPoint:function(n,t){for(var r=n.coordinates,i=-1,e=r.length;++i<e;)if(Tt(r[i],t))return!0;return!1},LineString:function(n,t){return kt(n.coordinates,t)},MultiLineString:function(n,t){for(var r=n.coordinates,i=-1,e=r.length;++i<e;)if(kt(r[i],t))return!0;return!1},Polygon:function(n,t){return Ft(n.coordinates,t)},MultiPolygon:function(n,t){for(var r=n.coordinates,i=-1,e=r.length;++i<e;)if(Ft(r[i],t))return!0;return!1},GeometryCollection:function(n,t){for(var r=n.geometries,i=-1,e=r.length;++i<e;)if(Gt(r[i],t))return!0;return!1}};function Gt(n,t){return!(!n||!Ot.hasOwnProperty(n.type))&&Ot[n.type](n,t)}function Tt(n,t){return 0===bt(n,t)}function kt(n,t){var r=bt(n[0],n[1]);return bt(n[0],t)+bt(t,n[1])<=r+u}function Ft(n,t){return!!ht(n.map(Ht),It(t))}function Ht(n){return(n=n.map(It)).pop(),n}function It(n){return[n[0]*h,n[1]*h]}function Wt(n,r,i){var e=t.range(n,r-u,i).concat(r);return function(n){return e.map(function(t){return[n,t]})}}function Bt(n,r,i){var e=t.range(n,r-u,i).concat(r);return function(n){return e.map(function(t){return[t,n]})}}function Dt(){var n,r,i,e,o,c,a,l,f,s,p,h,v=10,d=v,E=90,S=360,m=2.5;function M(){return{type:"MultiLineString",coordinates:x()}}function x(){return t.range(y(e/E)*E,i,E).map(p).concat(t.range(y(l/S)*S,a,S).map(h)).concat(t.range(y(r/v)*v,n,v).filter(function(n){return g(n%E)>u}).map(f)).concat(t.range(y(c/d)*d,o,d).filter(function(n){return g(n%S)>u}).map(s))}return M.lines=function(){return x().map(function(n){return{type:"LineString",coordinates:n}})},M.outline=function(){return{type:"Polygon",coordinates:[p(e).concat(h(a).slice(1),p(i).reverse().slice(1),h(l).reverse().slice(1))]}},M.extent=function(n){return arguments.length?M.extentMajor(n).extentMinor(n):M.extentMinor()},M.extentMajor=function(n){return arguments.length?(e=+n[0][0],i=+n[1][0],l=+n[0][1],a=+n[1][1],e>i&&(n=e,e=i,i=n),l>a&&(n=l,l=a,a=n),M.precision(m)):[[e,l],[i,a]]},M.extentMinor=function(t){return arguments.length?(r=+t[0][0],n=+t[1][0],c=+t[0][1],o=+t[1][1],r>n&&(t=r,r=n,n=t),c>o&&(t=c,c=o,o=t),M.precision(m)):[[r,c],[n,o]]},M.step=function(n){return arguments.length?M.stepMajor(n).stepMinor(n):M.stepMinor()},M.stepMajor=function(n){return arguments.length?(E=+n[0],S=+n[1],M):[E,S]},M.stepMinor=function(n){return arguments.length?(v=+n[0],d=+n[1],M):[v,d]},M.precision=function(t){return arguments.length?(m=+t,f=Wt(c,o,90),s=Bt(r,n,m),p=Wt(l,a,90),h=Bt(e,i,m),M):m},M.extentMajor([[-180,-90+u],[180,90-u]]).extentMinor([[-180,-80-u],[180,80+u]])}function Ut(n){return n}var Xt,Yt,Zt,Jt,Kt=r(),Qt=r(),Vt={point:A,lineStart:A,lineEnd:A,polygonStart:function(){Vt.lineStart=$t,Vt.lineEnd=rr},polygonEnd:function(){Vt.lineStart=Vt.lineEnd=Vt.point=A,Kt.add(g(Qt)),Qt.reset()},result:function(){var n=Kt/2;return Kt.reset(),n}};function $t(){Vt.point=nr}function nr(n,t){Vt.point=tr,Xt=Zt=n,Yt=Jt=t}function tr(n,t){Qt.add(Jt*n-Zt*t),Zt=n,Jt=t}function rr(){tr(Xt,Yt)}var ir=1/0,er=ir,or=-ir,ur=or,cr={point:function(n,t){n<ir&&(ir=n);n>or&&(or=n);t<er&&(er=t);t>ur&&(ur=t)},lineStart:A,lineEnd:A,polygonStart:A,polygonEnd:A,result:function(){var n=[[ir,er],[or,ur]];return or=ur=-(er=ir=1/0),n}};var ar,lr,fr,sr,pr=0,hr=0,gr=0,vr=0,dr=0,Er=0,yr=0,Sr=0,mr=0,Mr={point:xr,lineStart:_r,lineEnd:Rr,polygonStart:function(){Mr.lineStart=Cr,Mr.lineEnd=Pr},polygonEnd:function(){Mr.point=xr,Mr.lineStart=_r,Mr.lineEnd=Rr},result:function(){var n=mr?[yr/mr,Sr/mr]:Er?[vr/Er,dr/Er]:gr?[pr/gr,hr/gr]:[NaN,NaN];return pr=hr=gr=vr=dr=Er=yr=Sr=mr=0,n}};function xr(n,t){pr+=n,hr+=t,++gr}function _r(){Mr.point=Nr}function Nr(n,t){Mr.point=wr,xr(fr=n,sr=t)}function wr(n,t){var r=n-fr,i=t-sr,e=N(r*r+i*i);vr+=e*(fr+n)/2,dr+=e*(sr+t)/2,Er+=e,xr(fr=n,sr=t)}function Rr(){Mr.point=xr}function Cr(){Mr.point=Ar}function Pr(){jr(ar,lr)}function Ar(n,t){Mr.point=jr,xr(ar=fr=n,lr=sr=t)}function jr(n,t){var r=n-fr,i=t-sr,e=N(r*r+i*i);vr+=e*(fr+n)/2,dr+=e*(sr+t)/2,Er+=e,yr+=(e=sr*n-fr*t)*(fr+n),Sr+=e*(sr+t),mr+=3*e,xr(fr=n,sr=t)}function qr(n){this._context=n}qr.prototype={_radius:4.5,pointRadius:function(n){return this._radius=n,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(n,t){switch(this._point){case 0:this._context.moveTo(n,t),this._point=1;break;case 1:this._context.lineTo(n,t);break;default:this._context.moveTo(n+this._radius,t),this._context.arc(n,t,this._radius,0,s)}},result:A};var zr,br,Lr,Or,Gr,Tr=r(),kr={point:A,lineStart:function(){kr.point=Fr},lineEnd:function(){zr&&Hr(br,Lr),kr.point=A},polygonStart:function(){zr=!0},polygonEnd:function(){zr=null},result:function(){var n=+Tr;return Tr.reset(),n}};function Fr(n,t){kr.point=Hr,br=Or=n,Lr=Gr=t}function Hr(n,t){Or-=n,Gr-=t,Tr.add(N(Or*Or+Gr*Gr)),Or=n,Gr=t}function Ir(){this._string=[]}function Wr(n){return"m0,"+n+"a"+n+","+n+" 0 1,1 0,"+-2*n+"a"+n+","+n+" 0 1,1 0,"+2*n+"z"}function Br(n){return function(t){var r=new Dr;for(var i in n)r[i]=n[i];return r.stream=t,r}}function Dr(){}function Ur(n,t,r){var i=n.clipExtent&&n.clipExtent();return n.scale(150).translate([0,0]),null!=i&&n.clipExtent(null),O(r,n.stream(cr)),t(cr.result()),null!=i&&n.clipExtent(i),n}function Xr(n,t,r){return Ur(n,function(r){var i=t[1][0]-t[0][0],e=t[1][1]-t[0][1],o=Math.min(i/(r[1][0]-r[0][0]),e/(r[1][1]-r[0][1])),u=+t[0][0]+(i-o*(r[1][0]+r[0][0]))/2,c=+t[0][1]+(e-o*(r[1][1]+r[0][1]))/2;n.scale(150*o).translate([u,c])},r)}function Yr(n,t,r){return Xr(n,[[0,0],t],r)}function Zr(n,t,r){return Ur(n,function(r){var i=+t,e=i/(r[1][0]-r[0][0]),o=(i-e*(r[1][0]+r[0][0]))/2,u=-e*r[0][1];n.scale(150*e).translate([o,u])},r)}function Jr(n,t,r){return Ur(n,function(r){var i=+t,e=i/(r[1][1]-r[0][1]),o=-e*r[0][0],u=(i-e*(r[1][1]+r[0][1]))/2;n.scale(150*e).translate([o,u])},r)}Ir.prototype={_radius:4.5,_circle:Wr(4.5),pointRadius:function(n){return(n=+n)!==this._radius&&(this._radius=n,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(n,t){switch(this._point){case 0:this._string.push("M",n,",",t),this._point=1;break;case 1:this._string.push("L",n,",",t);break;default:null==this._circle&&(this._circle=Wr(this._radius)),this._string.push("M",n,",",t,this._circle)}},result:function(){if(this._string.length){var n=this._string.join("");return this._string=[],n}return null}},Dr.prototype={constructor:Dr,point:function(n,t){this.stream.point(n,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var Kr=16,Qr=E(30*h);function Vr(n,t){return+t?function(n,t){function r(i,e,o,c,a,l,f,s,p,h,v,E,y,S){var m=f-i,M=s-e,x=m*m+M*M;if(x>4*t&&y--){var _=c+h,w=a+v,R=l+E,P=N(_*_+w*w+R*R),A=C(R/=P),j=g(g(R)-1)<u||g(o-p)<u?(o+p)/2:d(w,_),q=n(j,A),z=q[0],b=q[1],L=z-i,O=b-e,G=M*L-m*O;(G*G/x>t||g((m*L+M*O)/x-.5)>.3||c*h+a*v+l*E<Qr)&&(r(i,e,o,c,a,l,z,b,j,_/=P,w/=P,R,y,S),S.point(z,b),r(z,b,j,_,w,R,f,s,p,h,v,E,y,S))}}return function(t){var i,e,o,u,c,a,l,f,s,p,h,g,v={point:d,lineStart:E,lineEnd:S,polygonStart:function(){t.polygonStart(),v.lineStart=m},polygonEnd:function(){t.polygonEnd(),v.lineStart=E}};function d(r,i){r=n(r,i),t.point(r[0],r[1])}function E(){f=NaN,v.point=y,t.lineStart()}function y(i,e){var o=J([i,e]),u=n(i,e);r(f,s,l,p,h,g,f=u[0],s=u[1],l=i,p=o[0],h=o[1],g=o[2],Kr,t),t.point(f,s)}function S(){v.point=d,t.lineEnd()}function m(){E(),v.point=M,v.lineEnd=x}function M(n,t){y(i=n,t),e=f,o=s,u=p,c=h,a=g,v.point=y}function x(){r(f,s,l,p,h,g,e,o,i,u,c,a,Kr,t),v.lineEnd=S,S()}return v}}(n,t):function(n){return Br({point:function(t,r){t=n(t,r),this.stream.point(t[0],t[1])}})}(n)}var $r=Br({point:function(n,t){this.stream.point(n*h,t*h)}});function ni(n,t,r,i){var e=E(i),o=x(i),u=e*n,c=o*n,a=e/n,l=o/n,f=(o*r-e*t)/n,s=(o*t+e*r)/n;function p(n,i){return[u*n-c*i+t,r-c*n-u*i]}return p.invert=function(n,t){return[a*n-l*t+f,s-l*n-a*t]},p}function ti(n){return ri(function(){return n})()}function ri(n){var t,r,i,e,o,u,c,a,l,f,s=150,g=480,v=250,d=0,E=0,y=0,S=0,m=0,M=0,x=null,_=Et,w=null,R=Ut,C=.5;function P(n){return a(n[0]*h,n[1]*h)}function A(n){return(n=a.invert(n[0],n[1]))&&[n[0]*p,n[1]*p]}function j(){var n=ni(s,0,0,M).apply(null,t(d,E)),i=(M?ni:function(n,t,r){function i(i,e){return[t+n*i,r-n*e]}return i.invert=function(i,e){return[(i-t)/n,(r-e)/n]},i})(s,g-n[0],v-n[1],M);return r=nt(y,S,m),c=Vn(t,i),a=Vn(r,c),u=Vr(c,C),q()}function q(){return l=f=null,P}return P.stream=function(n){return l&&f===n?l:l=$r(function(n){return Br({point:function(t,r){var i=n(t,r);return this.stream.point(i[0],i[1])}})}(r)(_(u(R(f=n)))))},P.preclip=function(n){return arguments.length?(_=n,x=void 0,q()):_},P.postclip=function(n){return arguments.length?(R=n,w=i=e=o=null,q()):R},P.clipAngle=function(n){return arguments.length?(_=+n?yt(x=n*h):(x=null,Et),q()):x*p},P.clipExtent=function(n){return arguments.length?(R=null==n?(w=i=e=o=null,Ut):Mt(w=+n[0][0],i=+n[0][1],e=+n[1][0],o=+n[1][1]),q()):null==w?null:[[w,i],[e,o]]},P.scale=function(n){return arguments.length?(s=+n,j()):s},P.translate=function(n){return arguments.length?(g=+n[0],v=+n[1],j()):[g,v]},P.center=function(n){return arguments.length?(d=n[0]%360*h,E=n[1]%360*h,j()):[d*p,E*p]},P.rotate=function(n){return arguments.length?(y=n[0]%360*h,S=n[1]%360*h,m=n.length>2?n[2]%360*h:0,j()):[y*p,S*p,m*p]},P.angle=function(n){return arguments.length?(M=n%360*h,j()):M*p},P.precision=function(n){return arguments.length?(u=Vr(c,C=n*n),q()):N(C)},P.fitExtent=function(n,t){return Xr(P,n,t)},P.fitSize=function(n,t){return Yr(P,n,t)},P.fitWidth=function(n,t){return Zr(P,n,t)},P.fitHeight=function(n,t){return Jr(P,n,t)},function(){return t=n.apply(this,arguments),P.invert=t.invert&&A,j()}}function ii(n){var t=0,r=a/3,i=ri(n),e=i(t,r);return e.parallels=function(n){return arguments.length?i(t=n[0]*h,r=n[1]*h):[t*p,r*p]},e}function ei(n,t){var r=x(n),i=(r+x(t))/2;if(g(i)<u)return function(n){var t=E(n);function r(n,r){return[n*t,x(r)/t]}return r.invert=function(n,r){return[n/t,C(r*t)]},r}(n);var e=1+r*(2*i-r),o=N(e)/i;function c(n,t){var r=N(e-2*i*x(t))/i;return[r*x(n*=i),o-r*E(n)]}return c.invert=function(n,t){var r=o-t;return[d(n,g(r))/i*_(r),C((e-(n*n+r*r)*i*i)/(2*i))]},c}function oi(){return ii(ei).scale(155.424).center([0,33.6442])}function ui(){return oi().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}function ci(n){return function(t,r){var i=E(t),e=E(r),o=n(i*e);return[o*e*x(t),o*x(r)]}}function ai(n){return function(t,r){var i=N(t*t+r*r),e=n(i),o=x(e),u=E(e);return[d(t*o,i*u),C(i&&r*o/i)]}}var li=ci(function(n){return N(2/(1+n))});li.invert=ai(function(n){return 2*C(n/2)});var fi=ci(function(n){return(n=R(n))&&n/x(n)});function si(n,t){return[n,m(w((l+t)/2))]}function pi(n){var t,r,i,e=ti(n),o=e.center,u=e.scale,c=e.translate,l=e.clipExtent,f=null;function s(){var o=a*u(),c=e(et(e.rotate()).invert([0,0]));return l(null==f?[[c[0]-o,c[1]-o],[c[0]+o,c[1]+o]]:n===si?[[Math.max(c[0]-o,f),t],[Math.min(c[0]+o,r),i]]:[[f,Math.max(c[1]-o,t)],[r,Math.min(c[1]+o,i)]])}return e.scale=function(n){return arguments.length?(u(n),s()):u()},e.translate=function(n){return arguments.length?(c(n),s()):c()},e.center=function(n){return arguments.length?(o(n),s()):o()},e.clipExtent=function(n){return arguments.length?(null==n?f=t=r=i=null:(f=+n[0][0],t=+n[0][1],r=+n[1][0],i=+n[1][1]),s()):null==f?null:[[f,t],[r,i]]},s()}function hi(n){return w((l+n)/2)}function gi(n,t){var r=E(n),i=n===t?x(n):m(r/E(t))/m(hi(t)/hi(n)),e=r*M(hi(n),i)/i;if(!i)return si;function o(n,t){e>0?t<-l+u&&(t=-l+u):t>l-u&&(t=l-u);var r=e/M(hi(t),i);return[r*x(i*n),e-r*E(i*n)]}return o.invert=function(n,t){var r=e-t,o=_(i)*N(n*n+r*r);return[d(n,g(r))/i*_(r),2*v(M(e/o,1/i))-l]},o}function vi(n,t){return[n,t]}function di(n,t){var r=E(n),i=n===t?x(n):(r-E(t))/(t-n),e=r/i+n;if(g(i)<u)return vi;function o(n,t){var r=e-t,o=i*n;return[r*x(o),e-r*E(o)]}return o.invert=function(n,t){var r=e-t;return[d(n,g(r))/i*_(r),e-_(i)*N(n*n+r*r)]},o}fi.invert=ai(function(n){return n}),si.invert=function(n,t){return[n,2*v(S(t))-l]},vi.invert=vi;var Ei=1.340264,yi=-.081106,Si=893e-6,mi=.003796,Mi=N(3)/2;function xi(n,t){var r=C(Mi*x(t)),i=r*r,e=i*i*i;return[n*E(r)/(Mi*(Ei+3*yi*i+e*(7*Si+9*mi*i))),r*(Ei+yi*i+e*(Si+mi*i))]}function _i(n,t){var r=E(t),i=E(n)*r;return[r*x(n)/i,x(t)/i]}function Ni(n,t,r,i){return 1===n&&1===t&&0===r&&0===i?Ut:Br({point:function(e,o){this.stream.point(e*n+r,o*t+i)}})}function wi(n,t){var r=t*t,i=r*r;return[n*(.8707-.131979*r+i*(i*(.003971*r-.001529*i)-.013791)),t*(1.007226+r*(.015085+i*(.028874*r-.044475-.005916*i)))]}function Ri(n,t){return[E(t)*x(n),x(t)]}function Ci(n,t){var r=E(t),i=1+E(n)*r;return[r*x(n)/i,x(t)/i]}function Pi(n,t){return[m(w((l+t)/2)),-n]}xi.invert=function(n,t){for(var r,i=t,e=i*i,o=e*e*e,u=0;u<12&&(o=(e=(i-=r=(i*(Ei+yi*e+o*(Si+mi*e))-t)/(Ei+3*yi*e+o*(7*Si+9*mi*e)))*i)*e*e,!(g(r)<c));++u);return[Mi*n*(Ei+3*yi*e+o*(7*Si+9*mi*e))/E(i),C(x(i)/Mi)]},_i.invert=ai(v),wi.invert=function(n,t){var r,i=t,e=25;do{var o=i*i,c=o*o;i-=r=(i*(1.007226+o*(.015085+c*(.028874*o-.044475-.005916*c)))-t)/(1.007226+o*(.045255+c*(.259866*o-.311325-.005916*11*c)))}while(g(r)>u&&--e>0);return[n/(.8707+(o=i*i)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),i]},Ri.invert=ai(C),Ci.invert=ai(function(n){return 2*v(n)}),Pi.invert=function(n,t){return[-t,2*v(S(n))-l]},n.geoArea=function(n){return W.reset(),O(n,B),2*W},n.geoBounds=function(n){var t,r,i,e,o,u,c;if(on=en=-(tn=rn=1/0),fn=[],O(n,An),r=fn.length){for(fn.sort(kn),t=1,o=[i=fn[0]];t<r;++t)Fn(i,(e=fn[t])[0])||Fn(i,e[1])?(Tn(i[0],e[1])>Tn(i[0],i[1])&&(i[1]=e[1]),Tn(e[0],i[1])>Tn(i[0],i[1])&&(i[0]=e[0])):o.push(i=e);for(u=-1/0,t=0,i=o[r=o.length-1];t<=r;i=e,++t)e=o[t],(c=Tn(i[1],e[0]))>u&&(u=c,tn=e[0],en=i[1])}return fn=sn=null,tn===1/0||rn===1/0?[[NaN,NaN],[NaN,NaN]]:[[tn,rn],[en,on]]},n.geoCentroid=function(n){pn=hn=gn=vn=dn=En=yn=Sn=mn=Mn=xn=0,O(n,Hn);var t=mn,r=Mn,i=xn,e=t*t+r*r+i*i;return e<c&&(t=En,r=yn,i=Sn,hn<u&&(t=gn,r=vn,i=dn),(e=t*t+r*r+i*i)<c)?[NaN,NaN]:[d(r,t)*p,C(i/N(e))*p]},n.geoCircle=function(){var n,t,r=Qn([0,0]),i=Qn(90),e=Qn(6),o={point:function(r,i){n.push(r=t(r,i)),r[0]*=p,r[1]*=p}};function u(){var u=r.apply(this,arguments),c=i.apply(this,arguments)*h,a=e.apply(this,arguments)*h;return n=[],t=nt(-u[0]*h,-u[1]*h,0).invert,ot(o,c,a,1),u={type:"Polygon",coordinates:[n]},n=t=null,u}return u.center=function(n){return arguments.length?(r="function"==typeof n?n:Qn([+n[0],+n[1]]),u):r},u.radius=function(n){return arguments.length?(i="function"==typeof n?n:Qn(+n),u):i},u.precision=function(n){return arguments.length?(e="function"==typeof n?n:Qn(+n),u):e},u},n.geoClipAntimeridian=Et,n.geoClipCircle=yt,n.geoClipExtent=function(){var n,t,r,i=0,e=0,o=960,u=500;return r={stream:function(r){return n&&t===r?n:n=Mt(i,e,o,u)(t=r)},extent:function(c){return arguments.length?(i=+c[0][0],e=+c[0][1],o=+c[1][0],u=+c[1][1],n=t=null,r):[[i,e],[o,u]]}}},n.geoClipRectangle=Mt,n.geoContains=function(n,t){return(n&&Lt.hasOwnProperty(n.type)?Lt[n.type]:Gt)(n,t)},n.geoDistance=bt,n.geoGraticule=Dt,n.geoGraticule10=function(){return Dt()()},n.geoInterpolate=function(n,t){var r=n[0]*h,i=n[1]*h,e=t[0]*h,o=t[1]*h,u=E(i),c=x(i),a=E(o),l=x(o),f=u*E(r),s=u*x(r),g=a*E(e),v=a*x(e),y=2*C(N(P(o-i)+u*a*P(e-r))),S=x(y),m=y?function(n){var t=x(n*=y)/S,r=x(y-n)/S,i=r*f+t*g,e=r*s+t*v,o=r*c+t*l;return[d(e,i)*p,d(o,N(i*i+e*e))*p]}:function(){return[r*p,i*p]};return m.distance=y,m},n.geoLength=jt,n.geoPath=function(n,t){var r,i,e=4.5;function o(n){return n&&("function"==typeof e&&i.pointRadius(+e.apply(this,arguments)),O(n,r(i))),i.result()}return o.area=function(n){return O(n,r(Vt)),Vt.result()},o.measure=function(n){return O(n,r(kr)),kr.result()},o.bounds=function(n){return O(n,r(cr)),cr.result()},o.centroid=function(n){return O(n,r(Mr)),Mr.result()},o.projection=function(t){return arguments.length?(r=null==t?(n=null,Ut):(n=t).stream,o):n},o.context=function(n){return arguments.length?(i=null==n?(t=null,new Ir):new qr(t=n),"function"!=typeof e&&i.pointRadius(e),o):t},o.pointRadius=function(n){return arguments.length?(e="function"==typeof n?n:(i.pointRadius(+n),+n),o):e},o.projection(n).context(t)},n.geoAlbers=ui,n.geoAlbersUsa=function(){var n,t,r,i,e,o,c=ui(),a=oi().rotate([154,0]).center([-2,58.5]).parallels([55,65]),l=oi().rotate([157,0]).center([-3,19.9]).parallels([8,18]),f={point:function(n,t){o=[n,t]}};function s(n){var t=n[0],u=n[1];return o=null,r.point(t,u),o||(i.point(t,u),o)||(e.point(t,u),o)}function p(){return n=t=null,s}return s.invert=function(n){var t=c.scale(),r=c.translate(),i=(n[0]-r[0])/t,e=(n[1]-r[1])/t;return(e>=.12&&e<.234&&i>=-.425&&i<-.214?a:e>=.166&&e<.234&&i>=-.214&&i<-.115?l:c).invert(n)},s.stream=function(r){return n&&t===r?n:(i=[c.stream(t=r),a.stream(r),l.stream(r)],e=i.length,n={point:function(n,t){for(var r=-1;++r<e;)i[r].point(n,t)},sphere:function(){for(var n=-1;++n<e;)i[n].sphere()},lineStart:function(){for(var n=-1;++n<e;)i[n].lineStart()},lineEnd:function(){for(var n=-1;++n<e;)i[n].lineEnd()},polygonStart:function(){for(var n=-1;++n<e;)i[n].polygonStart()},polygonEnd:function(){for(var n=-1;++n<e;)i[n].polygonEnd()}});var i,e},s.precision=function(n){return arguments.length?(c.precision(n),a.precision(n),l.precision(n),p()):c.precision()},s.scale=function(n){return arguments.length?(c.scale(n),a.scale(.35*n),l.scale(n),s.translate(c.translate())):c.scale()},s.translate=function(n){if(!arguments.length)return c.translate();var t=c.scale(),o=+n[0],s=+n[1];return r=c.translate(n).clipExtent([[o-.455*t,s-.238*t],[o+.455*t,s+.238*t]]).stream(f),i=a.translate([o-.307*t,s+.201*t]).clipExtent([[o-.425*t+u,s+.12*t+u],[o-.214*t-u,s+.234*t-u]]).stream(f),e=l.translate([o-.205*t,s+.212*t]).clipExtent([[o-.214*t+u,s+.166*t+u],[o-.115*t-u,s+.234*t-u]]).stream(f),p()},s.fitExtent=function(n,t){return Xr(s,n,t)},s.fitSize=function(n,t){return Yr(s,n,t)},s.fitWidth=function(n,t){return Zr(s,n,t)},s.fitHeight=function(n,t){return Jr(s,n,t)},s.scale(1070)},n.geoAzimuthalEqualArea=function(){return ti(li).scale(124.75).clipAngle(179.999)},n.geoAzimuthalEqualAreaRaw=li,n.geoAzimuthalEquidistant=function(){return ti(fi).scale(79.4188).clipAngle(179.999)},n.geoAzimuthalEquidistantRaw=fi,n.geoConicConformal=function(){return ii(gi).scale(109.5).parallels([30,30])},n.geoConicConformalRaw=gi,n.geoConicEqualArea=oi,n.geoConicEqualAreaRaw=ei,n.geoConicEquidistant=function(){return ii(di).scale(131.154).center([0,13.9389])},n.geoConicEquidistantRaw=di,n.geoEqualEarth=function(){return ti(xi).scale(177.158)},n.geoEqualEarthRaw=xi,n.geoEquirectangular=function(){return ti(vi).scale(152.63)},n.geoEquirectangularRaw=vi,n.geoGnomonic=function(){return ti(_i).scale(144.049).clipAngle(60)},n.geoGnomonicRaw=_i,n.geoIdentity=function(){var n,t,r,i,e,o,u=1,c=0,a=0,l=1,f=1,s=Ut,p=null,h=Ut;function g(){return i=e=null,o}return o={stream:function(n){return i&&e===n?i:i=s(h(e=n))},postclip:function(i){return arguments.length?(h=i,p=n=t=r=null,g()):h},clipExtent:function(i){return arguments.length?(h=null==i?(p=n=t=r=null,Ut):Mt(p=+i[0][0],n=+i[0][1],t=+i[1][0],r=+i[1][1]),g()):null==p?null:[[p,n],[t,r]]},scale:function(n){return arguments.length?(s=Ni((u=+n)*l,u*f,c,a),g()):u},translate:function(n){return arguments.length?(s=Ni(u*l,u*f,c=+n[0],a=+n[1]),g()):[c,a]},reflectX:function(n){return arguments.length?(s=Ni(u*(l=n?-1:1),u*f,c,a),g()):l<0},reflectY:function(n){return arguments.length?(s=Ni(u*l,u*(f=n?-1:1),c,a),g()):f<0},fitExtent:function(n,t){return Xr(o,n,t)},fitSize:function(n,t){return Yr(o,n,t)},fitWidth:function(n,t){return Zr(o,n,t)},fitHeight:function(n,t){return Jr(o,n,t)}}},n.geoProjection=ti,n.geoProjectionMutator=ri,n.geoMercator=function(){return pi(si).scale(961/s)},n.geoMercatorRaw=si,n.geoNaturalEarth1=function(){return ti(wi).scale(175.295)},n.geoNaturalEarth1Raw=wi,n.geoOrthographic=function(){return ti(Ri).scale(249.5).clipAngle(90+u)},n.geoOrthographicRaw=Ri,n.geoStereographic=function(){return ti(Ci).scale(250).clipAngle(142)},n.geoStereographicRaw=Ci,n.geoTransverseMercator=function(){var n=pi(Pi),t=n.center,r=n.rotate;return n.center=function(n){return arguments.length?t([-n[1],n[0]]):[(n=t())[1],-n[0]]},n.rotate=function(n){return arguments.length?r([n[0],n[1],n.length>2?n[2]+90:90]):[(n=r())[0],n[1],n[2]-90]},r([0,0,90]).scale(159.155)},n.geoTransverseMercatorRaw=Pi,n.geoRotation=et,n.geoStream=O,n.geoTransform=function(n){return{stream:Br(n)}},Object.defineProperty(n,"__esModule",{value:!0})});

},{"d3-array":5}],20:[function(require,module,exports){
!function(n,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports):"function"==typeof define&&define.amd?define(["exports"],r):r(n.d3=n.d3||{})}(this,function(n){"use strict";function r(n,r){return n.parent===r.parent?1:2}function e(n,r){return n+r.x}function t(n,r){return Math.max(n,r.y)}function u(n){var r=0,e=n.children,t=e&&e.length;if(t)for(;--t>=0;)r+=e[t].value;else r=1;n.value=r}function i(n,r){var e,t,u,i,a,h=new c(n),l=+n.value&&(h.value=n.value),p=[h];for(null==r&&(r=o);e=p.pop();)if(l&&(e.value=+e.data.value),(u=r(e.data))&&(a=u.length))for(e.children=new Array(a),i=a-1;i>=0;--i)p.push(t=e.children[i]=new c(u[i])),t.parent=e,t.depth=e.depth+1;return h.eachBefore(f)}function o(n){return n.children}function a(n){n.data=n.data.data}function f(n){var r=0;do{n.height=r}while((n=n.parent)&&n.height<++r)}function c(n){this.data=n,this.depth=this.height=0,this.parent=null}c.prototype=i.prototype={constructor:c,count:function(){return this.eachAfter(u)},each:function(n){var r,e,t,u,i=this,o=[i];do{for(r=o.reverse(),o=[];i=r.pop();)if(n(i),e=i.children)for(t=0,u=e.length;t<u;++t)o.push(e[t])}while(o.length);return this},eachAfter:function(n){for(var r,e,t,u=this,i=[u],o=[];u=i.pop();)if(o.push(u),r=u.children)for(e=0,t=r.length;e<t;++e)i.push(r[e]);for(;u=o.pop();)n(u);return this},eachBefore:function(n){for(var r,e,t=this,u=[t];t=u.pop();)if(n(t),r=t.children)for(e=r.length-1;e>=0;--e)u.push(r[e]);return this},sum:function(n){return this.eachAfter(function(r){for(var e=+n(r.data)||0,t=r.children,u=t&&t.length;--u>=0;)e+=t[u].value;r.value=e})},sort:function(n){return this.eachBefore(function(r){r.children&&r.children.sort(n)})},path:function(n){for(var r=this,e=function(n,r){if(n===r)return n;var e=n.ancestors(),t=r.ancestors(),u=null;for(n=e.pop(),r=t.pop();n===r;)u=n,n=e.pop(),r=t.pop();return u}(r,n),t=[r];r!==e;)r=r.parent,t.push(r);for(var u=t.length;n!==e;)t.splice(u,0,n),n=n.parent;return t},ancestors:function(){for(var n=this,r=[n];n=n.parent;)r.push(n);return r},descendants:function(){var n=[];return this.each(function(r){n.push(r)}),n},leaves:function(){var n=[];return this.eachBefore(function(r){r.children||n.push(r)}),n},links:function(){var n=this,r=[];return n.each(function(e){e!==n&&r.push({source:e.parent,target:e})}),r},copy:function(){return i(this).eachBefore(a)}};var h=Array.prototype.slice;function l(n){for(var r,e,t=0,u=(n=function(n){for(var r,e,t=n.length;t;)e=Math.random()*t--|0,r=n[t],n[t]=n[e],n[e]=r;return n}(h.call(n))).length,i=[];t<u;)r=n[t],e&&s(e,r)?++t:(e=x(i=p(i,r)),t=0);return e}function p(n,r){var e,t;if(v(r,n))return[r];for(e=0;e<n.length;++e)if(d(r,n[e])&&v(y(n[e],r),n))return[n[e],r];for(e=0;e<n.length-1;++e)for(t=e+1;t<n.length;++t)if(d(y(n[e],n[t]),r)&&d(y(n[e],r),n[t])&&d(y(n[t],r),n[e])&&v(g(n[e],n[t],r),n))return[n[e],n[t],r];throw new Error}function d(n,r){var e=n.r-r.r,t=r.x-n.x,u=r.y-n.y;return e<0||e*e<t*t+u*u}function s(n,r){var e=n.r-r.r+1e-6,t=r.x-n.x,u=r.y-n.y;return e>0&&e*e>t*t+u*u}function v(n,r){for(var e=0;e<r.length;++e)if(!s(n,r[e]))return!1;return!0}function x(n){switch(n.length){case 1:return{x:(r=n[0]).x,y:r.y,r:r.r};case 2:return y(n[0],n[1]);case 3:return g(n[0],n[1],n[2])}var r}function y(n,r){var e=n.x,t=n.y,u=n.r,i=r.x,o=r.y,a=r.r,f=i-e,c=o-t,h=a-u,l=Math.sqrt(f*f+c*c);return{x:(e+i+f/l*h)/2,y:(t+o+c/l*h)/2,r:(l+u+a)/2}}function g(n,r,e){var t=n.x,u=n.y,i=n.r,o=r.x,a=r.y,f=r.r,c=e.x,h=e.y,l=e.r,p=t-o,d=t-c,s=u-a,v=u-h,x=f-i,y=l-i,g=t*t+u*u-i*i,m=g-o*o-a*a+f*f,w=g-c*c-h*h+l*l,_=d*s-p*v,z=(s*w-v*m)/(2*_)-t,B=(v*x-s*y)/_,M=(d*m-p*w)/(2*_)-u,A=(p*y-d*x)/_,q=B*B+A*A-1,E=2*(i+z*B+M*A),b=z*z+M*M-i*i,S=-(q?(E+Math.sqrt(E*E-4*q*b))/(2*q):b/E);return{x:t+z+B*S,y:u+M+A*S,r:S}}function m(n,r,e){var t,u,i,o,a=n.x-r.x,f=n.y-r.y,c=a*a+f*f;c?(u=r.r+e.r,u*=u,o=n.r+e.r,u>(o*=o)?(t=(c+o-u)/(2*c),i=Math.sqrt(Math.max(0,o/c-t*t)),e.x=n.x-t*a-i*f,e.y=n.y-t*f+i*a):(t=(c+u-o)/(2*c),i=Math.sqrt(Math.max(0,u/c-t*t)),e.x=r.x+t*a-i*f,e.y=r.y+t*f+i*a)):(e.x=r.x+e.r,e.y=r.y)}function w(n,r){var e=n.r+r.r-1e-6,t=r.x-n.x,u=r.y-n.y;return e>0&&e*e>t*t+u*u}function _(n){var r=n._,e=n.next._,t=r.r+e.r,u=(r.x*e.r+e.x*r.r)/t,i=(r.y*e.r+e.y*r.r)/t;return u*u+i*i}function z(n){this._=n,this.next=null,this.previous=null}function B(n){if(!(u=n.length))return 0;var r,e,t,u,i,o,a,f,c,h,p;if((r=n[0]).x=0,r.y=0,!(u>1))return r.r;if(e=n[1],r.x=-e.r,e.x=r.r,e.y=0,!(u>2))return r.r+e.r;m(e,r,t=n[2]),r=new z(r),e=new z(e),t=new z(t),r.next=t.previous=e,e.next=r.previous=t,t.next=e.previous=r;n:for(a=3;a<u;++a){m(r._,e._,t=n[a]),t=new z(t),f=e.next,c=r.previous,h=e._.r,p=r._.r;do{if(h<=p){if(w(f._,t._)){e=f,r.next=e,e.previous=r,--a;continue n}h+=f._.r,f=f.next}else{if(w(c._,t._)){(r=c).next=e,e.previous=r,--a;continue n}p+=c._.r,c=c.previous}}while(f!==c.next);for(t.previous=r,t.next=e,r.next=e.previous=e=t,i=_(r);(t=t.next)!==e;)(o=_(t))<i&&(r=t,i=o);e=r.next}for(r=[e._],t=e;(t=t.next)!==e;)r.push(t._);for(t=l(r),a=0;a<u;++a)(r=n[a]).x-=t.x,r.y-=t.y;return t.r}function M(n){if("function"!=typeof n)throw new Error;return n}function A(){return 0}function q(n){return function(){return n}}function E(n){return Math.sqrt(n.value)}function b(n){return function(r){r.children||(r.r=Math.max(0,+n(r)||0))}}function S(n,r){return function(e){if(t=e.children){var t,u,i,o=t.length,a=n(e)*r||0;if(a)for(u=0;u<o;++u)t[u].r+=a;if(i=B(t),a)for(u=0;u<o;++u)t[u].r-=a;e.r=i+a}}}function k(n){return function(r){var e=r.parent;r.r*=n,e&&(r.x=e.x+n*r.x,r.y=e.y+n*r.y)}}function I(n){n.x0=Math.round(n.x0),n.y0=Math.round(n.y0),n.x1=Math.round(n.x1),n.y1=Math.round(n.y1)}function O(n,r,e,t,u){for(var i,o=n.children,a=-1,f=o.length,c=n.value&&(t-r)/n.value;++a<f;)(i=o[a]).y0=e,i.y1=u,i.x0=r,i.x1=r+=i.value*c}var j="$",R={depth:-1},T={};function D(n){return n.id}function L(n){return n.parentId}function P(n,r){return n.parent===r.parent?1:2}function $(n){var r=n.children;return r?r[0]:n.t}function C(n){var r=n.children;return r?r[r.length-1]:n.t}function F(n,r,e){var t=e/(r.i-n.i);r.c-=t,r.s+=e,n.c+=t,r.z+=e,r.m+=e}function G(n,r,e){return n.a.parent===r.parent?n.a:e}function H(n,r){this._=n,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=r}function J(n,r,e,t,u){for(var i,o=n.children,a=-1,f=o.length,c=n.value&&(u-e)/n.value;++a<f;)(i=o[a]).x0=r,i.x1=t,i.y0=e,i.y1=e+=i.value*c}H.prototype=Object.create(c.prototype);var K=(1+Math.sqrt(5))/2;function N(n,r,e,t,u,i){for(var o,a,f,c,h,l,p,d,s,v,x,y=[],g=r.children,m=0,w=0,_=g.length,z=r.value;m<_;){f=u-e,c=i-t;do{h=g[w++].value}while(!h&&w<_);for(l=p=h,x=h*h*(v=Math.max(c/f,f/c)/(z*n)),s=Math.max(p/x,x/l);w<_;++w){if(h+=a=g[w].value,a<l&&(l=a),a>p&&(p=a),x=h*h*v,(d=Math.max(p/x,x/l))>s){h-=a;break}s=d}y.push(o={value:h,dice:f<c,children:g.slice(m,w)}),o.dice?O(o,e,t,u,z?t+=c*h/z:i):J(o,e,t,z?e+=f*h/z:u,i),z-=h,m=w}return y}var Q=function n(r){function e(n,e,t,u,i){N(r,n,e,t,u,i)}return e.ratio=function(r){return n((r=+r)>1?r:1)},e}(K);var U=function n(r){function e(n,e,t,u,i){if((o=n._squarify)&&o.ratio===r)for(var o,a,f,c,h,l=-1,p=o.length,d=n.value;++l<p;){for(f=(a=o[l]).children,c=a.value=0,h=f.length;c<h;++c)a.value+=f[c].value;a.dice?O(a,e,t,u,t+=(i-t)*a.value/d):J(a,e,t,e+=(u-e)*a.value/d,i),d-=a.value}else n._squarify=o=N(r,n,e,t,u,i),o.ratio=r}return e.ratio=function(r){return n((r=+r)>1?r:1)},e}(K);n.cluster=function(){var n=r,u=1,i=1,o=!1;function a(r){var a,f=0;r.eachAfter(function(r){var u=r.children;u?(r.x=function(n){return n.reduce(e,0)/n.length}(u),r.y=function(n){return 1+n.reduce(t,0)}(u)):(r.x=a?f+=n(r,a):0,r.y=0,a=r)});var c=function(n){for(var r;r=n.children;)n=r[0];return n}(r),h=function(n){for(var r;r=n.children;)n=r[r.length-1];return n}(r),l=c.x-n(c,h)/2,p=h.x+n(h,c)/2;return r.eachAfter(o?function(n){n.x=(n.x-r.x)*u,n.y=(r.y-n.y)*i}:function(n){n.x=(n.x-l)/(p-l)*u,n.y=(1-(r.y?n.y/r.y:1))*i})}return a.separation=function(r){return arguments.length?(n=r,a):n},a.size=function(n){return arguments.length?(o=!1,u=+n[0],i=+n[1],a):o?null:[u,i]},a.nodeSize=function(n){return arguments.length?(o=!0,u=+n[0],i=+n[1],a):o?[u,i]:null},a},n.hierarchy=i,n.pack=function(){var n=null,r=1,e=1,t=A;function u(u){return u.x=r/2,u.y=e/2,n?u.eachBefore(b(n)).eachAfter(S(t,.5)).eachBefore(k(1)):u.eachBefore(b(E)).eachAfter(S(A,1)).eachAfter(S(t,u.r/Math.min(r,e))).eachBefore(k(Math.min(r,e)/(2*u.r))),u}return u.radius=function(r){return arguments.length?(n=null==(e=r)?null:M(e),u):n;var e},u.size=function(n){return arguments.length?(r=+n[0],e=+n[1],u):[r,e]},u.padding=function(n){return arguments.length?(t="function"==typeof n?n:q(+n),u):t},u},n.packSiblings=function(n){return B(n),n},n.packEnclose=l,n.partition=function(){var n=1,r=1,e=0,t=!1;function u(u){var i=u.height+1;return u.x0=u.y0=e,u.x1=n,u.y1=r/i,u.eachBefore(function(n,r){return function(t){t.children&&O(t,t.x0,n*(t.depth+1)/r,t.x1,n*(t.depth+2)/r);var u=t.x0,i=t.y0,o=t.x1-e,a=t.y1-e;o<u&&(u=o=(u+o)/2),a<i&&(i=a=(i+a)/2),t.x0=u,t.y0=i,t.x1=o,t.y1=a}}(r,i)),t&&u.eachBefore(I),u}return u.round=function(n){return arguments.length?(t=!!n,u):t},u.size=function(e){return arguments.length?(n=+e[0],r=+e[1],u):[n,r]},u.padding=function(n){return arguments.length?(e=+n,u):e},u},n.stratify=function(){var n=D,r=L;function e(e){var t,u,i,o,a,h,l,p=e.length,d=new Array(p),s={};for(u=0;u<p;++u)t=e[u],a=d[u]=new c(t),null!=(h=n(t,u,e))&&(h+="")&&(s[l=j+(a.id=h)]=l in s?T:a);for(u=0;u<p;++u)if(a=d[u],null!=(h=r(e[u],u,e))&&(h+="")){if(!(o=s[j+h]))throw new Error("missing: "+h);if(o===T)throw new Error("ambiguous: "+h);o.children?o.children.push(a):o.children=[a],a.parent=o}else{if(i)throw new Error("multiple roots");i=a}if(!i)throw new Error("no root");if(i.parent=R,i.eachBefore(function(n){n.depth=n.parent.depth+1,--p}).eachBefore(f),i.parent=null,p>0)throw new Error("cycle");return i}return e.id=function(r){return arguments.length?(n=M(r),e):n},e.parentId=function(n){return arguments.length?(r=M(n),e):r},e},n.tree=function(){var n=P,r=1,e=1,t=null;function u(u){var f=function(n){for(var r,e,t,u,i,o=new H(n,0),a=[o];r=a.pop();)if(t=r._.children)for(r.children=new Array(i=t.length),u=i-1;u>=0;--u)a.push(e=r.children[u]=new H(t[u],u)),e.parent=r;return(o.parent=new H(null,0)).children=[o],o}(u);if(f.eachAfter(i),f.parent.m=-f.z,f.eachBefore(o),t)u.eachBefore(a);else{var c=u,h=u,l=u;u.eachBefore(function(n){n.x<c.x&&(c=n),n.x>h.x&&(h=n),n.depth>l.depth&&(l=n)});var p=c===h?1:n(c,h)/2,d=p-c.x,s=r/(h.x+p+d),v=e/(l.depth||1);u.eachBefore(function(n){n.x=(n.x+d)*s,n.y=n.depth*v})}return u}function i(r){var e=r.children,t=r.parent.children,u=r.i?t[r.i-1]:null;if(e){!function(n){for(var r,e=0,t=0,u=n.children,i=u.length;--i>=0;)(r=u[i]).z+=e,r.m+=e,e+=r.s+(t+=r.c)}(r);var i=(e[0].z+e[e.length-1].z)/2;u?(r.z=u.z+n(r._,u._),r.m=r.z-i):r.z=i}else u&&(r.z=u.z+n(r._,u._));r.parent.A=function(r,e,t){if(e){for(var u,i=r,o=r,a=e,f=i.parent.children[0],c=i.m,h=o.m,l=a.m,p=f.m;a=C(a),i=$(i),a&&i;)f=$(f),(o=C(o)).a=r,(u=a.z+l-i.z-c+n(a._,i._))>0&&(F(G(a,r,t),r,u),c+=u,h+=u),l+=a.m,c+=i.m,p+=f.m,h+=o.m;a&&!C(o)&&(o.t=a,o.m+=l-h),i&&!$(f)&&(f.t=i,f.m+=c-p,t=r)}return t}(r,u,r.parent.A||t[0])}function o(n){n._.x=n.z+n.parent.m,n.m+=n.parent.m}function a(n){n.x*=r,n.y=n.depth*e}return u.separation=function(r){return arguments.length?(n=r,u):n},u.size=function(n){return arguments.length?(t=!1,r=+n[0],e=+n[1],u):t?null:[r,e]},u.nodeSize=function(n){return arguments.length?(t=!0,r=+n[0],e=+n[1],u):t?[r,e]:null},u},n.treemap=function(){var n=Q,r=!1,e=1,t=1,u=[0],i=A,o=A,a=A,f=A,c=A;function h(n){return n.x0=n.y0=0,n.x1=e,n.y1=t,n.eachBefore(l),u=[0],r&&n.eachBefore(I),n}function l(r){var e=u[r.depth],t=r.x0+e,h=r.y0+e,l=r.x1-e,p=r.y1-e;l<t&&(t=l=(t+l)/2),p<h&&(h=p=(h+p)/2),r.x0=t,r.y0=h,r.x1=l,r.y1=p,r.children&&(e=u[r.depth+1]=i(r)/2,t+=c(r)-e,h+=o(r)-e,(l-=a(r)-e)<t&&(t=l=(t+l)/2),(p-=f(r)-e)<h&&(h=p=(h+p)/2),n(r,t,h,l,p))}return h.round=function(n){return arguments.length?(r=!!n,h):r},h.size=function(n){return arguments.length?(e=+n[0],t=+n[1],h):[e,t]},h.tile=function(r){return arguments.length?(n=M(r),h):n},h.padding=function(n){return arguments.length?h.paddingInner(n).paddingOuter(n):h.paddingInner()},h.paddingInner=function(n){return arguments.length?(i="function"==typeof n?n:q(+n),h):i},h.paddingOuter=function(n){return arguments.length?h.paddingTop(n).paddingRight(n).paddingBottom(n).paddingLeft(n):h.paddingTop()},h.paddingTop=function(n){return arguments.length?(o="function"==typeof n?n:q(+n),h):o},h.paddingRight=function(n){return arguments.length?(a="function"==typeof n?n:q(+n),h):a},h.paddingBottom=function(n){return arguments.length?(f="function"==typeof n?n:q(+n),h):f},h.paddingLeft=function(n){return arguments.length?(c="function"==typeof n?n:q(+n),h):c},h},n.treemapBinary=function(n,r,e,t,u){var i,o,a=n.children,f=a.length,c=new Array(f+1);for(c[0]=o=i=0;i<f;++i)c[i+1]=o+=a[i].value;!function n(r,e,t,u,i,o,f){if(r>=e-1){var h=a[r];return h.x0=u,h.y0=i,h.x1=o,void(h.y1=f)}for(var l=c[r],p=t/2+l,d=r+1,s=e-1;d<s;){var v=d+s>>>1;c[v]<p?d=v+1:s=v}p-c[d-1]<c[d]-p&&r+1<d&&--d;var x=c[d]-l,y=t-x;if(o-u>f-i){var g=(u*y+o*x)/t;n(r,d,x,u,i,g,f),n(d,e,y,g,i,o,f)}else{var m=(i*y+f*x)/t;n(r,d,x,u,i,o,m),n(d,e,y,u,m,o,f)}}(0,f,n.value,r,e,t,u)},n.treemapDice=O,n.treemapSlice=J,n.treemapSliceDice=function(n,r,e,t,u){(1&n.depth?J:O)(n,r,e,t,u)},n.treemapSquarify=Q,n.treemapResquarify=U,Object.defineProperty(n,"__esModule",{value:!0})});

},{}],21:[function(require,module,exports){
!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("d3-color")):"function"==typeof define&&define.amd?define(["exports","d3-color"],n):n(t.d3=t.d3||{},t.d3)}(this,function(t,n){"use strict";function r(t,n,r,e,o){var a=t*t,u=a*t;return((1-3*t+3*a-u)*n+(4-6*a+3*u)*r+(1+3*t+3*a-3*u)*e+u*o)/6}function e(t){var n=t.length-1;return function(e){var o=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),a=t[o],u=t[o+1],i=o>0?t[o-1]:2*a-u,l=o<n-1?t[o+2]:2*u-a;return r((e-o/n)*n,i,a,u,l)}}function o(t){var n=t.length;return function(e){var o=Math.floor(((e%=1)<0?++e:e)*n),a=t[(o+n-1)%n],u=t[o%n],i=t[(o+1)%n],l=t[(o+2)%n];return r((e-o/n)*n,a,u,i,l)}}function a(t){return function(){return t}}function u(t,n){return function(r){return t+r*n}}function i(t,n){var r=n-t;return r?u(t,r>180||r<-180?r-360*Math.round(r/360):r):a(isNaN(t)?n:t)}function l(t){return 1==(t=+t)?c:function(n,r){return r-n?function(t,n,r){return t=Math.pow(t,r),n=Math.pow(n,r)-t,r=1/r,function(e){return Math.pow(t+e*n,r)}}(n,r,t):a(isNaN(n)?r:n)}}function c(t,n){var r=n-t;return r?u(t,r):a(isNaN(t)?n:t)}var f=function t(r){var e=l(r);function o(t,r){var o=e((t=n.rgb(t)).r,(r=n.rgb(r)).r),a=e(t.g,r.g),u=e(t.b,r.b),i=c(t.opacity,r.opacity);return function(n){return t.r=o(n),t.g=a(n),t.b=u(n),t.opacity=i(n),t+""}}return o.gamma=t,o}(1);function s(t){return function(r){var e,o,a=r.length,u=new Array(a),i=new Array(a),l=new Array(a);for(e=0;e<a;++e)o=n.rgb(r[e]),u[e]=o.r||0,i[e]=o.g||0,l[e]=o.b||0;return u=t(u),i=t(i),l=t(l),o.opacity=1,function(t){return o.r=u(t),o.g=i(t),o.b=l(t),o+""}}}var p=s(e),h=s(o);function v(t,n){var r,e=n?n.length:0,o=t?Math.min(e,t.length):0,a=new Array(o),u=new Array(e);for(r=0;r<o;++r)a[r]=m(t[r],n[r]);for(;r<e;++r)u[r]=n[r];return function(t){for(r=0;r<o;++r)u[r]=a[r](t);return u}}function g(t,n){var r=new Date;return n-=t=+t,function(e){return r.setTime(t+n*e),r}}function d(t,n){return n-=t=+t,function(r){return t+n*r}}function y(t,n){var r,e={},o={};for(r in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)r in t?e[r]=m(t[r],n[r]):o[r]=n[r];return function(t){for(r in e)o[r]=e[r](t);return o}}var x=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,M=new RegExp(x.source,"g");function b(t,n){var r,e,o,a=x.lastIndex=M.lastIndex=0,u=-1,i=[],l=[];for(t+="",n+="";(r=x.exec(t))&&(e=M.exec(n));)(o=e.index)>a&&(o=n.slice(a,o),i[u]?i[u]+=o:i[++u]=o),(r=r[0])===(e=e[0])?i[u]?i[u]+=e:i[++u]=e:(i[++u]=null,l.push({i:u,x:d(r,e)})),a=M.lastIndex;return a<n.length&&(o=n.slice(a),i[u]?i[u]+=o:i[++u]=o),i.length<2?l[0]?function(t){return function(n){return t(n)+""}}(l[0].x):function(t){return function(){return t}}(n):(n=l.length,function(t){for(var r,e=0;e<n;++e)i[(r=l[e]).i]=r.x(t);return i.join("")})}function m(t,r){var e,o=typeof r;return null==r||"boolean"===o?a(r):("number"===o?d:"string"===o?(e=n.color(r))?(r=e,f):b:r instanceof n.color?f:r instanceof Date?g:Array.isArray(r)?v:"function"!=typeof r.valueOf&&"function"!=typeof r.toString||isNaN(r)?y:d)(t,r)}var w,X,A,N,C=180/Math.PI,Y={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function j(t,n,r,e,o,a){var u,i,l;return(u=Math.sqrt(t*t+n*n))&&(t/=u,n/=u),(l=t*r+n*e)&&(r-=t*l,e-=n*l),(i=Math.sqrt(r*r+e*e))&&(r/=i,e/=i,l/=i),t*e<n*r&&(t=-t,n=-n,l=-l,u=-u),{translateX:o,translateY:a,rotate:Math.atan2(n,t)*C,skewX:Math.atan(l)*C,scaleX:u,scaleY:i}}function q(t,n,r,e){function o(t){return t.length?t.pop()+" ":""}return function(a,u){var i=[],l=[];return a=t(a),u=t(u),function(t,e,o,a,u,i){if(t!==o||e!==a){var l=u.push("translate(",null,n,null,r);i.push({i:l-4,x:d(t,o)},{i:l-2,x:d(e,a)})}else(o||a)&&u.push("translate("+o+n+a+r)}(a.translateX,a.translateY,u.translateX,u.translateY,i,l),function(t,n,r,a){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),a.push({i:r.push(o(r)+"rotate(",null,e)-2,x:d(t,n)})):n&&r.push(o(r)+"rotate("+n+e)}(a.rotate,u.rotate,i,l),function(t,n,r,a){t!==n?a.push({i:r.push(o(r)+"skewX(",null,e)-2,x:d(t,n)}):n&&r.push(o(r)+"skewX("+n+e)}(a.skewX,u.skewX,i,l),function(t,n,r,e,a,u){if(t!==r||n!==e){var i=a.push(o(a)+"scale(",null,",",null,")");u.push({i:i-4,x:d(t,r)},{i:i-2,x:d(n,e)})}else 1===r&&1===e||a.push(o(a)+"scale("+r+","+e+")")}(a.scaleX,a.scaleY,u.scaleX,u.scaleY,i,l),a=u=null,function(t){for(var n,r=-1,e=l.length;++r<e;)i[(n=l[r]).i]=n.x(t);return i.join("")}}}var k=q(function(t){return"none"===t?Y:(w||(w=document.createElement("DIV"),X=document.documentElement,A=document.defaultView),w.style.transform=t,t=A.getComputedStyle(X.appendChild(w),null).getPropertyValue("transform"),X.removeChild(w),j(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),R=q(function(t){return null==t?Y:(N||(N=document.createElementNS("http://www.w3.org/2000/svg","g")),N.setAttribute("transform",t),(t=N.transform.baseVal.consolidate())?j((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Y)},", ",")",")"),S=Math.SQRT2,D=2,E=4,H=1e-12;function I(t){return((t=Math.exp(t))+1/t)/2}function B(t){return function(r,e){var o=t((r=n.hsl(r)).h,(e=n.hsl(e)).h),a=c(r.s,e.s),u=c(r.l,e.l),i=c(r.opacity,e.opacity);return function(t){return r.h=o(t),r.s=a(t),r.l=u(t),r.opacity=i(t),r+""}}}var L=B(i),T=B(c);function V(t){return function(r,e){var o=t((r=n.hcl(r)).h,(e=n.hcl(e)).h),a=c(r.c,e.c),u=c(r.l,e.l),i=c(r.opacity,e.opacity);return function(t){return r.h=o(t),r.c=a(t),r.l=u(t),r.opacity=i(t),r+""}}}var O=V(i),P=V(c);function _(t){return function r(e){function o(r,o){var a=t((r=n.cubehelix(r)).h,(o=n.cubehelix(o)).h),u=c(r.s,o.s),i=c(r.l,o.l),l=c(r.opacity,o.opacity);return function(t){return r.h=a(t),r.s=u(t),r.l=i(Math.pow(t,e)),r.opacity=l(t),r+""}}return e=+e,o.gamma=r,o}(1)}var z=_(i),Q=_(c);t.interpolate=m,t.interpolateArray=v,t.interpolateBasis=e,t.interpolateBasisClosed=o,t.interpolateDate=g,t.interpolateDiscrete=function(t){var n=t.length;return function(r){return t[Math.max(0,Math.min(n-1,Math.floor(r*n)))]}},t.interpolateHue=function(t,n){var r=i(+t,+n);return function(t){var n=r(t);return n-360*Math.floor(n/360)}},t.interpolateNumber=d,t.interpolateObject=y,t.interpolateRound=function(t,n){return n-=t=+t,function(r){return Math.round(t+n*r)}},t.interpolateString=b,t.interpolateTransformCss=k,t.interpolateTransformSvg=R,t.interpolateZoom=function(t,n){var r,e,o=t[0],a=t[1],u=t[2],i=n[0],l=n[1],c=n[2],f=i-o,s=l-a,p=f*f+s*s;if(p<H)e=Math.log(c/u)/S,r=function(t){return[o+t*f,a+t*s,u*Math.exp(S*t*e)]};else{var h=Math.sqrt(p),v=(c*c-u*u+E*p)/(2*u*D*h),g=(c*c-u*u-E*p)/(2*c*D*h),d=Math.log(Math.sqrt(v*v+1)-v),y=Math.log(Math.sqrt(g*g+1)-g);e=(y-d)/S,r=function(t){var n,r=t*e,i=I(d),l=u/(D*h)*(i*(n=S*r+d,((n=Math.exp(2*n))-1)/(n+1))-function(t){return((t=Math.exp(t))-1/t)/2}(d));return[o+l*f,a+l*s,u*i/I(S*r+d)]}}return r.duration=1e3*e,r},t.interpolateRgb=f,t.interpolateRgbBasis=p,t.interpolateRgbBasisClosed=h,t.interpolateHsl=L,t.interpolateHslLong=T,t.interpolateLab=function(t,r){var e=c((t=n.lab(t)).l,(r=n.lab(r)).l),o=c(t.a,r.a),a=c(t.b,r.b),u=c(t.opacity,r.opacity);return function(n){return t.l=e(n),t.a=o(n),t.b=a(n),t.opacity=u(n),t+""}},t.interpolateHcl=O,t.interpolateHclLong=P,t.interpolateCubehelix=z,t.interpolateCubehelixLong=Q,t.piecewise=function(t,n){for(var r=0,e=n.length-1,o=n[0],a=new Array(e<0?0:e);r<e;)a[r]=t(o,o=n[++r]);return function(t){var n=Math.max(0,Math.min(e-1,Math.floor(t*=e)));return a[n](t-n)}},t.quantize=function(t,n){for(var r=new Array(n),e=0;e<n;++e)r[e]=t(e/(n-1));return r},Object.defineProperty(t,"__esModule",{value:!0})});

},{"d3-color":10}],22:[function(require,module,exports){
!function(t,i){"object"==typeof exports&&"undefined"!=typeof module?i(exports):"function"==typeof define&&define.amd?define(["exports"],i):i(t.d3=t.d3||{})}(this,function(t){"use strict";var i=Math.PI,s=2*i,h=s-1e-6;function _(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function e(){return new _}_.prototype=e.prototype={constructor:_,moveTo:function(t,i){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+i)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,i){this._+="L"+(this._x1=+t)+","+(this._y1=+i)},quadraticCurveTo:function(t,i,s,h){this._+="Q"+ +t+","+ +i+","+(this._x1=+s)+","+(this._y1=+h)},bezierCurveTo:function(t,i,s,h,_,e){this._+="C"+ +t+","+ +i+","+ +s+","+ +h+","+(this._x1=+_)+","+(this._y1=+e)},arcTo:function(t,s,h,_,e){t=+t,s=+s,h=+h,_=+_,e=+e;var n=this._x1,o=this._y1,r=h-t,a=_-s,u=n-t,c=o-s,f=u*u+c*c;if(e<0)throw new Error("negative radius: "+e);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=s);else if(f>1e-6)if(Math.abs(c*r-a*u)>1e-6&&e){var x=h-n,y=_-o,M=r*r+a*a,l=x*x+y*y,d=Math.sqrt(M),p=Math.sqrt(f),v=e*Math.tan((i-Math.acos((M+f-l)/(2*d*p)))/2),b=v/p,w=v/d;Math.abs(b-1)>1e-6&&(this._+="L"+(t+b*u)+","+(s+b*c)),this._+="A"+e+","+e+",0,0,"+ +(c*x>u*y)+","+(this._x1=t+w*r)+","+(this._y1=s+w*a)}else this._+="L"+(this._x1=t)+","+(this._y1=s);else;},arc:function(t,_,e,n,o,r){t=+t,_=+_;var a=(e=+e)*Math.cos(n),u=e*Math.sin(n),c=t+a,f=_+u,x=1^r,y=r?n-o:o-n;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+c+","+f:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-f)>1e-6)&&(this._+="L"+c+","+f),e&&(y<0&&(y=y%s+s),y>h?this._+="A"+e+","+e+",0,1,"+x+","+(t-a)+","+(_-u)+"A"+e+","+e+",0,1,"+x+","+(this._x1=c)+","+(this._y1=f):y>1e-6&&(this._+="A"+e+","+e+",0,"+ +(y>=i)+","+x+","+(this._x1=t+e*Math.cos(o))+","+(this._y1=_+e*Math.sin(o))))},rect:function(t,i,s,h){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+i)+"h"+ +s+"v"+ +h+"h"+-s+"Z"},toString:function(){return this._}},t.path=e,Object.defineProperty(t,"__esModule",{value:!0})});

},{}],23:[function(require,module,exports){
!function(n,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e(n.d3=n.d3||{})}(this,function(n){"use strict";function e(n,e){return n[0]-e[0]||n[1]-e[1]}function r(n){for(var e,r,t,o=n.length,f=[0,1],u=2,l=2;l<o;++l){for(;u>1&&(e=n[f[u-2]],r=n[f[u-1]],t=n[l],(r[0]-e[0])*(t[1]-e[1])-(r[1]-e[1])*(t[0]-e[0])<=0);)--u;f[u++]=l}return f.slice(0,u)}n.polygonArea=function(n){for(var e,r=-1,t=n.length,o=n[t-1],f=0;++r<t;)e=o,o=n[r],f+=e[1]*o[0]-e[0]*o[1];return f/2},n.polygonCentroid=function(n){for(var e,r,t=-1,o=n.length,f=0,u=0,l=n[o-1],i=0;++t<o;)e=l,l=n[t],i+=r=e[0]*l[1]-l[0]*e[1],f+=(e[0]+l[0])*r,u+=(e[1]+l[1])*r;return[f/(i*=3),u/i]},n.polygonHull=function(n){if((o=n.length)<3)return null;var t,o,f=new Array(o),u=new Array(o);for(t=0;t<o;++t)f[t]=[+n[t][0],+n[t][1],t];for(f.sort(e),t=0;t<o;++t)u[t]=[f[t][0],-f[t][1]];var l=r(f),i=r(u),g=i[0]===l[0],h=i[i.length-1]===l[l.length-1],a=[];for(t=l.length-1;t>=0;--t)a.push(n[f[l[t]][2]]);for(t=+g;t<i.length-h;++t)a.push(n[f[i[t]][2]]);return a},n.polygonContains=function(n,e){for(var r,t,o=n.length,f=n[o-1],u=e[0],l=e[1],i=f[0],g=f[1],h=!1,a=0;a<o;++a)r=(f=n[a])[0],(t=f[1])>l!=g>l&&u<(i-r)*(l-t)/(g-t)+r&&(h=!h),i=r,g=t;return h},n.polygonLength=function(n){for(var e,r,t=-1,o=n.length,f=n[o-1],u=f[0],l=f[1],i=0;++t<o;)e=u,r=l,e-=u=(f=n[t])[0],r-=l=f[1],i+=Math.sqrt(e*e+r*r);return i},Object.defineProperty(n,"__esModule",{value:!0})});

},{}],24:[function(require,module,exports){
!function(t,i){"object"==typeof exports&&"undefined"!=typeof module?i(exports):"function"==typeof define&&define.amd?define(["exports"],i):i(t.d3=t.d3||{})}(this,function(t){"use strict";function i(t,i,r,n){if(isNaN(i)||isNaN(r))return t;var e,s,h,o,a,u,l,_,f,c=t._root,x={data:n},y=t._x0,d=t._y0,v=t._x1,p=t._y1;if(!c)return t._root=x,t;for(;c.length;)if((u=i>=(s=(y+v)/2))?y=s:v=s,(l=r>=(h=(d+p)/2))?d=h:p=h,e=c,!(c=c[_=l<<1|u]))return e[_]=x,t;if(o=+t._x.call(null,c.data),a=+t._y.call(null,c.data),i===o&&r===a)return x.next=c,e?e[_]=x:t._root=x,t;do{e=e?e[_]=new Array(4):t._root=new Array(4),(u=i>=(s=(y+v)/2))?y=s:v=s,(l=r>=(h=(d+p)/2))?d=h:p=h}while((_=l<<1|u)==(f=(a>=h)<<1|o>=s));return e[f]=c,e[_]=x,t}function r(t,i,r,n,e){this.node=t,this.x0=i,this.y0=r,this.x1=n,this.y1=e}function n(t){return t[0]}function e(t){return t[1]}function s(t,i,r){var s=new h(null==i?n:i,null==r?e:r,NaN,NaN,NaN,NaN);return null==t?s:s.addAll(t)}function h(t,i,r,n,e,s){this._x=t,this._y=i,this._x0=r,this._y0=n,this._x1=e,this._y1=s,this._root=void 0}function o(t){for(var i={data:t.data},r=i;t=t.next;)r=r.next={data:t.data};return i}var a=s.prototype=h.prototype;a.copy=function(){var t,i,r=new h(this._x,this._y,this._x0,this._y0,this._x1,this._y1),n=this._root;if(!n)return r;if(!n.length)return r._root=o(n),r;for(t=[{source:n,target:r._root=new Array(4)}];n=t.pop();)for(var e=0;e<4;++e)(i=n.source[e])&&(i.length?t.push({source:i,target:n.target[e]=new Array(4)}):n.target[e]=o(i));return r},a.add=function(t){var r=+this._x.call(null,t),n=+this._y.call(null,t);return i(this.cover(r,n),r,n,t)},a.addAll=function(t){var r,n,e,s,h=t.length,o=new Array(h),a=new Array(h),u=1/0,l=1/0,_=-1/0,f=-1/0;for(n=0;n<h;++n)isNaN(e=+this._x.call(null,r=t[n]))||isNaN(s=+this._y.call(null,r))||(o[n]=e,a[n]=s,e<u&&(u=e),e>_&&(_=e),s<l&&(l=s),s>f&&(f=s));if(u>_||l>f)return this;for(this.cover(u,l).cover(_,f),n=0;n<h;++n)i(this,o[n],a[n],t[n]);return this},a.cover=function(t,i){if(isNaN(t=+t)||isNaN(i=+i))return this;var r=this._x0,n=this._y0,e=this._x1,s=this._y1;if(isNaN(r))e=(r=Math.floor(t))+1,s=(n=Math.floor(i))+1;else{for(var h,o,a=e-r,u=this._root;r>t||t>=e||n>i||i>=s;)switch(o=(i<n)<<1|t<r,(h=new Array(4))[o]=u,u=h,a*=2,o){case 0:e=r+a,s=n+a;break;case 1:r=e-a,s=n+a;break;case 2:e=r+a,n=s-a;break;case 3:r=e-a,n=s-a}this._root&&this._root.length&&(this._root=u)}return this._x0=r,this._y0=n,this._x1=e,this._y1=s,this},a.data=function(){var t=[];return this.visit(function(i){if(!i.length)do{t.push(i.data)}while(i=i.next)}),t},a.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},a.find=function(t,i,n){var e,s,h,o,a,u,l,_=this._x0,f=this._y0,c=this._x1,x=this._y1,y=[],d=this._root;for(d&&y.push(new r(d,_,f,c,x)),null==n?n=1/0:(_=t-n,f=i-n,c=t+n,x=i+n,n*=n);u=y.pop();)if(!(!(d=u.node)||(s=u.x0)>c||(h=u.y0)>x||(o=u.x1)<_||(a=u.y1)<f))if(d.length){var v=(s+o)/2,p=(h+a)/2;y.push(new r(d[3],v,p,o,a),new r(d[2],s,p,v,a),new r(d[1],v,h,o,p),new r(d[0],s,h,v,p)),(l=(i>=p)<<1|t>=v)&&(u=y[y.length-1],y[y.length-1]=y[y.length-1-l],y[y.length-1-l]=u)}else{var w=t-+this._x.call(null,d.data),N=i-+this._y.call(null,d.data),g=w*w+N*N;if(g<n){var A=Math.sqrt(n=g);_=t-A,f=i-A,c=t+A,x=i+A,e=d.data}}return e},a.remove=function(t){if(isNaN(s=+this._x.call(null,t))||isNaN(h=+this._y.call(null,t)))return this;var i,r,n,e,s,h,o,a,u,l,_,f,c=this._root,x=this._x0,y=this._y0,d=this._x1,v=this._y1;if(!c)return this;if(c.length)for(;;){if((u=s>=(o=(x+d)/2))?x=o:d=o,(l=h>=(a=(y+v)/2))?y=a:v=a,i=c,!(c=c[_=l<<1|u]))return this;if(!c.length)break;(i[_+1&3]||i[_+2&3]||i[_+3&3])&&(r=i,f=_)}for(;c.data!==t;)if(n=c,!(c=c.next))return this;return(e=c.next)&&delete c.next,n?(e?n.next=e:delete n.next,this):i?(e?i[_]=e:delete i[_],(c=i[0]||i[1]||i[2]||i[3])&&c===(i[3]||i[2]||i[1]||i[0])&&!c.length&&(r?r[f]=c:this._root=c),this):(this._root=e,this)},a.removeAll=function(t){for(var i=0,r=t.length;i<r;++i)this.remove(t[i]);return this},a.root=function(){return this._root},a.size=function(){var t=0;return this.visit(function(i){if(!i.length)do{++t}while(i=i.next)}),t},a.visit=function(t){var i,n,e,s,h,o,a=[],u=this._root;for(u&&a.push(new r(u,this._x0,this._y0,this._x1,this._y1));i=a.pop();)if(!t(u=i.node,e=i.x0,s=i.y0,h=i.x1,o=i.y1)&&u.length){var l=(e+h)/2,_=(s+o)/2;(n=u[3])&&a.push(new r(n,l,_,h,o)),(n=u[2])&&a.push(new r(n,e,_,l,o)),(n=u[1])&&a.push(new r(n,l,s,h,_)),(n=u[0])&&a.push(new r(n,e,s,l,_))}return this},a.visitAfter=function(t){var i,n=[],e=[];for(this._root&&n.push(new r(this._root,this._x0,this._y0,this._x1,this._y1));i=n.pop();){var s=i.node;if(s.length){var h,o=i.x0,a=i.y0,u=i.x1,l=i.y1,_=(o+u)/2,f=(a+l)/2;(h=s[0])&&n.push(new r(h,o,a,_,f)),(h=s[1])&&n.push(new r(h,_,a,u,f)),(h=s[2])&&n.push(new r(h,o,f,_,l)),(h=s[3])&&n.push(new r(h,_,f,u,l))}e.push(i)}for(;i=e.pop();)t(i.node,i.x0,i.y0,i.x1,i.y1);return this},a.x=function(t){return arguments.length?(this._x=t,this):this._x},a.y=function(t){return arguments.length?(this._y=t,this):this._y},t.quadtree=s,Object.defineProperty(t,"__esModule",{value:!0})});

},{}],25:[function(require,module,exports){
!function(n,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports):"function"==typeof define&&define.amd?define(["exports"],r):r(n.d3=n.d3||{})}(this,function(n){"use strict";function r(){return Math.random()}var t=function n(r){function t(n,t){return n=null==n?0:+n,t=null==t?1:+t,1===arguments.length?(t=n,n=0):t-=n,function(){return r()*t+n}}return t.source=n,t}(r),u=function n(r){function t(n,t){var u,e;return n=null==n?0:+n,t=null==t?1:+t,function(){var o;if(null!=u)o=u,u=null;else do{u=2*r()-1,o=2*r()-1,e=u*u+o*o}while(!e||e>1);return n+t*o*Math.sqrt(-2*Math.log(e)/e)}}return t.source=n,t}(r),e=function n(r){function t(){var n=u.source(r).apply(this,arguments);return function(){return Math.exp(n())}}return t.source=n,t}(r),o=function n(r){function t(n){return function(){for(var t=0,u=0;u<n;++u)t+=r();return t}}return t.source=n,t}(r),i=function n(r){function t(n){var t=o.source(r)(n);return function(){return t()/n}}return t.source=n,t}(r),c=function n(r){function t(n){return function(){return-Math.log(1-r())/n}}return t.source=n,t}(r);n.randomUniform=t,n.randomNormal=u,n.randomLogNormal=e,n.randomBates=i,n.randomIrwinHall=o,n.randomExponential=c,Object.defineProperty(n,"__esModule",{value:!0})});

},{}],26:[function(require,module,exports){
!function(f,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("d3-interpolate"),require("d3-color")):"function"==typeof define&&define.amd?define(["exports","d3-interpolate","d3-color"],e):e(f.d3=f.d3||{},f.d3,f.d3)}(this,function(f,e,d){"use strict";function c(f){for(var e=f.length/6|0,d=new Array(e),c=0;c<e;)d[c]="#"+f.slice(6*c,6*++c);return d}var a=c("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),b=c("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),r=c("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),t=c("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),n=c("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),o=c("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),l=c("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),i=c("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),p=c("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");function m(f){return e.interpolateRgbBasis(f[f.length-1])}var s=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(c),u=m(s),h=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(c),y=m(h),w=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(c),A=m(w),P=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(c),B=m(P),G=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(c),R=m(G),x=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(c),Y=m(x),g=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(c),M=m(g),O=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(c),v=m(O),C=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(c),S=m(C),I=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(c),L=m(I),j=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(c),q=m(j),D=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(c),_=m(D),k=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(c),V=m(k),W=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(c),z=m(W),E=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(c),F=m(E),H=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(c),J=m(H),K=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(c),N=m(K),Q=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(c),T=m(Q),U=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(c),X=m(U),Z=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(c),$=m(Z),ff=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(c),ef=m(ff),df=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(c),cf=m(df),af=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(c),bf=m(af),rf=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(c),tf=m(rf),nf=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(c),of=m(nf),lf=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(c),pf=m(lf),mf=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(c),sf=m(mf),uf=e.interpolateCubehelixLong(d.cubehelix(300,.5,0),d.cubehelix(-240,.5,1)),hf=e.interpolateCubehelixLong(d.cubehelix(-100,.75,.35),d.cubehelix(80,1.5,.8)),yf=e.interpolateCubehelixLong(d.cubehelix(260,.75,.35),d.cubehelix(80,1.5,.8)),wf=d.cubehelix();var Af=d.rgb(),Pf=Math.PI/3,Bf=2*Math.PI/3;function Gf(f){var e=f.length;return function(d){return f[Math.max(0,Math.min(e-1,Math.floor(d*e)))]}}var Rf=Gf(c("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),xf=Gf(c("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Yf=Gf(c("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),gf=Gf(c("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));f.schemeCategory10=a,f.schemeAccent=b,f.schemeDark2=r,f.schemePaired=t,f.schemePastel1=n,f.schemePastel2=o,f.schemeSet1=l,f.schemeSet2=i,f.schemeSet3=p,f.interpolateBrBG=u,f.schemeBrBG=s,f.interpolatePRGn=y,f.schemePRGn=h,f.interpolatePiYG=A,f.schemePiYG=w,f.interpolatePuOr=B,f.schemePuOr=P,f.interpolateRdBu=R,f.schemeRdBu=G,f.interpolateRdGy=Y,f.schemeRdGy=x,f.interpolateRdYlBu=M,f.schemeRdYlBu=g,f.interpolateRdYlGn=v,f.schemeRdYlGn=O,f.interpolateSpectral=S,f.schemeSpectral=C,f.interpolateBuGn=L,f.schemeBuGn=I,f.interpolateBuPu=q,f.schemeBuPu=j,f.interpolateGnBu=_,f.schemeGnBu=D,f.interpolateOrRd=V,f.schemeOrRd=k,f.interpolatePuBuGn=z,f.schemePuBuGn=W,f.interpolatePuBu=F,f.schemePuBu=E,f.interpolatePuRd=J,f.schemePuRd=H,f.interpolateRdPu=N,f.schemeRdPu=K,f.interpolateYlGnBu=T,f.schemeYlGnBu=Q,f.interpolateYlGn=X,f.schemeYlGn=U,f.interpolateYlOrBr=$,f.schemeYlOrBr=Z,f.interpolateYlOrRd=ef,f.schemeYlOrRd=ff,f.interpolateBlues=cf,f.schemeBlues=df,f.interpolateGreens=bf,f.schemeGreens=af,f.interpolateGreys=tf,f.schemeGreys=rf,f.interpolatePurples=of,f.schemePurples=nf,f.interpolateReds=pf,f.schemeReds=lf,f.interpolateOranges=sf,f.schemeOranges=mf,f.interpolateCubehelixDefault=uf,f.interpolateRainbow=function(f){(f<0||f>1)&&(f-=Math.floor(f));var e=Math.abs(f-.5);return wf.h=360*f-100,wf.s=1.5-1.5*e,wf.l=.8-.9*e,wf+""},f.interpolateWarm=hf,f.interpolateCool=yf,f.interpolateSinebow=function(f){var e;return f=(.5-f)*Math.PI,Af.r=255*(e=Math.sin(f))*e,Af.g=255*(e=Math.sin(f+Pf))*e,Af.b=255*(e=Math.sin(f+Bf))*e,Af+""},f.interpolateViridis=Rf,f.interpolateMagma=xf,f.interpolateInferno=Yf,f.interpolatePlasma=gf,Object.defineProperty(f,"__esModule",{value:!0})});

},{"d3-color":10,"d3-interpolate":21}],27:[function(require,module,exports){
!function(n,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("d3-collection"),require("d3-array"),require("d3-interpolate"),require("d3-format"),require("d3-time"),require("d3-time-format")):"function"==typeof define&&define.amd?define(["exports","d3-collection","d3-array","d3-interpolate","d3-format","d3-time","d3-time-format"],t):t(n.d3=n.d3||{},n.d3,n.d3,n.d3,n.d3,n.d3,n.d3)}(this,function(n,t,e,r,u,i,o){"use strict";function a(n,t){switch(arguments.length){case 0:break;case 1:this.range(n);break;default:this.range(t).domain(n)}return this}function c(n,t){switch(arguments.length){case 0:break;case 1:this.interpolator(n);break;default:this.interpolator(t).domain(n)}return this}var l=Array.prototype,f=l.map,p=l.slice,h={name:"implicit"};function s(){var n=t.map(),e=[],r=[],u=h;function i(t){var i=t+"",o=n.get(i);if(!o){if(u!==h)return u;n.set(i,o=e.push(t))}return r[(o-1)%r.length]}return i.domain=function(r){if(!arguments.length)return e.slice();e=[],n=t.map();for(var u,o,a=-1,c=r.length;++a<c;)n.has(o=(u=r[a])+"")||n.set(o,e.push(u));return i},i.range=function(n){return arguments.length?(r=p.call(n),i):r.slice()},i.unknown=function(n){return arguments.length?(u=n,i):u},i.copy=function(){return s(e,r).unknown(u)},a.apply(i,arguments),i}function g(){var n,t,r=s().unknown(void 0),u=r.domain,i=r.range,o=[0,1],c=!1,l=0,f=0,p=.5;function h(){var r=u().length,a=o[1]<o[0],h=o[a-0],s=o[1-a];n=(s-h)/Math.max(1,r-l+2*f),c&&(n=Math.floor(n)),h+=(s-h-n*(r-l))*p,t=n*(1-l),c&&(h=Math.round(h),t=Math.round(t));var g=e.range(r).map(function(t){return h+n*t});return i(a?g.reverse():g)}return delete r.unknown,r.domain=function(n){return arguments.length?(u(n),h()):u()},r.range=function(n){return arguments.length?(o=[+n[0],+n[1]],h()):o.slice()},r.rangeRound=function(n){return o=[+n[0],+n[1]],c=!0,h()},r.bandwidth=function(){return t},r.step=function(){return n},r.round=function(n){return arguments.length?(c=!!n,h()):c},r.padding=function(n){return arguments.length?(l=Math.min(1,f=+n),h()):l},r.paddingInner=function(n){return arguments.length?(l=Math.min(1,n),h()):l},r.paddingOuter=function(n){return arguments.length?(f=+n,h()):f},r.align=function(n){return arguments.length?(p=Math.max(0,Math.min(1,n)),h()):p},r.copy=function(){return g(u(),o).round(c).paddingInner(l).paddingOuter(f).align(p)},a.apply(h(),arguments)}function d(n){return+n}var m=[0,1];function v(n){return n}function M(n,t){return(t-=n=+n)?function(e){return(e-n)/t}:(e=isNaN(t)?NaN:.5,function(){return e});var e}function y(n){var t,e=n[0],r=n[n.length-1];return e>r&&(t=e,e=r,r=t),function(n){return Math.max(e,Math.min(r,n))}}function k(n,t,e){var r=n[0],u=n[1],i=t[0],o=t[1];return u<r?(r=M(u,r),i=e(o,i)):(r=M(r,u),i=e(i,o)),function(n){return i(r(n))}}function w(n,t,r){var u=Math.min(n.length,t.length)-1,i=new Array(u),o=new Array(u),a=-1;for(n[u]<n[0]&&(n=n.slice().reverse(),t=t.slice().reverse());++a<u;)i[a]=M(n[a],n[a+1]),o[a]=r(t[a],t[a+1]);return function(t){var r=e.bisect(n,t,1,u)-1;return o[r](i[r](t))}}function x(n,t){return t.domain(n.domain()).range(n.range()).interpolate(n.interpolate()).clamp(n.clamp()).unknown(n.unknown())}function N(){var n,t,e,u,i,o,a=m,c=m,l=r.interpolate,h=v;function s(){return u=Math.min(a.length,c.length)>2?w:k,i=o=null,g}function g(t){return isNaN(t=+t)?e:(i||(i=u(a.map(n),c,l)))(n(h(t)))}return g.invert=function(e){return h(t((o||(o=u(c,a.map(n),r.interpolateNumber)))(e)))},g.domain=function(n){return arguments.length?(a=f.call(n,d),h===v||(h=y(a)),s()):a.slice()},g.range=function(n){return arguments.length?(c=p.call(n),s()):c.slice()},g.rangeRound=function(n){return c=p.call(n),l=r.interpolateRound,s()},g.clamp=function(n){return arguments.length?(h=n?y(a):v,g):h!==v},g.interpolate=function(n){return arguments.length?(l=n,s()):l},g.unknown=function(n){return arguments.length?(e=n,g):e},function(e,r){return n=e,t=r,s()}}function b(n,t){return N()(n,t)}function q(n,t,r,i){var o,a=e.tickStep(n,t,r);switch((i=u.formatSpecifier(null==i?",f":i)).type){case"s":var c=Math.max(Math.abs(n),Math.abs(t));return null!=i.precision||isNaN(o=u.precisionPrefix(a,c))||(i.precision=o),u.formatPrefix(i,c);case"":case"e":case"g":case"p":case"r":null!=i.precision||isNaN(o=u.precisionRound(a,Math.max(Math.abs(n),Math.abs(t))))||(i.precision=o-("e"===i.type));break;case"f":case"%":null!=i.precision||isNaN(o=u.precisionFixed(a))||(i.precision=o-2*("%"===i.type))}return u.format(i)}function S(n){var t=n.domain;return n.ticks=function(n){var r=t();return e.ticks(r[0],r[r.length-1],null==n?10:n)},n.tickFormat=function(n,e){var r=t();return q(r[0],r[r.length-1],null==n?10:n,e)},n.nice=function(r){null==r&&(r=10);var u,i=t(),o=0,a=i.length-1,c=i[o],l=i[a];return l<c&&(u=c,c=l,l=u,u=o,o=a,a=u),(u=e.tickIncrement(c,l,r))>0?(c=Math.floor(c/u)*u,l=Math.ceil(l/u)*u,u=e.tickIncrement(c,l,r)):u<0&&(c=Math.ceil(c*u)/u,l=Math.floor(l*u)/u,u=e.tickIncrement(c,l,r)),u>0?(i[o]=Math.floor(c/u)*u,i[a]=Math.ceil(l/u)*u,t(i)):u<0&&(i[o]=Math.ceil(c*u)/u,i[a]=Math.floor(l*u)/u,t(i)),n},n}function D(n,t){var e,r=0,u=(n=n.slice()).length-1,i=n[r],o=n[u];return o<i&&(e=r,r=u,u=e,e=i,i=o,o=e),n[r]=t.floor(i),n[u]=t.ceil(o),n}function I(n){return Math.log(n)}function O(n){return Math.exp(n)}function F(n){return-Math.log(-n)}function P(n){return-Math.exp(-n)}function A(n){return isFinite(n)?+("1e"+n):n<0?0:n}function E(n){return function(t){return-n(-t)}}function L(n){var t,r,i=n(I,O),o=i.domain,a=10;function c(){return t=function(n){return n===Math.E?Math.log:10===n&&Math.log10||2===n&&Math.log2||(n=Math.log(n),function(t){return Math.log(t)/n})}(a),r=function(n){return 10===n?A:n===Math.E?Math.exp:function(t){return Math.pow(n,t)}}(a),o()[0]<0?(t=E(t),r=E(r),n(F,P)):n(I,O),i}return i.base=function(n){return arguments.length?(a=+n,c()):a},i.domain=function(n){return arguments.length?(o(n),c()):o()},i.ticks=function(n){var u,i=o(),c=i[0],l=i[i.length-1];(u=l<c)&&(s=c,c=l,l=s);var f,p,h,s=t(c),g=t(l),d=null==n?10:+n,m=[];if(!(a%1)&&g-s<d){if(s=Math.round(s)-1,g=Math.round(g)+1,c>0){for(;s<g;++s)for(p=1,f=r(s);p<a;++p)if(!((h=f*p)<c)){if(h>l)break;m.push(h)}}else for(;s<g;++s)for(p=a-1,f=r(s);p>=1;--p)if(!((h=f*p)<c)){if(h>l)break;m.push(h)}}else m=e.ticks(s,g,Math.min(g-s,d)).map(r);return u?m.reverse():m},i.tickFormat=function(n,e){if(null==e&&(e=10===a?".0e":","),"function"!=typeof e&&(e=u.format(e)),n===1/0)return e;null==n&&(n=10);var o=Math.max(1,a*n/i.ticks().length);return function(n){var u=n/r(Math.round(t(n)));return u*a<a-.5&&(u*=a),u<=o?e(n):""}},i.nice=function(){return o(D(o(),{floor:function(n){return r(Math.floor(t(n)))},ceil:function(n){return r(Math.ceil(t(n)))}}))},i}function R(n){return function(t){return Math.sign(t)*Math.log1p(Math.abs(t/n))}}function T(n){return function(t){return Math.sign(t)*Math.expm1(Math.abs(t))*n}}function Q(n){var t=1,e=n(R(t),T(t));return e.constant=function(e){return arguments.length?n(R(t=+e),T(t)):t},S(e)}function U(n){return function(t){return t<0?-Math.pow(-t,n):Math.pow(t,n)}}function Y(n){return n<0?-Math.sqrt(-n):Math.sqrt(n)}function j(n){return n<0?-n*n:n*n}function B(n){var t=n(v,v),e=1;return t.exponent=function(t){return arguments.length?1===(e=+t)?n(v,v):.5===e?n(Y,j):n(U(e),U(1/e)):e},S(t)}function C(){var n=B(N());return n.copy=function(){return x(n,C()).exponent(n.exponent())},a.apply(n,arguments),n}var H=1e3,W=60*H,_=60*W,z=24*_,G=7*z,J=30*z,K=365*z;function V(n){return new Date(n)}function X(n){return n instanceof Date?+n:+new Date(+n)}function Z(n,t,r,u,i,o,a,c,l){var p=b(v,v),h=p.invert,s=p.domain,g=l(".%L"),d=l(":%S"),m=l("%I:%M"),M=l("%I %p"),y=l("%a %d"),k=l("%b %d"),w=l("%B"),N=l("%Y"),q=[[a,1,H],[a,5,5*H],[a,15,15*H],[a,30,30*H],[o,1,W],[o,5,5*W],[o,15,15*W],[o,30,30*W],[i,1,_],[i,3,3*_],[i,6,6*_],[i,12,12*_],[u,1,z],[u,2,2*z],[r,1,G],[t,1,J],[t,3,3*J],[n,1,K]];function S(e){return(a(e)<e?g:o(e)<e?d:i(e)<e?m:u(e)<e?M:t(e)<e?r(e)<e?y:k:n(e)<e?w:N)(e)}function I(t,r,u,i){if(null==t&&(t=10),"number"==typeof t){var o=Math.abs(u-r)/t,a=e.bisector(function(n){return n[2]}).right(q,o);a===q.length?(i=e.tickStep(r/K,u/K,t),t=n):a?(i=(a=q[o/q[a-1][2]<q[a][2]/o?a-1:a])[1],t=a[0]):(i=Math.max(e.tickStep(r,u,t),1),t=c)}return null==i?t:t.every(i)}return p.invert=function(n){return new Date(h(n))},p.domain=function(n){return arguments.length?s(f.call(n,X)):s().map(V)},p.ticks=function(n,t){var e,r=s(),u=r[0],i=r[r.length-1],o=i<u;return o&&(e=u,u=i,i=e),e=(e=I(n,u,i,t))?e.range(u,i+1):[],o?e.reverse():e},p.tickFormat=function(n,t){return null==t?S:l(t)},p.nice=function(n,t){var e=s();return(n=I(n,e[0],e[e.length-1],t))?s(D(e,n)):p},p.copy=function(){return x(p,Z(n,t,r,u,i,o,a,c,l))},p}function $(){var n,t,e,r,u,i=0,o=1,a=v,c=!1;function l(t){return isNaN(t=+t)?u:a(0===e?.5:(t=(r(t)-n)*e,c?Math.max(0,Math.min(1,t)):t))}return l.domain=function(u){return arguments.length?(n=r(i=+u[0]),t=r(o=+u[1]),e=n===t?0:1/(t-n),l):[i,o]},l.clamp=function(n){return arguments.length?(c=!!n,l):c},l.interpolator=function(n){return arguments.length?(a=n,l):a},l.unknown=function(n){return arguments.length?(u=n,l):u},function(u){return r=u,n=u(i),t=u(o),e=n===t?0:1/(t-n),l}}function nn(n,t){return t.domain(n.domain()).interpolator(n.interpolator()).clamp(n.clamp()).unknown(n.unknown())}function tn(){var n=B($());return n.copy=function(){return nn(n,tn()).exponent(n.exponent())},c.apply(n,arguments)}function en(){var n,t,e,r,u,i,o,a=0,c=.5,l=1,f=v,p=!1;function h(n){return isNaN(n=+n)?o:(n=.5+((n=+i(n))-t)*(n<t?r:u),f(p?Math.max(0,Math.min(1,n)):n))}return h.domain=function(o){return arguments.length?(n=i(a=+o[0]),t=i(c=+o[1]),e=i(l=+o[2]),r=n===t?0:.5/(t-n),u=t===e?0:.5/(e-t),h):[a,c,l]},h.clamp=function(n){return arguments.length?(p=!!n,h):p},h.interpolator=function(n){return arguments.length?(f=n,h):f},h.unknown=function(n){return arguments.length?(o=n,h):o},function(o){return i=o,n=o(a),t=o(c),e=o(l),r=n===t?0:.5/(t-n),u=t===e?0:.5/(e-t),h}}function rn(){var n=B(en());return n.copy=function(){return nn(n,rn()).exponent(n.exponent())},c.apply(n,arguments)}n.scaleBand=g,n.scalePoint=function(){return function n(t){var e=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return n(e())},t}(g.apply(null,arguments).paddingInner(1))},n.scaleIdentity=function n(t){var e;function r(n){return isNaN(n=+n)?e:n}return r.invert=r,r.domain=r.range=function(n){return arguments.length?(t=f.call(n,d),r):t.slice()},r.unknown=function(n){return arguments.length?(e=n,r):e},r.copy=function(){return n(t).unknown(e)},t=arguments.length?f.call(t,d):[0,1],S(r)},n.scaleLinear=function n(){var t=b(v,v);return t.copy=function(){return x(t,n())},a.apply(t,arguments),S(t)},n.scaleLog=function n(){var t=L(N()).domain([1,10]);return t.copy=function(){return x(t,n()).base(t.base())},a.apply(t,arguments),t},n.scaleSymlog=function n(){var t=Q(N());return t.copy=function(){return x(t,n()).constant(t.constant())},a.apply(t,arguments)},n.scaleOrdinal=s,n.scaleImplicit=h,n.scalePow=C,n.scaleSqrt=function(){return C.apply(null,arguments).exponent(.5)},n.scaleQuantile=function n(){var t,r=[],u=[],i=[];function o(){var n=0,t=Math.max(1,u.length);for(i=new Array(t-1);++n<t;)i[n-1]=e.quantile(r,n/t);return c}function c(n){return isNaN(n=+n)?t:u[e.bisect(i,n)]}return c.invertExtent=function(n){var t=u.indexOf(n);return t<0?[NaN,NaN]:[t>0?i[t-1]:r[0],t<i.length?i[t]:r[r.length-1]]},c.domain=function(n){if(!arguments.length)return r.slice();r=[];for(var t,u=0,i=n.length;u<i;++u)null==(t=n[u])||isNaN(t=+t)||r.push(t);return r.sort(e.ascending),o()},c.range=function(n){return arguments.length?(u=p.call(n),o()):u.slice()},c.unknown=function(n){return arguments.length?(t=n,c):t},c.quantiles=function(){return i.slice()},c.copy=function(){return n().domain(r).range(u).unknown(t)},a.apply(c,arguments)},n.scaleQuantize=function n(){var t,r=0,u=1,i=1,o=[.5],c=[0,1];function l(n){return n<=n?c[e.bisect(o,n,0,i)]:t}function f(){var n=-1;for(o=new Array(i);++n<i;)o[n]=((n+1)*u-(n-i)*r)/(i+1);return l}return l.domain=function(n){return arguments.length?(r=+n[0],u=+n[1],f()):[r,u]},l.range=function(n){return arguments.length?(i=(c=p.call(n)).length-1,f()):c.slice()},l.invertExtent=function(n){var t=c.indexOf(n);return t<0?[NaN,NaN]:t<1?[r,o[0]]:t>=i?[o[i-1],u]:[o[t-1],o[t]]},l.unknown=function(n){return arguments.length?(t=n,l):l},l.thresholds=function(){return o.slice()},l.copy=function(){return n().domain([r,u]).range(c).unknown(t)},a.apply(S(l),arguments)},n.scaleThreshold=function n(){var t,r=[.5],u=[0,1],i=1;function o(n){return n<=n?u[e.bisect(r,n,0,i)]:t}return o.domain=function(n){return arguments.length?(r=p.call(n),i=Math.min(r.length,u.length-1),o):r.slice()},o.range=function(n){return arguments.length?(u=p.call(n),i=Math.min(r.length,u.length-1),o):u.slice()},o.invertExtent=function(n){var t=u.indexOf(n);return[r[t-1],r[t]]},o.unknown=function(n){return arguments.length?(t=n,o):t},o.copy=function(){return n().domain(r).range(u).unknown(t)},a.apply(o,arguments)},n.scaleTime=function(){return a.apply(Z(i.timeYear,i.timeMonth,i.timeWeek,i.timeDay,i.timeHour,i.timeMinute,i.timeSecond,i.timeMillisecond,o.timeFormat).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)},n.scaleUtc=function(){return a.apply(Z(i.utcYear,i.utcMonth,i.utcWeek,i.utcDay,i.utcHour,i.utcMinute,i.utcSecond,i.utcMillisecond,o.utcFormat).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)},n.scaleSequential=function n(){var t=S($()(v));return t.copy=function(){return nn(t,n())},c.apply(t,arguments)},n.scaleSequentialLog=function n(){var t=L($()).domain([1,10]);return t.copy=function(){return nn(t,n()).base(t.base())},c.apply(t,arguments)},n.scaleSequentialPow=tn,n.scaleSequentialSqrt=function(){return tn.apply(null,arguments).exponent(.5)},n.scaleSequentialSymlog=function n(){var t=Q($());return t.copy=function(){return nn(t,n()).constant(t.constant())},c.apply(t,arguments)},n.scaleSequentialQuantile=function n(){var t=[],r=v;function u(n){if(!isNaN(n=+n))return r((e.bisect(t,n)-1)/(t.length-1))}return u.domain=function(n){if(!arguments.length)return t.slice();t=[];for(var r,i=0,o=n.length;i<o;++i)null==(r=n[i])||isNaN(r=+r)||t.push(r);return t.sort(e.ascending),u},u.interpolator=function(n){return arguments.length?(r=n,u):r},u.copy=function(){return n(r).domain(t)},c.apply(u,arguments)},n.scaleDiverging=function n(){var t=S(en()(v));return t.copy=function(){return nn(t,n())},c.apply(t,arguments)},n.scaleDivergingLog=function n(){var t=L(en()).domain([.1,1,10]);return t.copy=function(){return nn(t,n()).base(t.base())},c.apply(t,arguments)},n.scaleDivergingPow=rn,n.scaleDivergingSqrt=function(){return rn.apply(null,arguments).exponent(.5)},n.scaleDivergingSymlog=function n(){var t=Q(en());return t.copy=function(){return nn(t,n()).constant(t.constant())},c.apply(t,arguments)},n.tickFormat=q,Object.defineProperty(n,"__esModule",{value:!0})});

},{"d3-array":5,"d3-collection":9,"d3-format":18,"d3-interpolate":21,"d3-time":31,"d3-time-format":30}],28:[function(require,module,exports){
!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports):"function"==typeof define&&define.amd?define(["exports"],n):n(t.d3=t.d3||{})}(this,function(t){"use strict";var n="http://www.w3.org/1999/xhtml",e={svg:"http://www.w3.org/2000/svg",xhtml:n,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function r(t){var n=t+="",r=n.indexOf(":");return r>=0&&"xmlns"!==(n=t.slice(0,r))&&(t=t.slice(r+1)),e.hasOwnProperty(n)?{space:e[n],local:t}:t}function i(t){var e=r(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,r=this.namespaceURI;return r===n&&e.documentElement.namespaceURI===n?e.createElement(t):e.createElementNS(r,t)}})(e)}function o(){}function u(t){return null==t?o:function(){return this.querySelector(t)}}function c(){return[]}function s(t){return null==t?c:function(){return this.querySelectorAll(t)}}function a(t){return function(){return this.matches(t)}}function l(t){return new Array(t.length)}function f(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}f.prototype={constructor:f,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var h="$";function p(t,n,e,r,i,o){for(var u,c=0,s=n.length,a=o.length;c<a;++c)(u=n[c])?(u.__data__=o[c],r[c]=u):e[c]=new f(t,o[c]);for(;c<s;++c)(u=n[c])&&(i[c]=u)}function _(t,n,e,r,i,o,u){var c,s,a,l={},p=n.length,_=o.length,v=new Array(p);for(c=0;c<p;++c)(s=n[c])&&(v[c]=a=h+u.call(s,s.__data__,c,n),a in l?i[c]=s:l[a]=s);for(c=0;c<_;++c)(s=l[a=h+u.call(t,o[c],c,o)])?(r[c]=s,s.__data__=o[c],l[a]=null):e[c]=new f(t,o[c]);for(c=0;c<p;++c)(s=n[c])&&l[v[c]]===s&&(i[c]=s)}function v(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function d(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function y(t,n){return t.style.getPropertyValue(n)||d(t).getComputedStyle(t,null).getPropertyValue(n)}function m(t){return t.trim().split(/^|\s+/)}function g(t){return t.classList||new w(t)}function w(t){this._node=t,this._names=m(t.getAttribute("class")||"")}function A(t,n){for(var e=g(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function x(t,n){for(var e=g(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function S(){this.textContent=""}function b(){this.innerHTML=""}function E(){this.nextSibling&&this.parentNode.appendChild(this)}function N(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function P(){return null}function C(){var t=this.parentNode;t&&t.removeChild(this)}function L(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function T(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}w.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var B={};(t.event=null,"undefined"!=typeof document)&&("onmouseenter"in document.documentElement||(B={mouseenter:"mouseover",mouseleave:"mouseout"}));function q(t,n,e){return t=D(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function D(n,e,r){return function(i){var o=t.event;t.event=i;try{n.call(this,this.__data__,e,r)}finally{t.event=o}}}function M(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function O(t,n,e){var r=B.hasOwnProperty(t.type)?q:D;return function(i,o,u){var c,s=this.__on,a=r(n,o,u);if(s)for(var l=0,f=s.length;l<f;++l)if((c=s[l]).type===t.type&&c.name===t.name)return this.removeEventListener(c.type,c.listener,c.capture),this.addEventListener(c.type,c.listener=a,c.capture=e),void(c.value=n);this.addEventListener(t.type,a,e),c={type:t.type,name:t.name,value:n,listener:a,capture:e},s?s.push(c):this.__on=[c]}}function V(t,n,e){var r=d(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}var j=[null];function R(t,n){this._groups=t,this._parents=n}function H(){return new R([[document.documentElement]],j)}function I(t){return"string"==typeof t?new R([[document.querySelector(t)]],[document.documentElement]):new R([[t]],j)}R.prototype=H.prototype={constructor:R,select:function(t){"function"!=typeof t&&(t=u(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,c,s=n[i],a=s.length,l=r[i]=new Array(a),f=0;f<a;++f)(o=s[f])&&(c=t.call(o,o.__data__,f,s))&&("__data__"in o&&(c.__data__=o.__data__),l[f]=c);return new R(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=s(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var u,c=n[o],a=c.length,l=0;l<a;++l)(u=c[l])&&(r.push(t.call(u,u.__data__,l,c)),i.push(u));return new R(r,i)},filter:function(t){"function"!=typeof t&&(t=a(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],c=u.length,s=r[i]=[],l=0;l<c;++l)(o=u[l])&&t.call(o,o.__data__,l,u)&&s.push(o);return new R(r,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),l=-1,this.each(function(t){d[++l]=t}),d;var e,r=n?_:p,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var u=o.length,c=new Array(u),s=new Array(u),a=new Array(u),l=0;l<u;++l){var f=i[l],h=o[l],v=h.length,d=t.call(f,f&&f.__data__,l,i),y=d.length,m=s[l]=new Array(y),g=c[l]=new Array(y);r(f,h,m,g,a[l]=new Array(v),d,n);for(var w,A,x=0,S=0;x<y;++x)if(w=m[x]){for(x>=S&&(S=x+1);!(A=g[S])&&++S<y;);w._next=A||null}}return(c=new R(c,i))._enter=s,c._exit=a,c},enter:function(){return new R(this._enter||this._groups.map(l),this._parents)},exit:function(){return new R(this._exit||this._groups.map(l),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),c=0;c<o;++c)for(var s,a=n[c],l=e[c],f=a.length,h=u[c]=new Array(f),p=0;p<f;++p)(s=a[p]||l[p])&&(h[p]=s);for(;c<r;++c)u[c]=n[c];return new R(u,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,u=i[o];--o>=0;)(r=i[o])&&(u&&4^r.compareDocumentPosition(u)&&u.parentNode.insertBefore(r,u),u=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=v);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var u,c=e[o],s=c.length,a=i[o]=new Array(s),l=0;l<s;++l)(u=c[l])&&(a[l]=u);a.sort(n)}return new R(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var u=r[i];if(u)return u}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],u=0,c=o.length;u<c;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},attr:function(t,n){var e=r(t);if(arguments.length<2){var i=this.node();return e.local?i.getAttributeNS(e.space,e.local):i.getAttribute(e)}return this.each((null==n?e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof n?e.local?function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}:function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}:e.local?function(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}:function(t,n){return function(){this.setAttribute(t,n)}})(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof n?function(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}:function(t,n,e){return function(){this.style.setProperty(t,n,e)}})(t,n,null==e?"":e)):y(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?function(t){return function(){delete this[t]}}:"function"==typeof n?function(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}:function(t,n){return function(){this[t]=n}})(t,n)):this.node()[t]},classed:function(t,n){var e=m(t+"");if(arguments.length<2){for(var r=g(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?function(t,n){return function(){(n.apply(this,arguments)?A:x)(this,t)}}:n?function(t){return function(){A(this,t)}}:function(t){return function(){x(this,t)}})(e,n))},text:function(t){return arguments.length?this.each(null==t?S:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?b:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(E)},lower:function(){return this.each(N)},append:function(t){var n="function"==typeof t?t:i(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:i(t),r=null==n?P:"function"==typeof n?n:u(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(C)},clone:function(t){return this.select(t?T:L)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=function(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}(t+""),u=o.length;if(!(arguments.length<2)){for(c=n?O:M,null==e&&(e=!1),r=0;r<u;++r)this.each(c(o[r],n,e));return this}var c=this.node().__on;if(c)for(var s,a=0,l=c.length;a<l;++a)for(r=0,s=c[a];r<u;++r)if((i=o[r]).type===s.type&&i.name===s.name)return s.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return V(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return V(this,t,n)}})(t,n))}};var U=0;function z(){return new G}function G(){this._="@"+(++U).toString(36)}function X(){for(var n,e=t.event;n=e.sourceEvent;)e=n;return e}function k(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]}G.prototype=z.prototype={constructor:G,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}},t.create=function(t){return I(i(t).call(document.documentElement))},t.creator=i,t.local=z,t.matcher=a,t.mouse=function(t){var n=X();return n.changedTouches&&(n=n.changedTouches[0]),k(t,n)},t.namespace=r,t.namespaces=e,t.clientPoint=k,t.select=I,t.selectAll=function(t){return"string"==typeof t?new R([document.querySelectorAll(t)],[document.documentElement]):new R([null==t?[]:t],j)},t.selection=H,t.selector=u,t.selectorAll=s,t.style=y,t.touch=function(t,n,e){arguments.length<3&&(e=n,n=X().changedTouches);for(var r,i=0,o=n?n.length:0;i<o;++i)if((r=n[i]).identifier===e)return k(t,r);return null},t.touches=function(t,n){null==n&&(n=X().touches);for(var e=0,r=n?n.length:0,i=new Array(r);e<r;++e)i[e]=k(t,n[e]);return i},t.window=d,t.customEvent=function(n,e,r,i){var o=t.event;n.sourceEvent=t.event,t.event=n;try{return e.apply(r,i)}finally{t.event=o}},Object.defineProperty(t,"__esModule",{value:!0})});

},{}],29:[function(require,module,exports){
!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("d3-path")):"function"==typeof define&&define.amd?define(["exports","d3-path"],n):n(t.d3=t.d3||{},t.d3)}(this,function(t,n){"use strict";function i(t){return function(){return t}}var e=Math.abs,s=Math.atan2,h=Math.cos,o=Math.max,_=Math.min,r=Math.sin,a=Math.sqrt,c=1e-12,l=Math.PI,u=l/2,f=2*l;function x(t){return t>=1?u:t<=-1?-u:Math.asin(t)}function y(t){return t.innerRadius}function p(t){return t.outerRadius}function v(t){return t.startAngle}function d(t){return t.endAngle}function T(t){return t&&t.padAngle}function g(t,n,i,e,s,h,_){var r=t-i,c=n-e,l=(_?h:-h)/a(r*r+c*c),u=l*c,f=-l*r,x=t+u,y=n+f,p=i+u,v=e+f,d=(x+p)/2,T=(y+v)/2,g=p-x,b=v-y,w=g*g+b*b,k=s-h,m=x*v-p*y,N=(b<0?-1:1)*a(o(0,k*k*w-m*m)),M=(m*b-g*N)/w,S=(-m*g-b*N)/w,E=(m*b+g*N)/w,A=(-m*g+b*N)/w,P=M-d,C=S-T,O=E-d,R=A-T;return P*P+C*C>O*O+R*R&&(M=E,S=A),{cx:M,cy:S,x01:-u,y01:-f,x11:M*(s/k-1),y11:S*(s/k-1)}}function b(t){this._context=t}function w(t){return new b(t)}function k(t){return t[0]}function m(t){return t[1]}function N(){var t=k,e=m,s=i(!0),h=null,o=w,_=null;function r(i){var r,a,c,l=i.length,u=!1;for(null==h&&(_=o(c=n.path())),r=0;r<=l;++r)!(r<l&&s(a=i[r],r,i))===u&&((u=!u)?_.lineStart():_.lineEnd()),u&&_.point(+t(a,r,i),+e(a,r,i));if(c)return _=null,c+""||null}return r.x=function(n){return arguments.length?(t="function"==typeof n?n:i(+n),r):t},r.y=function(t){return arguments.length?(e="function"==typeof t?t:i(+t),r):e},r.defined=function(t){return arguments.length?(s="function"==typeof t?t:i(!!t),r):s},r.curve=function(t){return arguments.length?(o=t,null!=h&&(_=o(h)),r):o},r.context=function(t){return arguments.length?(null==t?h=_=null:_=o(h=t),r):h},r}function M(){var t=k,e=null,s=i(0),h=m,o=i(!0),_=null,r=w,a=null;function c(i){var c,l,u,f,x,y=i.length,p=!1,v=new Array(y),d=new Array(y);for(null==_&&(a=r(x=n.path())),c=0;c<=y;++c){if(!(c<y&&o(f=i[c],c,i))===p)if(p=!p)l=c,a.areaStart(),a.lineStart();else{for(a.lineEnd(),a.lineStart(),u=c-1;u>=l;--u)a.point(v[u],d[u]);a.lineEnd(),a.areaEnd()}p&&(v[c]=+t(f,c,i),d[c]=+s(f,c,i),a.point(e?+e(f,c,i):v[c],h?+h(f,c,i):d[c]))}if(x)return a=null,x+""||null}function l(){return N().defined(o).curve(r).context(_)}return c.x=function(n){return arguments.length?(t="function"==typeof n?n:i(+n),e=null,c):t},c.x0=function(n){return arguments.length?(t="function"==typeof n?n:i(+n),c):t},c.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:i(+t),c):e},c.y=function(t){return arguments.length?(s="function"==typeof t?t:i(+t),h=null,c):s},c.y0=function(t){return arguments.length?(s="function"==typeof t?t:i(+t),c):s},c.y1=function(t){return arguments.length?(h=null==t?null:"function"==typeof t?t:i(+t),c):h},c.lineX0=c.lineY0=function(){return l().x(t).y(s)},c.lineY1=function(){return l().x(t).y(h)},c.lineX1=function(){return l().x(e).y(s)},c.defined=function(t){return arguments.length?(o="function"==typeof t?t:i(!!t),c):o},c.curve=function(t){return arguments.length?(r=t,null!=_&&(a=r(_)),c):r},c.context=function(t){return arguments.length?(null==t?_=a=null:a=r(_=t),c):_},c}function S(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}function E(t){return t}b.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var A=C(w);function P(t){this._curve=t}function C(t){function n(n){return new P(t(n))}return n._curve=t,n}function O(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(C(t)):n()._curve},t}function R(){return O(N().curve(A))}function q(){var t=M().curve(A),n=t.curve,i=t.lineX0,e=t.lineX1,s=t.lineY0,h=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return O(i())},delete t.lineX0,t.lineEndAngle=function(){return O(e())},delete t.lineX1,t.lineInnerRadius=function(){return O(s())},delete t.lineY0,t.lineOuterRadius=function(){return O(h())},delete t.lineY1,t.curve=function(t){return arguments.length?n(C(t)):n()._curve},t}function z(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]}P.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};var X=Array.prototype.slice;function Y(t){return t.source}function B(t){return t.target}function I(t){var e=Y,s=B,h=k,o=m,_=null;function r(){var i,r=X.call(arguments),a=e.apply(this,r),c=s.apply(this,r);if(_||(_=i=n.path()),t(_,+h.apply(this,(r[0]=a,r)),+o.apply(this,r),+h.apply(this,(r[0]=c,r)),+o.apply(this,r)),i)return _=null,i+""||null}return r.source=function(t){return arguments.length?(e=t,r):e},r.target=function(t){return arguments.length?(s=t,r):s},r.x=function(t){return arguments.length?(h="function"==typeof t?t:i(+t),r):h},r.y=function(t){return arguments.length?(o="function"==typeof t?t:i(+t),r):o},r.context=function(t){return arguments.length?(_=null==t?null:t,r):_},r}function j(t,n,i,e,s){t.moveTo(n,i),t.bezierCurveTo(n=(n+e)/2,i,n,s,e,s)}function D(t,n,i,e,s){t.moveTo(n,i),t.bezierCurveTo(n,i=(i+s)/2,e,i,e,s)}function L(t,n,i,e,s){var h=z(n,i),o=z(n,i=(i+s)/2),_=z(e,i),r=z(e,s);t.moveTo(h[0],h[1]),t.bezierCurveTo(o[0],o[1],_[0],_[1],r[0],r[1])}var V={draw:function(t,n){var i=Math.sqrt(n/l);t.moveTo(i,0),t.arc(0,0,i,0,f)}},W={draw:function(t,n){var i=Math.sqrt(n/5)/2;t.moveTo(-3*i,-i),t.lineTo(-i,-i),t.lineTo(-i,-3*i),t.lineTo(i,-3*i),t.lineTo(i,-i),t.lineTo(3*i,-i),t.lineTo(3*i,i),t.lineTo(i,i),t.lineTo(i,3*i),t.lineTo(-i,3*i),t.lineTo(-i,i),t.lineTo(-3*i,i),t.closePath()}},H=Math.sqrt(1/3),F=2*H,G={draw:function(t,n){var i=Math.sqrt(n/F),e=i*H;t.moveTo(0,-i),t.lineTo(e,0),t.lineTo(0,i),t.lineTo(-e,0),t.closePath()}},J=Math.sin(l/10)/Math.sin(7*l/10),K=Math.sin(f/10)*J,Q=-Math.cos(f/10)*J,U={draw:function(t,n){var i=Math.sqrt(.8908130915292852*n),e=K*i,s=Q*i;t.moveTo(0,-i),t.lineTo(e,s);for(var h=1;h<5;++h){var o=f*h/5,_=Math.cos(o),r=Math.sin(o);t.lineTo(r*i,-_*i),t.lineTo(_*e-r*s,r*e+_*s)}t.closePath()}},Z={draw:function(t,n){var i=Math.sqrt(n),e=-i/2;t.rect(e,e,i,i)}},$=Math.sqrt(3),tt={draw:function(t,n){var i=-Math.sqrt(n/(3*$));t.moveTo(0,2*i),t.lineTo(-$*i,-i),t.lineTo($*i,-i),t.closePath()}},nt=-.5,it=Math.sqrt(3)/2,et=1/Math.sqrt(12),st=3*(et/2+1),ht={draw:function(t,n){var i=Math.sqrt(n/st),e=i/2,s=i*et,h=e,o=i*et+i,_=-h,r=o;t.moveTo(e,s),t.lineTo(h,o),t.lineTo(_,r),t.lineTo(nt*e-it*s,it*e+nt*s),t.lineTo(nt*h-it*o,it*h+nt*o),t.lineTo(nt*_-it*r,it*_+nt*r),t.lineTo(nt*e+it*s,nt*s-it*e),t.lineTo(nt*h+it*o,nt*o-it*h),t.lineTo(nt*_+it*r,nt*r-it*_),t.closePath()}},ot=[V,W,G,Z,U,tt,ht];function _t(){}function rt(t,n,i){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+i)/6)}function at(t){this._context=t}function ct(t){this._context=t}function lt(t){this._context=t}function ut(t,n){this._basis=new at(t),this._beta=n}at.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:rt(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:rt(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},ct.prototype={areaStart:_t,areaEnd:_t,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:rt(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},lt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var i=(this._x0+4*this._x1+t)/6,e=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(i,e):this._context.moveTo(i,e);break;case 3:this._point=4;default:rt(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},ut.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,i=t.length-1;if(i>0)for(var e,s=t[0],h=n[0],o=t[i]-s,_=n[i]-h,r=-1;++r<=i;)e=r/i,this._basis.point(this._beta*t[r]+(1-this._beta)*(s+e*o),this._beta*n[r]+(1-this._beta)*(h+e*_));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var ft=function t(n){function i(t){return 1===n?new at(t):new ut(t,n)}return i.beta=function(n){return t(+n)},i}(.85);function xt(t,n,i){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-i),t._x2,t._y2)}function yt(t,n){this._context=t,this._k=(1-n)/6}yt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:xt(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:xt(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var pt=function t(n){function i(t){return new yt(t,n)}return i.tension=function(n){return t(+n)},i}(0);function vt(t,n){this._context=t,this._k=(1-n)/6}vt.prototype={areaStart:_t,areaEnd:_t,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:xt(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var dt=function t(n){function i(t){return new vt(t,n)}return i.tension=function(n){return t(+n)},i}(0);function Tt(t,n){this._context=t,this._k=(1-n)/6}Tt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:xt(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var gt=function t(n){function i(t){return new Tt(t,n)}return i.tension=function(n){return t(+n)},i}(0);function bt(t,n,i){var e=t._x1,s=t._y1,h=t._x2,o=t._y2;if(t._l01_a>c){var _=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,r=3*t._l01_a*(t._l01_a+t._l12_a);e=(e*_-t._x0*t._l12_2a+t._x2*t._l01_2a)/r,s=(s*_-t._y0*t._l12_2a+t._y2*t._l01_2a)/r}if(t._l23_a>c){var a=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,l=3*t._l23_a*(t._l23_a+t._l12_a);h=(h*a+t._x1*t._l23_2a-n*t._l12_2a)/l,o=(o*a+t._y1*t._l23_2a-i*t._l12_2a)/l}t._context.bezierCurveTo(e,s,h,o,t._x2,t._y2)}function wt(t,n){this._context=t,this._alpha=n}wt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var i=this._x2-t,e=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(i*i+e*e,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:bt(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var kt=function t(n){function i(t){return n?new wt(t,n):new yt(t,0)}return i.alpha=function(n){return t(+n)},i}(.5);function mt(t,n){this._context=t,this._alpha=n}mt.prototype={areaStart:_t,areaEnd:_t,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var i=this._x2-t,e=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(i*i+e*e,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:bt(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Nt=function t(n){function i(t){return n?new mt(t,n):new vt(t,0)}return i.alpha=function(n){return t(+n)},i}(.5);function Mt(t,n){this._context=t,this._alpha=n}Mt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var i=this._x2-t,e=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(i*i+e*e,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:bt(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var St=function t(n){function i(t){return n?new Mt(t,n):new Tt(t,0)}return i.alpha=function(n){return t(+n)},i}(.5);function Et(t){this._context=t}function At(t){return t<0?-1:1}function Pt(t,n,i){var e=t._x1-t._x0,s=n-t._x1,h=(t._y1-t._y0)/(e||s<0&&-0),o=(i-t._y1)/(s||e<0&&-0),_=(h*s+o*e)/(e+s);return(At(h)+At(o))*Math.min(Math.abs(h),Math.abs(o),.5*Math.abs(_))||0}function Ct(t,n){var i=t._x1-t._x0;return i?(3*(t._y1-t._y0)/i-n)/2:n}function Ot(t,n,i){var e=t._x0,s=t._y0,h=t._x1,o=t._y1,_=(h-e)/3;t._context.bezierCurveTo(e+_,s+_*n,h-_,o-_*i,h,o)}function Rt(t){this._context=t}function qt(t){this._context=new zt(t)}function zt(t){this._context=t}function Xt(t){this._context=t}function Yt(t){var n,i,e=t.length-1,s=new Array(e),h=new Array(e),o=new Array(e);for(s[0]=0,h[0]=2,o[0]=t[0]+2*t[1],n=1;n<e-1;++n)s[n]=1,h[n]=4,o[n]=4*t[n]+2*t[n+1];for(s[e-1]=2,h[e-1]=7,o[e-1]=8*t[e-1]+t[e],n=1;n<e;++n)i=s[n]/h[n-1],h[n]-=i,o[n]-=i*o[n-1];for(s[e-1]=o[e-1]/h[e-1],n=e-2;n>=0;--n)s[n]=(o[n]-s[n+1])/h[n];for(h[e-1]=(t[e]+s[e-1])/2,n=0;n<e-1;++n)h[n]=2*t[n+1]-s[n+1];return[s,h]}function Bt(t,n){this._context=t,this._t=n}function It(t,n){if((s=t.length)>1)for(var i,e,s,h=1,o=t[n[0]],_=o.length;h<s;++h)for(e=o,o=t[n[h]],i=0;i<_;++i)o[i][1]+=o[i][0]=isNaN(e[i][1])?e[i][0]:e[i][1]}function jt(t){for(var n=t.length,i=new Array(n);--n>=0;)i[n]=n;return i}function Dt(t,n){return t[n]}function Lt(t){var n=t.map(Vt);return jt(t).sort(function(t,i){return n[t]-n[i]})}function Vt(t){for(var n,i=-1,e=0,s=t.length,h=-1/0;++i<s;)(n=+t[i][1])>h&&(h=n,e=i);return e}function Wt(t){var n=t.map(Ht);return jt(t).sort(function(t,i){return n[t]-n[i]})}function Ht(t){for(var n,i=0,e=-1,s=t.length;++e<s;)(n=+t[e][1])&&(i+=n);return i}Et.prototype={areaStart:_t,areaEnd:_t,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}},Rt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Ot(this,this._t0,Ct(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var i=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Ot(this,Ct(this,i=Pt(this,t,n)),i);break;default:Ot(this,this._t0,i=Pt(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=i}}},(qt.prototype=Object.create(Rt.prototype)).point=function(t,n){Rt.prototype.point.call(this,n,t)},zt.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,i,e,s,h){this._context.bezierCurveTo(n,t,e,i,h,s)}},Xt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,i=t.length;if(i)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===i)this._context.lineTo(t[1],n[1]);else for(var e=Yt(t),s=Yt(n),h=0,o=1;o<i;++h,++o)this._context.bezierCurveTo(e[0][h],s[0][h],e[1][h],s[1][h],t[o],n[o]);(this._line||0!==this._line&&1===i)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}},Bt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var i=this._x*(1-this._t)+t*this._t;this._context.lineTo(i,this._y),this._context.lineTo(i,n)}}this._x=t,this._y=n}},t.arc=function(){var t=y,o=p,b=i(0),w=null,k=v,m=d,N=T,M=null;function S(){var i,y,p,v=+t.apply(this,arguments),d=+o.apply(this,arguments),T=k.apply(this,arguments)-u,S=m.apply(this,arguments)-u,E=e(S-T),A=S>T;if(M||(M=i=n.path()),d<v&&(y=d,d=v,v=y),d>c)if(E>f-c)M.moveTo(d*h(T),d*r(T)),M.arc(0,0,d,T,S,!A),v>c&&(M.moveTo(v*h(S),v*r(S)),M.arc(0,0,v,S,T,A));else{var P,C,O=T,R=S,q=T,z=S,X=E,Y=E,B=N.apply(this,arguments)/2,I=B>c&&(w?+w.apply(this,arguments):a(v*v+d*d)),j=_(e(d-v)/2,+b.apply(this,arguments)),D=j,L=j;if(I>c){var V=x(I/v*r(B)),W=x(I/d*r(B));(X-=2*V)>c?(q+=V*=A?1:-1,z-=V):(X=0,q=z=(T+S)/2),(Y-=2*W)>c?(O+=W*=A?1:-1,R-=W):(Y=0,O=R=(T+S)/2)}var H=d*h(O),F=d*r(O),G=v*h(z),J=v*r(z);if(j>c){var K,Q=d*h(R),U=d*r(R),Z=v*h(q),$=v*r(q);if(E<l&&(K=function(t,n,i,e,s,h,o,_){var r=i-t,a=e-n,l=o-s,u=_-h,f=u*r-l*a;if(!(f*f<c))return[t+(f=(l*(n-h)-u*(t-s))/f)*r,n+f*a]}(H,F,Z,$,Q,U,G,J))){var tt=H-K[0],nt=F-K[1],it=Q-K[0],et=U-K[1],st=1/r(((p=(tt*it+nt*et)/(a(tt*tt+nt*nt)*a(it*it+et*et)))>1?0:p<-1?l:Math.acos(p))/2),ht=a(K[0]*K[0]+K[1]*K[1]);D=_(j,(v-ht)/(st-1)),L=_(j,(d-ht)/(st+1))}}Y>c?L>c?(P=g(Z,$,H,F,d,L,A),C=g(Q,U,G,J,d,L,A),M.moveTo(P.cx+P.x01,P.cy+P.y01),L<j?M.arc(P.cx,P.cy,L,s(P.y01,P.x01),s(C.y01,C.x01),!A):(M.arc(P.cx,P.cy,L,s(P.y01,P.x01),s(P.y11,P.x11),!A),M.arc(0,0,d,s(P.cy+P.y11,P.cx+P.x11),s(C.cy+C.y11,C.cx+C.x11),!A),M.arc(C.cx,C.cy,L,s(C.y11,C.x11),s(C.y01,C.x01),!A))):(M.moveTo(H,F),M.arc(0,0,d,O,R,!A)):M.moveTo(H,F),v>c&&X>c?D>c?(P=g(G,J,Q,U,v,-D,A),C=g(H,F,Z,$,v,-D,A),M.lineTo(P.cx+P.x01,P.cy+P.y01),D<j?M.arc(P.cx,P.cy,D,s(P.y01,P.x01),s(C.y01,C.x01),!A):(M.arc(P.cx,P.cy,D,s(P.y01,P.x01),s(P.y11,P.x11),!A),M.arc(0,0,v,s(P.cy+P.y11,P.cx+P.x11),s(C.cy+C.y11,C.cx+C.x11),A),M.arc(C.cx,C.cy,D,s(C.y11,C.x11),s(C.y01,C.x01),!A))):M.arc(0,0,v,z,q,A):M.lineTo(G,J)}else M.moveTo(0,0);if(M.closePath(),i)return M=null,i+""||null}return S.centroid=function(){var n=(+t.apply(this,arguments)+ +o.apply(this,arguments))/2,i=(+k.apply(this,arguments)+ +m.apply(this,arguments))/2-l/2;return[h(i)*n,r(i)*n]},S.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:i(+n),S):t},S.outerRadius=function(t){return arguments.length?(o="function"==typeof t?t:i(+t),S):o},S.cornerRadius=function(t){return arguments.length?(b="function"==typeof t?t:i(+t),S):b},S.padRadius=function(t){return arguments.length?(w=null==t?null:"function"==typeof t?t:i(+t),S):w},S.startAngle=function(t){return arguments.length?(k="function"==typeof t?t:i(+t),S):k},S.endAngle=function(t){return arguments.length?(m="function"==typeof t?t:i(+t),S):m},S.padAngle=function(t){return arguments.length?(N="function"==typeof t?t:i(+t),S):N},S.context=function(t){return arguments.length?(M=null==t?null:t,S):M},S},t.area=M,t.line=N,t.pie=function(){var t=E,n=S,e=null,s=i(0),h=i(f),o=i(0);function _(i){var _,r,a,c,l,u=i.length,x=0,y=new Array(u),p=new Array(u),v=+s.apply(this,arguments),d=Math.min(f,Math.max(-f,h.apply(this,arguments)-v)),T=Math.min(Math.abs(d)/u,o.apply(this,arguments)),g=T*(d<0?-1:1);for(_=0;_<u;++_)(l=p[y[_]=_]=+t(i[_],_,i))>0&&(x+=l);for(null!=n?y.sort(function(t,i){return n(p[t],p[i])}):null!=e&&y.sort(function(t,n){return e(i[t],i[n])}),_=0,a=x?(d-u*g)/x:0;_<u;++_,v=c)r=y[_],c=v+((l=p[r])>0?l*a:0)+g,p[r]={data:i[r],index:_,value:l,startAngle:v,endAngle:c,padAngle:T};return p}return _.value=function(n){return arguments.length?(t="function"==typeof n?n:i(+n),_):t},_.sortValues=function(t){return arguments.length?(n=t,e=null,_):n},_.sort=function(t){return arguments.length?(e=t,n=null,_):e},_.startAngle=function(t){return arguments.length?(s="function"==typeof t?t:i(+t),_):s},_.endAngle=function(t){return arguments.length?(h="function"==typeof t?t:i(+t),_):h},_.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:i(+t),_):o},_},t.areaRadial=q,t.radialArea=q,t.lineRadial=R,t.radialLine=R,t.pointRadial=z,t.linkHorizontal=function(){return I(j)},t.linkVertical=function(){return I(D)},t.linkRadial=function(){var t=I(L);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t},t.symbol=function(){var t=i(V),e=i(64),s=null;function h(){var i;if(s||(s=i=n.path()),t.apply(this,arguments).draw(s,+e.apply(this,arguments)),i)return s=null,i+""||null}return h.type=function(n){return arguments.length?(t="function"==typeof n?n:i(n),h):t},h.size=function(t){return arguments.length?(e="function"==typeof t?t:i(+t),h):e},h.context=function(t){return arguments.length?(s=null==t?null:t,h):s},h},t.symbols=ot,t.symbolCircle=V,t.symbolCross=W,t.symbolDiamond=G,t.symbolSquare=Z,t.symbolStar=U,t.symbolTriangle=tt,t.symbolWye=ht,t.curveBasisClosed=function(t){return new ct(t)},t.curveBasisOpen=function(t){return new lt(t)},t.curveBasis=function(t){return new at(t)},t.curveBundle=ft,t.curveCardinalClosed=dt,t.curveCardinalOpen=gt,t.curveCardinal=pt,t.curveCatmullRomClosed=Nt,t.curveCatmullRomOpen=St,t.curveCatmullRom=kt,t.curveLinearClosed=function(t){return new Et(t)},t.curveLinear=w,t.curveMonotoneX=function(t){return new Rt(t)},t.curveMonotoneY=function(t){return new qt(t)},t.curveNatural=function(t){return new Xt(t)},t.curveStep=function(t){return new Bt(t,.5)},t.curveStepAfter=function(t){return new Bt(t,1)},t.curveStepBefore=function(t){return new Bt(t,0)},t.stack=function(){var t=i([]),n=jt,e=It,s=Dt;function h(i){var h,o,_=t.apply(this,arguments),r=i.length,a=_.length,c=new Array(a);for(h=0;h<a;++h){for(var l,u=_[h],f=c[h]=new Array(r),x=0;x<r;++x)f[x]=l=[0,+s(i[x],u,x,i)],l.data=i[x];f.key=u}for(h=0,o=n(c);h<a;++h)c[o[h]].index=h;return e(c,o),c}return h.keys=function(n){return arguments.length?(t="function"==typeof n?n:i(X.call(n)),h):t},h.value=function(t){return arguments.length?(s="function"==typeof t?t:i(+t),h):s},h.order=function(t){return arguments.length?(n=null==t?jt:"function"==typeof t?t:i(X.call(t)),h):n},h.offset=function(t){return arguments.length?(e=null==t?It:t,h):e},h},t.stackOffsetExpand=function(t,n){if((e=t.length)>0){for(var i,e,s,h=0,o=t[0].length;h<o;++h){for(s=i=0;i<e;++i)s+=t[i][h][1]||0;if(s)for(i=0;i<e;++i)t[i][h][1]/=s}It(t,n)}},t.stackOffsetDiverging=function(t,n){if((_=t.length)>1)for(var i,e,s,h,o,_,r=0,a=t[n[0]].length;r<a;++r)for(h=o=0,i=0;i<_;++i)(s=(e=t[n[i]][r])[1]-e[0])>=0?(e[0]=h,e[1]=h+=s):s<0?(e[1]=o,e[0]=o+=s):e[0]=h},t.stackOffsetNone=It,t.stackOffsetSilhouette=function(t,n){if((i=t.length)>0){for(var i,e=0,s=t[n[0]],h=s.length;e<h;++e){for(var o=0,_=0;o<i;++o)_+=t[o][e][1]||0;s[e][1]+=s[e][0]=-_/2}It(t,n)}},t.stackOffsetWiggle=function(t,n){if((s=t.length)>0&&(e=(i=t[n[0]]).length)>0){for(var i,e,s,h=0,o=1;o<e;++o){for(var _=0,r=0,a=0;_<s;++_){for(var c=t[n[_]],l=c[o][1]||0,u=(l-(c[o-1][1]||0))/2,f=0;f<_;++f){var x=t[n[f]];u+=(x[o][1]||0)-(x[o-1][1]||0)}r+=l,a+=u*l}i[o-1][1]+=i[o-1][0]=h,r&&(h-=a/r)}i[o-1][1]+=i[o-1][0]=h,It(t,n)}},t.stackOrderAppearance=Lt,t.stackOrderAscending=Wt,t.stackOrderDescending=function(t){return Wt(t).reverse()},t.stackOrderInsideOut=function(t){var n,i,e=t.length,s=t.map(Ht),h=Lt(t),o=0,_=0,r=[],a=[];for(n=0;n<e;++n)i=h[n],o<_?(o+=s[i],r.push(i)):(_+=s[i],a.push(i));return a.reverse().concat(r)},t.stackOrderNone=jt,t.stackOrderReverse=function(t){return jt(t).reverse()},Object.defineProperty(t,"__esModule",{value:!0})});

},{"d3-path":22}],30:[function(require,module,exports){
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("d3-time")):"function"==typeof define&&define.amd?define(["exports","d3-time"],t):t(e.d3=e.d3||{},e.d3)}(this,function(e,t){"use strict";function n(e){if(0<=e.y&&e.y<100){var t=new Date(-1,e.m,e.d,e.H,e.M,e.S,e.L);return t.setFullYear(e.y),t}return new Date(e.y,e.m,e.d,e.H,e.M,e.S,e.L)}function r(e){if(0<=e.y&&e.y<100){var t=new Date(Date.UTC(-1,e.m,e.d,e.H,e.M,e.S,e.L));return t.setUTCFullYear(e.y),t}return new Date(Date.UTC(e.y,e.m,e.d,e.H,e.M,e.S,e.L))}function u(e){return{y:e,m:0,d:1,H:0,M:0,S:0,L:0}}function c(e){var c=e.dateTime,i=e.date,a=e.time,f=e.periods,l=e.days,s=e.shortDays,g=e.months,ve=e.shortMonths,Me=y(f),Te=d(f),De=y(l),Ce=d(l),xe=y(s),Ue=d(s),pe=y(g),we=d(g),Se=y(ve),Ye=d(ve),Fe={a:function(e){return s[e.getDay()]},A:function(e){return l[e.getDay()]},b:function(e){return ve[e.getMonth()]},B:function(e){return g[e.getMonth()]},c:null,d:W,e:W,f:I,H:V,I:j,j:P,L:Q,m:J,M:O,p:function(e){return f[+(e.getHours()>=12)]},Q:he,s:me,S:X,u:N,U:B,V:_,w:$,W:q,x:null,X:null,y:z,Y:E,Z:R,"%":de},He={a:function(e){return s[e.getUTCDay()]},A:function(e){return l[e.getUTCDay()]},b:function(e){return ve[e.getUTCMonth()]},B:function(e){return g[e.getUTCMonth()]},c:null,d:k,e:k,f:ne,H:G,I:K,j:ee,L:te,m:re,M:ue,p:function(e){return f[+(e.getUTCHours()>=12)]},Q:he,s:me,S:ce,u:ie,U:oe,V:ae,w:fe,W:le,x:null,X:null,y:se,Y:ge,Z:ye,"%":de},Le={a:function(e,t,n){var r=xe.exec(t.slice(n));return r?(e.w=Ue[r[0].toLowerCase()],n+r[0].length):-1},A:function(e,t,n){var r=De.exec(t.slice(n));return r?(e.w=Ce[r[0].toLowerCase()],n+r[0].length):-1},b:function(e,t,n){var r=Se.exec(t.slice(n));return r?(e.m=Ye[r[0].toLowerCase()],n+r[0].length):-1},B:function(e,t,n){var r=pe.exec(t.slice(n));return r?(e.m=we[r[0].toLowerCase()],n+r[0].length):-1},c:function(e,t,n){return be(e,c,t,n)},d:p,e:p,f:L,H:S,I:S,j:w,L:H,m:U,M:Y,p:function(e,t,n){var r=Me.exec(t.slice(n));return r?(e.p=Te[r[0].toLowerCase()],n+r[0].length):-1},Q:Z,s:b,S:F,u:m,U:v,V:M,w:h,W:T,x:function(e,t,n){return be(e,i,t,n)},X:function(e,t,n){return be(e,a,t,n)},y:C,Y:D,Z:x,"%":A};function Ae(e,t){return function(n){var r,u,c,i=[],a=-1,f=0,l=e.length;for(n instanceof Date||(n=new Date(+n));++a<l;)37===e.charCodeAt(a)&&(i.push(e.slice(f,a)),null!=(u=o[r=e.charAt(++a)])?r=e.charAt(++a):u="e"===r?" ":"0",(c=t[r])&&(r=c(n,u)),i.push(r),f=a+1);return i.push(e.slice(f,a)),i.join("")}}function Ze(e,n){return function(c){var i,o,a=u(1900);if(be(a,e,c+="",0)!=c.length)return null;if("Q"in a)return new Date(a.Q);if("p"in a&&(a.H=a.H%12+12*a.p),"V"in a){if(a.V<1||a.V>53)return null;"w"in a||(a.w=1),"Z"in a?(o=(i=r(u(a.y))).getUTCDay(),i=o>4||0===o?t.utcMonday.ceil(i):t.utcMonday(i),i=t.utcDay.offset(i,7*(a.V-1)),a.y=i.getUTCFullYear(),a.m=i.getUTCMonth(),a.d=i.getUTCDate()+(a.w+6)%7):(o=(i=n(u(a.y))).getDay(),i=o>4||0===o?t.timeMonday.ceil(i):t.timeMonday(i),i=t.timeDay.offset(i,7*(a.V-1)),a.y=i.getFullYear(),a.m=i.getMonth(),a.d=i.getDate()+(a.w+6)%7)}else("W"in a||"U"in a)&&("w"in a||(a.w="u"in a?a.u%7:"W"in a?1:0),o="Z"in a?r(u(a.y)).getUTCDay():n(u(a.y)).getDay(),a.m=0,a.d="W"in a?(a.w+6)%7+7*a.W-(o+5)%7:a.w+7*a.U-(o+6)%7);return"Z"in a?(a.H+=a.Z/100|0,a.M+=a.Z%100,r(a)):n(a)}}function be(e,t,n,r){for(var u,c,i=0,a=t.length,f=n.length;i<a;){if(r>=f)return-1;if(37===(u=t.charCodeAt(i++))){if(u=t.charAt(i++),!(c=Le[u in o?t.charAt(i++):u])||(r=c(e,n,r))<0)return-1}else if(u!=n.charCodeAt(r++))return-1}return r}return Fe.x=Ae(i,Fe),Fe.X=Ae(a,Fe),Fe.c=Ae(c,Fe),He.x=Ae(i,He),He.X=Ae(a,He),He.c=Ae(c,He),{format:function(e){var t=Ae(e+="",Fe);return t.toString=function(){return e},t},parse:function(e){var t=Ze(e+="",n);return t.toString=function(){return e},t},utcFormat:function(e){var t=Ae(e+="",He);return t.toString=function(){return e},t},utcParse:function(e){var t=Ze(e,r);return t.toString=function(){return e},t}}}var i,o={"-":"",_:" ",0:"0"},a=/^\s*\d+/,f=/^%/,l=/[\\^$*+?|[\]().{}]/g;function s(e,t,n){var r=e<0?"-":"",u=(r?-e:e)+"",c=u.length;return r+(c<n?new Array(n-c+1).join(t)+u:u)}function g(e){return e.replace(l,"\\$&")}function y(e){return new RegExp("^(?:"+e.map(g).join("|")+")","i")}function d(e){for(var t={},n=-1,r=e.length;++n<r;)t[e[n].toLowerCase()]=n;return t}function h(e,t,n){var r=a.exec(t.slice(n,n+1));return r?(e.w=+r[0],n+r[0].length):-1}function m(e,t,n){var r=a.exec(t.slice(n,n+1));return r?(e.u=+r[0],n+r[0].length):-1}function v(e,t,n){var r=a.exec(t.slice(n,n+2));return r?(e.U=+r[0],n+r[0].length):-1}function M(e,t,n){var r=a.exec(t.slice(n,n+2));return r?(e.V=+r[0],n+r[0].length):-1}function T(e,t,n){var r=a.exec(t.slice(n,n+2));return r?(e.W=+r[0],n+r[0].length):-1}function D(e,t,n){var r=a.exec(t.slice(n,n+4));return r?(e.y=+r[0],n+r[0].length):-1}function C(e,t,n){var r=a.exec(t.slice(n,n+2));return r?(e.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function x(e,t,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(t.slice(n,n+6));return r?(e.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function U(e,t,n){var r=a.exec(t.slice(n,n+2));return r?(e.m=r[0]-1,n+r[0].length):-1}function p(e,t,n){var r=a.exec(t.slice(n,n+2));return r?(e.d=+r[0],n+r[0].length):-1}function w(e,t,n){var r=a.exec(t.slice(n,n+3));return r?(e.m=0,e.d=+r[0],n+r[0].length):-1}function S(e,t,n){var r=a.exec(t.slice(n,n+2));return r?(e.H=+r[0],n+r[0].length):-1}function Y(e,t,n){var r=a.exec(t.slice(n,n+2));return r?(e.M=+r[0],n+r[0].length):-1}function F(e,t,n){var r=a.exec(t.slice(n,n+2));return r?(e.S=+r[0],n+r[0].length):-1}function H(e,t,n){var r=a.exec(t.slice(n,n+3));return r?(e.L=+r[0],n+r[0].length):-1}function L(e,t,n){var r=a.exec(t.slice(n,n+6));return r?(e.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function A(e,t,n){var r=f.exec(t.slice(n,n+1));return r?n+r[0].length:-1}function Z(e,t,n){var r=a.exec(t.slice(n));return r?(e.Q=+r[0],n+r[0].length):-1}function b(e,t,n){var r=a.exec(t.slice(n));return r?(e.Q=1e3*+r[0],n+r[0].length):-1}function W(e,t){return s(e.getDate(),t,2)}function V(e,t){return s(e.getHours(),t,2)}function j(e,t){return s(e.getHours()%12||12,t,2)}function P(e,n){return s(1+t.timeDay.count(t.timeYear(e),e),n,3)}function Q(e,t){return s(e.getMilliseconds(),t,3)}function I(e,t){return Q(e,t)+"000"}function J(e,t){return s(e.getMonth()+1,t,2)}function O(e,t){return s(e.getMinutes(),t,2)}function X(e,t){return s(e.getSeconds(),t,2)}function N(e){var t=e.getDay();return 0===t?7:t}function B(e,n){return s(t.timeSunday.count(t.timeYear(e),e),n,2)}function _(e,n){var r=e.getDay();return e=r>=4||0===r?t.timeThursday(e):t.timeThursday.ceil(e),s(t.timeThursday.count(t.timeYear(e),e)+(4===t.timeYear(e).getDay()),n,2)}function $(e){return e.getDay()}function q(e,n){return s(t.timeMonday.count(t.timeYear(e),e),n,2)}function z(e,t){return s(e.getFullYear()%100,t,2)}function E(e,t){return s(e.getFullYear()%1e4,t,4)}function R(e){var t=e.getTimezoneOffset();return(t>0?"-":(t*=-1,"+"))+s(t/60|0,"0",2)+s(t%60,"0",2)}function k(e,t){return s(e.getUTCDate(),t,2)}function G(e,t){return s(e.getUTCHours(),t,2)}function K(e,t){return s(e.getUTCHours()%12||12,t,2)}function ee(e,n){return s(1+t.utcDay.count(t.utcYear(e),e),n,3)}function te(e,t){return s(e.getUTCMilliseconds(),t,3)}function ne(e,t){return te(e,t)+"000"}function re(e,t){return s(e.getUTCMonth()+1,t,2)}function ue(e,t){return s(e.getUTCMinutes(),t,2)}function ce(e,t){return s(e.getUTCSeconds(),t,2)}function ie(e){var t=e.getUTCDay();return 0===t?7:t}function oe(e,n){return s(t.utcSunday.count(t.utcYear(e),e),n,2)}function ae(e,n){var r=e.getUTCDay();return e=r>=4||0===r?t.utcThursday(e):t.utcThursday.ceil(e),s(t.utcThursday.count(t.utcYear(e),e)+(4===t.utcYear(e).getUTCDay()),n,2)}function fe(e){return e.getUTCDay()}function le(e,n){return s(t.utcMonday.count(t.utcYear(e),e),n,2)}function se(e,t){return s(e.getUTCFullYear()%100,t,2)}function ge(e,t){return s(e.getUTCFullYear()%1e4,t,4)}function ye(){return"+0000"}function de(){return"%"}function he(e){return+e}function me(e){return Math.floor(+e/1e3)}function ve(t){return i=c(t),e.timeFormat=i.format,e.timeParse=i.parse,e.utcFormat=i.utcFormat,e.utcParse=i.utcParse,i}ve({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var Me=Date.prototype.toISOString?function(e){return e.toISOString()}:e.utcFormat("%Y-%m-%dT%H:%M:%S.%LZ");var Te=+new Date("2000-01-01T00:00:00.000Z")?function(e){var t=new Date(e);return isNaN(t)?null:t}:e.utcParse("%Y-%m-%dT%H:%M:%S.%LZ");e.timeFormatDefaultLocale=ve,e.timeFormatLocale=c,e.isoFormat=Me,e.isoParse=Te,Object.defineProperty(e,"__esModule",{value:!0})});

},{"d3-time":31}],31:[function(require,module,exports){
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(e.d3=e.d3||{})}(this,function(e){"use strict";var t=new Date,n=new Date;function u(e,r,i,o){function s(t){return e(t=new Date(+t)),t}return s.floor=s,s.ceil=function(t){return e(t=new Date(t-1)),r(t,1),e(t),t},s.round=function(e){var t=s(e),n=s.ceil(e);return e-t<n-e?t:n},s.offset=function(e,t){return r(e=new Date(+e),null==t?1:Math.floor(t)),e},s.range=function(t,n,u){var i,o=[];if(t=s.ceil(t),u=null==u?1:Math.floor(u),!(t<n&&u>0))return o;do{o.push(i=new Date(+t)),r(t,u),e(t)}while(i<t&&t<n);return o},s.filter=function(t){return u(function(n){if(n>=n)for(;e(n),!t(n);)n.setTime(n-1)},function(e,n){if(e>=e)if(n<0)for(;++n<=0;)for(;r(e,-1),!t(e););else for(;--n>=0;)for(;r(e,1),!t(e););})},i&&(s.count=function(u,r){return t.setTime(+u),n.setTime(+r),e(t),e(n),Math.floor(i(t,n))},s.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?s.filter(o?function(t){return o(t)%e==0}:function(t){return s.count(0,t)%e==0}):s:null}),s}var r=u(function(){},function(e,t){e.setTime(+e+t)},function(e,t){return t-e});r.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?u(function(t){t.setTime(Math.floor(t/e)*e)},function(t,n){t.setTime(+t+n*e)},function(t,n){return(n-t)/e}):r:null};var i=r.range,o=6e4,s=6048e5,a=u(function(e){e.setTime(e-e.getMilliseconds())},function(e,t){e.setTime(+e+1e3*t)},function(e,t){return(t-e)/1e3},function(e){return e.getUTCSeconds()}),c=a.range,f=u(function(e){e.setTime(e-e.getMilliseconds()-1e3*e.getSeconds())},function(e,t){e.setTime(+e+t*o)},function(e,t){return(t-e)/o},function(e){return e.getMinutes()}),l=f.range,g=u(function(e){e.setTime(e-e.getMilliseconds()-1e3*e.getSeconds()-e.getMinutes()*o)},function(e,t){e.setTime(+e+36e5*t)},function(e,t){return(t-e)/36e5},function(e){return e.getHours()}),T=g.range,d=u(function(e){e.setHours(0,0,0,0)},function(e,t){e.setDate(e.getDate()+t)},function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*o)/864e5},function(e){return e.getDate()-1}),m=d.range;function M(e){return u(function(t){t.setDate(t.getDate()-(t.getDay()+7-e)%7),t.setHours(0,0,0,0)},function(e,t){e.setDate(e.getDate()+7*t)},function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*o)/s})}var y=M(0),C=M(1),U=M(2),h=M(3),F=M(4),D=M(5),Y=M(6),H=y.range,S=C.range,v=U.range,p=h.range,W=F.range,w=D.range,O=Y.range,k=u(function(e){e.setDate(1),e.setHours(0,0,0,0)},function(e,t){e.setMonth(e.getMonth()+t)},function(e,t){return t.getMonth()-e.getMonth()+12*(t.getFullYear()-e.getFullYear())},function(e){return e.getMonth()}),z=k.range,x=u(function(e){e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,t){e.setFullYear(e.getFullYear()+t)},function(e,t){return t.getFullYear()-e.getFullYear()},function(e){return e.getFullYear()});x.every=function(e){return isFinite(e=Math.floor(e))&&e>0?u(function(t){t.setFullYear(Math.floor(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n*e)}):null};var b=x.range,j=u(function(e){e.setUTCSeconds(0,0)},function(e,t){e.setTime(+e+t*o)},function(e,t){return(t-e)/o},function(e){return e.getUTCMinutes()}),_=j.range,I=u(function(e){e.setUTCMinutes(0,0,0)},function(e,t){e.setTime(+e+36e5*t)},function(e,t){return(t-e)/36e5},function(e){return e.getUTCHours()}),P=I.range,q=u(function(e){e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCDate(e.getUTCDate()+t)},function(e,t){return(t-e)/864e5},function(e){return e.getUTCDate()-1}),A=q.range;function B(e){return u(function(t){t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-e)%7),t.setUTCHours(0,0,0,0)},function(e,t){e.setUTCDate(e.getUTCDate()+7*t)},function(e,t){return(t-e)/s})}var E=B(0),G=B(1),J=B(2),K=B(3),L=B(4),N=B(5),Q=B(6),R=E.range,V=G.range,X=J.range,Z=K.range,$=L.range,ee=N.range,te=Q.range,ne=u(function(e){e.setUTCDate(1),e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCMonth(e.getUTCMonth()+t)},function(e,t){return t.getUTCMonth()-e.getUTCMonth()+12*(t.getUTCFullYear()-e.getUTCFullYear())},function(e){return e.getUTCMonth()}),ue=ne.range,re=u(function(e){e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCFullYear(e.getUTCFullYear()+t)},function(e,t){return t.getUTCFullYear()-e.getUTCFullYear()},function(e){return e.getUTCFullYear()});re.every=function(e){return isFinite(e=Math.floor(e))&&e>0?u(function(t){t.setUTCFullYear(Math.floor(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n*e)}):null};var ie=re.range;e.timeInterval=u,e.timeMillisecond=r,e.timeMilliseconds=i,e.utcMillisecond=r,e.utcMilliseconds=i,e.timeSecond=a,e.timeSeconds=c,e.utcSecond=a,e.utcSeconds=c,e.timeMinute=f,e.timeMinutes=l,e.timeHour=g,e.timeHours=T,e.timeDay=d,e.timeDays=m,e.timeWeek=y,e.timeWeeks=H,e.timeSunday=y,e.timeSundays=H,e.timeMonday=C,e.timeMondays=S,e.timeTuesday=U,e.timeTuesdays=v,e.timeWednesday=h,e.timeWednesdays=p,e.timeThursday=F,e.timeThursdays=W,e.timeFriday=D,e.timeFridays=w,e.timeSaturday=Y,e.timeSaturdays=O,e.timeMonth=k,e.timeMonths=z,e.timeYear=x,e.timeYears=b,e.utcMinute=j,e.utcMinutes=_,e.utcHour=I,e.utcHours=P,e.utcDay=q,e.utcDays=A,e.utcWeek=E,e.utcWeeks=R,e.utcSunday=E,e.utcSundays=R,e.utcMonday=G,e.utcMondays=V,e.utcTuesday=J,e.utcTuesdays=X,e.utcWednesday=K,e.utcWednesdays=Z,e.utcThursday=L,e.utcThursdays=$,e.utcFriday=N,e.utcFridays=ee,e.utcSaturday=Q,e.utcSaturdays=te,e.utcMonth=ne,e.utcMonths=ue,e.utcYear=re,e.utcYears=ie,Object.defineProperty(e,"__esModule",{value:!0})});

},{}],32:[function(require,module,exports){
!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports):"function"==typeof define&&define.amd?define(["exports"],n):n(t.d3=t.d3||{})}(this,function(t){"use strict";var n,e,o=0,i=0,r=0,u=1e3,l=0,c=0,a=0,f="object"==typeof performance&&performance.now?performance:Date,s="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function _(){return c||(s(m),c=f.now()+a)}function m(){c=0}function p(){this._call=this._time=this._next=null}function w(t,n,e){var o=new p;return o.restart(t,n,e),o}function d(){_(),++o;for(var t,e=n;e;)(t=c-e._time)>=0&&e._call.call(null,t),e=e._next;--o}function h(){c=(l=f.now())+a,o=i=0;try{d()}finally{o=0,function(){var t,o,i=n,r=1/0;for(;i;)i._call?(r>i._time&&(r=i._time),t=i,i=i._next):(o=i._next,i._next=null,i=t?t._next=o:n=o);e=t,v(r)}(),c=0}}function y(){var t=f.now(),n=t-l;n>u&&(a-=n,l=t)}function v(t){o||(i&&(i=clearTimeout(i)),t-c>24?(t<1/0&&(i=setTimeout(h,t-f.now()-a)),r&&(r=clearInterval(r))):(r||(l=f.now(),r=setInterval(y,u)),o=1,s(h)))}p.prototype=w.prototype={constructor:p,restart:function(t,o,i){if("function"!=typeof t)throw new TypeError("callback is not a function");i=(null==i?_():+i)+(null==o?0:+o),this._next||e===this||(e?e._next=this:n=this,e=this),this._call=t,this._time=i,v()},stop:function(){this._call&&(this._call=null,this._time=1/0,v())}},t.now=_,t.timer=w,t.timerFlush=d,t.timeout=function(t,n,e){var o=new p;return n=null==n?0:+n,o.restart(function(e){o.stop(),t(e+n)},n,e),o},t.interval=function(t,n,e){var o=new p,i=n;return null==n?(o.restart(t,n,e),o):(n=+n,e=null==e?_():+e,o.restart(function r(u){u+=i,o.restart(r,i+=n,e),t(u)},n,e),o)},Object.defineProperty(t,"__esModule",{value:!0})});

},{}],33:[function(require,module,exports){
!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("d3-dispatch"),require("d3-timer"),require("d3-color"),require("d3-interpolate"),require("d3-selection"),require("d3-ease")):"function"==typeof define&&define.amd?define(["exports","d3-dispatch","d3-timer","d3-color","d3-interpolate","d3-selection","d3-ease"],n):n(t.d3=t.d3||{},t.d3,t.d3,t.d3,t.d3,t.d3,t.d3)}(this,function(t,n,e,r,i,o,a){"use strict";var u=n.dispatch("start","end","cancel","interrupt"),s=[],l=0,f=1,c=2,h=3,d=4,_=5,p=6;function v(t,n,r,i,o,a){var v=t.__transition;if(v){if(r in v)return}else t.__transition={};!function(t,n,r){var i,o=t.__transition;function a(l){var _,v,y,m;if(r.state!==f)return s();for(_ in o)if((m=o[_]).name===r.name){if(m.state===h)return e.timeout(a);m.state===d?(m.state=p,m.timer.stop(),m.on.call("interrupt",t,t.__data__,m.index,m.group),delete o[_]):+_<n&&(m.state=p,m.timer.stop(),m.on.call("cancel",t,t.__data__,m.index,m.group),delete o[_])}if(e.timeout(function(){r.state===h&&(r.state=d,r.timer.restart(u,r.delay,r.time),u(l))}),r.state=c,r.on.call("start",t,t.__data__,r.index,r.group),r.state===c){for(r.state=h,i=new Array(y=r.tween.length),_=0,v=-1;_<y;++_)(m=r.tween[_].value.call(t,t.__data__,r.index,r.group))&&(i[++v]=m);i.length=v+1}}function u(n){for(var e=n<r.duration?r.ease.call(null,n/r.duration):(r.timer.restart(s),r.state=_,1),o=-1,a=i.length;++o<a;)i[o].call(t,e);r.state===_&&(r.on.call("end",t,t.__data__,r.index,r.group),s())}function s(){for(var e in r.state=p,r.timer.stop(),delete o[n],o)return;delete t.__transition}o[n]=r,r.timer=e.timer(function(t){r.state=f,r.timer.restart(a,r.delay,r.time),r.delay<=t&&a(t-r.delay)},0,r.time)}(t,r,{name:n,index:i,group:o,on:u,tween:s,time:a.time,delay:a.delay,duration:a.duration,ease:a.ease,timer:null,state:l})}function y(t,n){var e=w(t,n);if(e.state>l)throw new Error("too late; already scheduled");return e}function m(t,n){var e=w(t,n);if(e.state>h)throw new Error("too late; already running");return e}function w(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function g(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>c&&e.state<_,e.state=p,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}}function b(t,n,e){var r=t._id;return t.each(function(){var t=m(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return w(t,r).value[n]}}function A(t,n){var e;return("number"==typeof n?i.interpolateNumber:n instanceof r.color?i.interpolateRgb:(e=r.color(n))?(n=e,i.interpolateRgb):i.interpolateString)(t,n)}var x=o.selection.prototype.constructor;function E(t){return function(){this.style.removeProperty(t)}}var N=0;function T(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function S(t){return o.selection().transition(t)}function q(){return++N}var P=o.selection.prototype;T.prototype=S.prototype={constructor:T,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=o.selector(t));for(var r=this._groups,i=r.length,a=new Array(i),u=0;u<i;++u)for(var s,l,f=r[u],c=f.length,h=a[u]=new Array(c),d=0;d<c;++d)(s=f[d])&&(l=t.call(s,s.__data__,d,f))&&("__data__"in s&&(l.__data__=s.__data__),h[d]=l,v(h[d],n,e,d,h,w(s,e)));return new T(a,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=o.selectorAll(t));for(var r=this._groups,i=r.length,a=[],u=[],s=0;s<i;++s)for(var l,f=r[s],c=f.length,h=0;h<c;++h)if(l=f[h]){for(var d,_=t.call(l,l.__data__,h,f),p=w(l,e),y=0,m=_.length;y<m;++y)(d=_[y])&&v(d,n,e,y,_,p);a.push(_),u.push(l)}return new T(a,u,n,e)},filter:function(t){"function"!=typeof t&&(t=o.matcher(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var a,u=n[i],s=u.length,l=r[i]=[],f=0;f<s;++f)(a=u[f])&&t.call(a,a.__data__,f,u)&&l.push(a);return new T(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var s,l=n[u],f=e[u],c=l.length,h=a[u]=new Array(c),d=0;d<c;++d)(s=l[d]||f[d])&&(h[d]=s);for(;u<r;++u)a[u]=n[u];return new T(a,this._parents,this._name,this._id)},selection:function(){return new x(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=q(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,l=0;l<s;++l)if(a=u[l]){var f=w(a,n);v(a,t,e,l,u,{time:f.time+f.delay+f.duration,delay:0,duration:f.duration,ease:f.ease})}return new T(r,this._parents,t,e)},call:P.call,nodes:P.nodes,node:P.node,size:P.size,empty:P.empty,each:P.each,on:function(t,n){var e=this._id;return arguments.length<2?w(this.node(),e).on.on(t):this.each(function(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}(n)?y:m;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(n,e),a.on=i}}(e,t,n))},attr:function(t,n){var e=o.namespace(t),r="transform"===e?i.interpolateTransformSvg:A;return this.attrTween(t,"function"==typeof n?(e.local?function(t,n,e){var r,i,o;return function(){var a,u,s=e(this);if(null!=s)return(a=this.getAttributeNS(t.space,t.local))===(u=s+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,s));this.removeAttributeNS(t.space,t.local)}}:function(t,n,e){var r,i,o;return function(){var a,u,s=e(this);if(null!=s)return(a=this.getAttribute(t))===(u=s+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,s));this.removeAttribute(t)}})(e,r,b(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=n(r=a,e)}}:function(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=n(r=a,e)}})(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=o.namespace(t);return this.tween(e,(r.local?function(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttributeNS(t.space,t.local,n(e))}}(t,i)),e}return i._value=n,i}:function(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttribute(t,n(e))}}(t,i)),e}return i._value=n,i})(r,n))},style:function(t,n,e){var r="transform"==(t+="")?i.interpolateTransformCss:A;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var a=o.style(this,t),u=(this.style.removeProperty(t),o.style(this,t));return a===u?null:a===e&&u===r?i:i=n(e=a,r=u)}}(t,r)).on("end.style."+t,E(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,a;return function(){var u=o.style(this,t),s=e(this),l=s+"";return null==s&&(this.style.removeProperty(t),l=s=o.style(this,t)),u===l?null:u===r&&l===i?a:(i=l,a=n(r=u,s))}}(t,r,b(this,"style."+t,n))).each(function(t,n){var e,r,i,o,a="style."+n,u="end."+a;return function(){var s=m(this,t),l=s.on,f=null==s.value[a]?o||(o=E(n)):void 0;l===e&&i===f||(r=(e=l).copy()).on(u,i=f),s.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,a=e+"";return function(){var u=o.style(this,t);return u===a?null:u===r?i:i=n(r=u,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,n,e){return function(r){this.style.setProperty(t,n(r),e)}}(t,o,e)),r}return o._value=n,o}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(b(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=w(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?function(t,n){var e,r;return function(){var i=m(this,t),o=i.tween;if(o!==e)for(var a=0,u=(r=e=o).length;a<u;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}:function(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=m(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:n,value:e},s=0,l=i.length;s<l;++s)if(i[s].name===n){i[s]=u;break}s===l&&i.push(u)}o.tween=i}})(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){y(this,t).delay=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){y(this,t).delay=n}})(n,t)):w(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){m(this,t).duration=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){m(this,t).duration=n}})(n,t)):w(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){m(this,t).ease=n}}(n,t)):w(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise(function(o,a){var u={value:a},s={value:function(){0==--i&&o()}};e.each(function(){var e=m(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(u),n._.interrupt.push(u),n._.end.push(s)),e.on=n})})}};var C={time:null,delay:0,duration:250,ease:a.easeCubicInOut};function z(t,n){for(var r;!(r=t.__transition)||!(r=r[n]);)if(!(t=t.parentNode))return C.time=e.now(),C;return r}o.selection.prototype.interrupt=function(t){return this.each(function(){g(this,t)})},o.selection.prototype.transition=function(t){var n,r;t instanceof T?(n=t._id,t=t._name):(n=q(),(r=C).time=e.now(),t=null==t?null:t+"");for(var i=this._groups,o=i.length,a=0;a<o;++a)for(var u,s=i[a],l=s.length,f=0;f<l;++f)(u=s[f])&&v(u,t,n,f,s,r||z(u,n));return new T(i,this._parents,t,n)};var O=[null];t.transition=S,t.active=function(t,n){var e,r,i=t.__transition;if(i)for(r in n=null==n?null:n+"",i)if((e=i[r]).state>f&&e.name===n)return new T([[t]],O,n,+r);return null},t.interrupt=g,Object.defineProperty(t,"__esModule",{value:!0})});

},{"d3-color":10,"d3-dispatch":12,"d3-ease":15,"d3-interpolate":21,"d3-selection":28,"d3-timer":32}],34:[function(require,module,exports){
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(e.d3=e.d3||{})}(this,function(e){"use strict";function t(e){return function(){return e}}function n(e){return e[0]}function i(e){return e[1]}function r(){this._=null}function f(e){e.U=e.C=e.L=e.R=e.P=e.N=null}function s(e,t){var n=t,i=t.R,r=n.U;r?r.L===n?r.L=i:r.R=i:e._=i,i.U=r,n.U=i,n.R=i.L,n.R&&(n.R.U=n),i.L=n}function u(e,t){var n=t,i=t.L,r=n.U;r?r.L===n?r.L=i:r.R=i:e._=i,i.U=r,n.U=i,n.L=i.R,n.L&&(n.L.U=n),i.R=n}function l(e){for(;e.L;)e=e.L;return e}function a(e,t,n,i){var r=[null,null],f=q.push(r)-1;return r.left=e,r.right=t,n&&h(r,e,t,n),i&&h(r,t,e,i),A[e.index].halfedges.push(f),A[t.index].halfedges.push(f),r}function o(e,t,n){var i=[t,n];return i.left=e,i}function h(e,t,n,i){e[0]||e[1]?e.left===n?e[1]=i:e[0]=i:(e[0]=i,e.left=t,e.right=n)}function c(e,t,n,i,r){var f,s=e[0],u=e[1],l=s[0],a=s[1],o=0,h=1,c=u[0]-l,d=u[1]-a;if(f=t-l,c||!(f>0)){if(f/=c,c<0){if(f<o)return;f<h&&(h=f)}else if(c>0){if(f>h)return;f>o&&(o=f)}if(f=i-l,c||!(f<0)){if(f/=c,c<0){if(f>h)return;f>o&&(o=f)}else if(c>0){if(f<o)return;f<h&&(h=f)}if(f=n-a,d||!(f>0)){if(f/=d,d<0){if(f<o)return;f<h&&(h=f)}else if(d>0){if(f>h)return;f>o&&(o=f)}if(f=r-a,d||!(f<0)){if(f/=d,d<0){if(f>h)return;f>o&&(o=f)}else if(d>0){if(f<o)return;f<h&&(h=f)}return!(o>0||h<1)||(o>0&&(e[0]=[l+o*c,a+o*d]),h<1&&(e[1]=[l+h*c,a+h*d]),!0)}}}}}function d(e,t,n,i,r){var f=e[1];if(f)return!0;var s,u,l=e[0],a=e.left,o=e.right,h=a[0],c=a[1],d=o[0],v=o[1],g=(h+d)/2,C=(c+v)/2;if(v===c){if(g<t||g>=i)return;if(h>d){if(l){if(l[1]>=r)return}else l=[g,n];f=[g,r]}else{if(l){if(l[1]<n)return}else l=[g,r];f=[g,n]}}else if(u=C-(s=(h-d)/(v-c))*g,s<-1||s>1)if(h>d){if(l){if(l[1]>=r)return}else l=[(n-u)/s,n];f=[(r-u)/s,r]}else{if(l){if(l[1]<n)return}else l=[(r-u)/s,r];f=[(n-u)/s,n]}else if(c<v){if(l){if(l[0]>=i)return}else l=[t,s*t+u];f=[i,s*i+u]}else{if(l){if(l[0]<t)return}else l=[i,s*i+u];f=[t,s*t+u]}return e[0]=l,e[1]=f,!0}function v(e,t){var n=e.site,i=t.left,r=t.right;return n===r&&(r=i,i=n),r?Math.atan2(r[1]-i[1],r[0]-i[0]):(n===i?(i=t[1],r=t[0]):(i=t[0],r=t[1]),Math.atan2(i[0]-r[0],r[1]-i[1]))}function g(e,t){return t[+(t.left!==e.site)]}function C(e,t){return t[+(t.left===e.site)]}r.prototype={constructor:r,insert:function(e,t){var n,i,r;if(e){if(t.P=e,t.N=e.N,e.N&&(e.N.P=t),e.N=t,e.R){for(e=e.R;e.L;)e=e.L;e.L=t}else e.R=t;n=e}else this._?(e=l(this._),t.P=null,t.N=e,e.P=e.L=t,n=e):(t.P=t.N=null,this._=t,n=null);for(t.L=t.R=null,t.U=n,t.C=!0,e=t;n&&n.C;)n===(i=n.U).L?(r=i.R)&&r.C?(n.C=r.C=!1,i.C=!0,e=i):(e===n.R&&(s(this,n),n=(e=n).U),n.C=!1,i.C=!0,u(this,i)):(r=i.L)&&r.C?(n.C=r.C=!1,i.C=!0,e=i):(e===n.L&&(u(this,n),n=(e=n).U),n.C=!1,i.C=!0,s(this,i)),n=e.U;this._.C=!1},remove:function(e){e.N&&(e.N.P=e.P),e.P&&(e.P.N=e.N),e.N=e.P=null;var t,n,i,r=e.U,f=e.L,a=e.R;if(n=f?a?l(a):f:a,r?r.L===e?r.L=n:r.R=n:this._=n,f&&a?(i=n.C,n.C=e.C,n.L=f,f.U=n,n!==a?(r=n.U,n.U=e.U,e=n.R,r.L=e,n.R=a,a.U=n):(n.U=r,r=n,e=n.R)):(i=e.C,e=n),e&&(e.U=r),!i)if(e&&e.C)e.C=!1;else{do{if(e===this._)break;if(e===r.L){if((t=r.R).C&&(t.C=!1,r.C=!0,s(this,r),t=r.R),t.L&&t.L.C||t.R&&t.R.C){t.R&&t.R.C||(t.L.C=!1,t.C=!0,u(this,t),t=r.R),t.C=r.C,r.C=t.R.C=!1,s(this,r),e=this._;break}}else if((t=r.L).C&&(t.C=!1,r.C=!0,u(this,r),t=r.L),t.L&&t.L.C||t.R&&t.R.C){t.L&&t.L.C||(t.R.C=!1,t.C=!0,s(this,t),t=r.L),t.C=r.C,r.C=t.L.C=!1,u(this,r),e=this._;break}t.C=!0,e=r,r=r.U}while(!e.C);e&&(e.C=!1)}}};var p,L=[];function R(){f(this),this.x=this.y=this.arc=this.site=this.cy=null}function y(e){var t=e.P,n=e.N;if(t&&n){var i=t.site,r=e.site,f=n.site;if(i!==f){var s=r[0],u=r[1],l=i[0]-s,a=i[1]-u,o=f[0]-s,h=f[1]-u,c=2*(l*h-a*o);if(!(c>=-z)){var d=l*l+a*a,v=o*o+h*h,g=(h*d-a*v)/c,C=(l*v-o*d)/c,y=L.pop()||new R;y.arc=e,y.site=r,y.x=g+s,y.y=(y.cy=C+u)+Math.sqrt(g*g+C*C),e.circle=y;for(var b=null,M=j._;M;)if(y.y<M.y||y.y===M.y&&y.x<=M.x){if(!M.L){b=M.P;break}M=M.L}else{if(!M.R){b=M;break}M=M.R}j.insert(b,y),b||(p=y)}}}}function b(e){var t=e.circle;t&&(t.P||(p=t.N),j.remove(t),L.push(t),f(t),e.circle=null)}var M=[];function U(){f(this),this.edge=this.site=this.circle=null}function x(e){var t=M.pop()||new U;return t.site=e,t}function N(e){b(e),m.remove(e),M.push(e),f(e)}function P(e){var t=e.circle,n=t.x,i=t.cy,r=[n,i],f=e.P,s=e.N,u=[e];N(e);for(var l=f;l.circle&&Math.abs(n-l.circle.x)<E&&Math.abs(i-l.circle.cy)<E;)f=l.P,u.unshift(l),N(l),l=f;u.unshift(l),b(l);for(var o=s;o.circle&&Math.abs(n-o.circle.x)<E&&Math.abs(i-o.circle.cy)<E;)s=o.N,u.push(o),N(o),o=s;u.push(o),b(o);var c,d=u.length;for(c=1;c<d;++c)o=u[c],l=u[c-1],h(o.edge,l.site,o.site,r);l=u[0],(o=u[d-1]).edge=a(l.site,o.site,null,r),y(l),y(o)}function _(e){for(var t,n,i,r,f=e[0],s=e[1],u=m._;u;)if((i=k(u,s)-f)>E)u=u.L;else{if(!((r=f-w(u,s))>E)){i>-E?(t=u.P,n=u):r>-E?(t=u,n=u.N):t=n=u;break}if(!u.R){t=u;break}u=u.R}!function(e){A[e.index]={site:e,halfedges:[]}}(e);var l=x(e);if(m.insert(t,l),t||n){if(t===n)return b(t),n=x(t.site),m.insert(l,n),l.edge=n.edge=a(t.site,l.site),y(t),void y(n);if(n){b(t),b(n);var o=t.site,c=o[0],d=o[1],v=e[0]-c,g=e[1]-d,C=n.site,p=C[0]-c,L=C[1]-d,R=2*(v*L-g*p),M=v*v+g*g,U=p*p+L*L,N=[(L*M-g*U)/R+c,(v*U-p*M)/R+d];h(n.edge,o,C,N),l.edge=a(o,e,null,N),n.edge=a(e,C,null,N),y(t),y(n)}else l.edge=a(t.site,l.site)}}function k(e,t){var n=e.site,i=n[0],r=n[1],f=r-t;if(!f)return i;var s=e.P;if(!s)return-1/0;var u=(n=s.site)[0],l=n[1],a=l-t;if(!a)return u;var o=u-i,h=1/f-1/a,c=o/a;return h?(-c+Math.sqrt(c*c-2*h*(o*o/(-2*a)-l+a/2+r-f/2)))/h+i:(i+u)/2}function w(e,t){var n=e.N;if(n)return k(n,t);var i=e.site;return i[1]===t?i[0]:1/0}var m,A,j,q,E=1e-6,z=1e-12;function O(e,t){return t[1]-e[1]||t[0]-e[0]}function B(e,t){var n,i,f,s=e.sort(O).pop();for(q=[],A=new Array(e.length),m=new r,j=new r;;)if(f=p,s&&(!f||s[1]<f.y||s[1]===f.y&&s[0]<f.x))s[0]===n&&s[1]===i||(_(s),n=s[0],i=s[1]),s=e.pop();else{if(!f)break;P(f.arc)}if(function(){for(var e,t,n,i,r=0,f=A.length;r<f;++r)if((e=A[r])&&(i=(t=e.halfedges).length)){var s=new Array(i),u=new Array(i);for(n=0;n<i;++n)s[n]=n,u[n]=v(e,q[t[n]]);for(s.sort(function(e,t){return u[t]-u[e]}),n=0;n<i;++n)u[n]=t[s[n]];for(n=0;n<i;++n)t[n]=u[n]}}(),t){var u=+t[0][0],l=+t[0][1],a=+t[1][0],h=+t[1][1];!function(e,t,n,i){for(var r,f=q.length;f--;)d(r=q[f],e,t,n,i)&&c(r,e,t,n,i)&&(Math.abs(r[0][0]-r[1][0])>E||Math.abs(r[0][1]-r[1][1])>E)||delete q[f]}(u,l,a,h),function(e,t,n,i){var r,f,s,u,l,a,h,c,d,v,p,L,R=A.length,y=!0;for(r=0;r<R;++r)if(f=A[r]){for(s=f.site,u=(l=f.halfedges).length;u--;)q[l[u]]||l.splice(u,1);for(u=0,a=l.length;u<a;)p=(v=C(f,q[l[u]]))[0],L=v[1],c=(h=g(f,q[l[++u%a]]))[0],d=h[1],(Math.abs(p-c)>E||Math.abs(L-d)>E)&&(l.splice(u,0,q.push(o(s,v,Math.abs(p-e)<E&&i-L>E?[e,Math.abs(c-e)<E?d:i]:Math.abs(L-i)<E&&n-p>E?[Math.abs(d-i)<E?c:n,i]:Math.abs(p-n)<E&&L-t>E?[n,Math.abs(c-n)<E?d:t]:Math.abs(L-t)<E&&p-e>E?[Math.abs(d-t)<E?c:e,t]:null))-1),++a);a&&(y=!1)}if(y){var b,M,U,x=1/0;for(r=0,y=null;r<R;++r)(f=A[r])&&(U=(b=(s=f.site)[0]-e)*b+(M=s[1]-t)*M)<x&&(x=U,y=f);if(y){var N=[e,t],P=[e,i],_=[n,i],k=[n,t];y.halfedges.push(q.push(o(s=y.site,N,P))-1,q.push(o(s,P,_))-1,q.push(o(s,_,k))-1,q.push(o(s,k,N))-1)}}for(r=0;r<R;++r)(f=A[r])&&(f.halfedges.length||delete A[r])}(u,l,a,h)}this.edges=q,this.cells=A,m=j=q=A=null}B.prototype={constructor:B,polygons:function(){var e=this.edges;return this.cells.map(function(t){var n=t.halfedges.map(function(n){return g(t,e[n])});return n.data=t.site.data,n})},triangles:function(){var e=[],t=this.edges;return this.cells.forEach(function(n,i){if(f=(r=n.halfedges).length)for(var r,f,s,u,l,a,o=n.site,h=-1,c=t[r[f-1]],d=c.left===o?c.right:c.left;++h<f;)s=d,d=(c=t[r[h]]).left===o?c.right:c.left,s&&d&&i<s.index&&i<d.index&&(l=s,a=d,((u=o)[0]-a[0])*(l[1]-u[1])-(u[0]-l[0])*(a[1]-u[1])<0)&&e.push([o.data,s.data,d.data])}),e},links:function(){return this.edges.filter(function(e){return e.right}).map(function(e){return{source:e.left.data,target:e.right.data}})},find:function(e,t,n){for(var i,r,f=this,s=f._found||0,u=f.cells.length;!(r=f.cells[s]);)if(++s>=u)return null;var l=e-r.site[0],a=t-r.site[1],o=l*l+a*a;do{r=f.cells[i=s],s=null,r.halfedges.forEach(function(n){var i=f.edges[n],u=i.left;if(u!==r.site&&u||(u=i.right)){var l=e-u[0],a=t-u[1],h=l*l+a*a;h<o&&(o=h,s=u.index)}})}while(null!==s);return f._found=i,null==n||o<=n*n?r.site:null}},e.voronoi=function(){var e=n,r=i,f=null;function s(t){return new B(t.map(function(n,i){var f=[Math.round(e(n,i,t)/E)*E,Math.round(r(n,i,t)/E)*E];return f.index=i,f.data=n,f}),f)}return s.polygons=function(e){return s(e).polygons()},s.links=function(e){return s(e).links()},s.triangles=function(e){return s(e).triangles()},s.x=function(n){return arguments.length?(e="function"==typeof n?n:t(+n),s):e},s.y=function(e){return arguments.length?(r="function"==typeof e?e:t(+e),s):r},s.extent=function(e){return arguments.length?(f=null==e?null:[[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]],s):f&&[[f[0][0],f[0][1]],[f[1][0],f[1][1]]]},s.size=function(e){return arguments.length?(f=null==e?null:[[0,0],[+e[0],+e[1]]],s):f&&[f[1][0]-f[0][0],f[1][1]-f[0][1]]},s},Object.defineProperty(e,"__esModule",{value:!0})});

},{}],35:[function(require,module,exports){
!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("d3-selection"),require("d3-dispatch"),require("d3-drag"),require("d3-interpolate"),require("d3-transition")):"function"==typeof define&&define.amd?define(["exports","d3-selection","d3-dispatch","d3-drag","d3-interpolate","d3-transition"],n):n(t.d3=t.d3||{},t.d3,t.d3,t.d3,t.d3,t.d3)}(this,function(t,n,e,o,i,r){"use strict";function u(t){return function(){return t}}function h(t,n,e){this.target=t,this.type=n,this.transform=e}function s(t,n,e){this.k=t,this.x=n,this.y=e}s.prototype={constructor:s,scale:function(t){return 1===t?this:new s(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new s(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var c=new s(1,0,0);function a(t){return t.__zoom||c}function f(){n.event.stopImmediatePropagation()}function l(){n.event.preventDefault(),n.event.stopImmediatePropagation()}function m(){return!n.event.button}function p(){var t,n,e=this;return e instanceof SVGElement?(t=(e=e.ownerSVGElement||e).width.baseVal.value,n=e.height.baseVal.value):(t=e.clientWidth,n=e.clientHeight),[[0,0],[t,n]]}function d(){return this.__zoom||c}function v(){return-n.event.deltaY*(n.event.deltaMode?120:1)/500}function y(){return"ontouchstart"in this}function z(t,n,e){var o=t.invertX(n[0][0])-e[0][0],i=t.invertX(n[1][0])-e[1][0],r=t.invertY(n[0][1])-e[0][1],u=t.invertY(n[1][1])-e[1][1];return t.translate(i>o?(o+i)/2:Math.min(0,o)||Math.max(0,i),u>r?(r+u)/2:Math.min(0,r)||Math.max(0,u))}a.prototype=s.prototype,t.zoom=function(){var t,a,_=m,g=p,k=z,x=v,w=y,M=[0,1/0],T=[[-1/0,-1/0],[1/0,1/0]],b=250,Y=i.interpolateZoom,X=[],q=e.dispatch("start","zoom","end"),E=500,D=150,V=0;function I(t){t.property("__zoom",d).on("wheel.zoom",K).on("mousedown.zoom",O).on("dblclick.zoom",W).filter(w).on("touchstart.zoom",Z).on("touchmove.zoom",A).on("touchend.zoom touchcancel.zoom",C).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function P(t,n){return(n=Math.max(M[0],Math.min(M[1],n)))===t.k?t:new s(n,t.x,t.y)}function S(t,n,e){var o=n[0]-e[0]*t.k,i=n[1]-e[1]*t.k;return o===t.x&&i===t.y?t:new s(t.k,o,i)}function j(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function B(t,n,e){t.on("start.zoom",function(){G(this,arguments).start()}).on("interrupt.zoom end.zoom",function(){G(this,arguments).end()}).tween("zoom",function(){var t=arguments,o=G(this,t),i=g.apply(this,t),r=e||j(i),u=Math.max(i[1][0]-i[0][0],i[1][1]-i[0][1]),h=this.__zoom,c="function"==typeof n?n.apply(this,t):n,a=Y(h.invert(r).concat(u/h.k),c.invert(r).concat(u/c.k));return function(t){if(1===t)t=c;else{var n=a(t),e=u/n[2];t=new s(e,r[0]-n[0]*e,r[1]-n[1]*e)}o.zoom(null,t)}})}function G(t,n){for(var e,o=0,i=X.length;o<i;++o)if((e=X[o]).that===t)return e;return new H(t,n)}function H(t,n){this.that=t,this.args=n,this.index=-1,this.active=0,this.extent=g.apply(t,n)}function K(){if(_.apply(this,arguments)){var t=G(this,arguments),e=this.__zoom,o=Math.max(M[0],Math.min(M[1],e.k*Math.pow(2,x.apply(this,arguments)))),i=n.mouse(this);if(t.wheel)t.mouse[0][0]===i[0]&&t.mouse[0][1]===i[1]||(t.mouse[1]=e.invert(t.mouse[0]=i)),clearTimeout(t.wheel);else{if(e.k===o)return;t.mouse=[i,e.invert(i)],r.interrupt(this),t.start()}l(),t.wheel=setTimeout(function(){t.wheel=null,t.end()},D),t.zoom("mouse",k(S(P(e,o),t.mouse[0],t.mouse[1]),t.extent,T))}}function O(){if(!a&&_.apply(this,arguments)){var t=G(this,arguments),e=n.select(n.event.view).on("mousemove.zoom",function(){if(l(),!t.moved){var e=n.event.clientX-u,o=n.event.clientY-h;t.moved=e*e+o*o>V}t.zoom("mouse",k(S(t.that.__zoom,t.mouse[0]=n.mouse(t.that),t.mouse[1]),t.extent,T))},!0).on("mouseup.zoom",function(){e.on("mousemove.zoom mouseup.zoom",null),o.dragEnable(n.event.view,t.moved),l(),t.end()},!0),i=n.mouse(this),u=n.event.clientX,h=n.event.clientY;o.dragDisable(n.event.view),f(),t.mouse=[i,this.__zoom.invert(i)],r.interrupt(this),t.start()}}function W(){if(_.apply(this,arguments)){var t=this.__zoom,e=n.mouse(this),o=t.invert(e),i=t.k*(n.event.shiftKey?.5:2),r=k(S(P(t,i),e,o),g.apply(this,arguments),T);l(),b>0?n.select(this).transition().duration(b).call(B,r,e):n.select(this).call(I.transform,r)}}function Z(){if(_.apply(this,arguments)){var e,o,i,u,h=G(this,arguments),s=n.event.changedTouches,c=s.length;for(f(),o=0;o<c;++o)i=s[o],u=[u=n.touch(this,s,i.identifier),this.__zoom.invert(u),i.identifier],h.touch0?h.touch1||(h.touch1=u):(h.touch0=u,e=!0);if(t&&(t=clearTimeout(t),!h.touch1))return h.end(),void((u=n.select(this).on("dblclick.zoom"))&&u.apply(this,arguments));e&&(t=setTimeout(function(){t=null},E),r.interrupt(this),h.start())}}function A(){var e,o,i,r,u=G(this,arguments),h=n.event.changedTouches,s=h.length;for(l(),t&&(t=clearTimeout(t)),e=0;e<s;++e)o=h[e],i=n.touch(this,h,o.identifier),u.touch0&&u.touch0[2]===o.identifier?u.touch0[0]=i:u.touch1&&u.touch1[2]===o.identifier&&(u.touch1[0]=i);if(o=u.that.__zoom,u.touch1){var c=u.touch0[0],a=u.touch0[1],f=u.touch1[0],m=u.touch1[1],p=(p=f[0]-c[0])*p+(p=f[1]-c[1])*p,d=(d=m[0]-a[0])*d+(d=m[1]-a[1])*d;o=P(o,Math.sqrt(p/d)),i=[(c[0]+f[0])/2,(c[1]+f[1])/2],r=[(a[0]+m[0])/2,(a[1]+m[1])/2]}else{if(!u.touch0)return;i=u.touch0[0],r=u.touch0[1]}u.zoom("touch",k(S(o,i,r),u.extent,T))}function C(){var t,e,o=G(this,arguments),i=n.event.changedTouches,r=i.length;for(f(),a&&clearTimeout(a),a=setTimeout(function(){a=null},E),t=0;t<r;++t)e=i[t],o.touch0&&o.touch0[2]===e.identifier?delete o.touch0:o.touch1&&o.touch1[2]===e.identifier&&delete o.touch1;o.touch1&&!o.touch0&&(o.touch0=o.touch1,delete o.touch1),o.touch0?o.touch0[1]=this.__zoom.invert(o.touch0[0]):o.end()}return I.transform=function(t,n){var e=t.selection?t.selection():t;e.property("__zoom",d),t!==e?B(t,n):e.interrupt().each(function(){G(this,arguments).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()})},I.scaleBy=function(t,n){I.scaleTo(t,function(){return this.__zoom.k*("function"==typeof n?n.apply(this,arguments):n)})},I.scaleTo=function(t,n){I.transform(t,function(){var t=g.apply(this,arguments),e=this.__zoom,o=j(t),i=e.invert(o),r="function"==typeof n?n.apply(this,arguments):n;return k(S(P(e,r),o,i),t,T)})},I.translateBy=function(t,n,e){I.transform(t,function(){return k(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof e?e.apply(this,arguments):e),g.apply(this,arguments),T)})},I.translateTo=function(t,n,e){I.transform(t,function(){var t=g.apply(this,arguments),o=this.__zoom,i=j(t);return k(c.translate(i[0],i[1]).scale(o.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof e?-e.apply(this,arguments):-e),t,T)})},H.prototype={start:function(){return 1==++this.active&&(this.index=X.push(this)-1,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(X.splice(this.index,1),this.index=-1,this.emit("end")),this},emit:function(t){n.customEvent(new h(I,t,this.that.__zoom),q.apply,q,[t,this.that,this.args])}},I.wheelDelta=function(t){return arguments.length?(x="function"==typeof t?t:u(+t),I):x},I.filter=function(t){return arguments.length?(_="function"==typeof t?t:u(!!t),I):_},I.touchable=function(t){return arguments.length?(w="function"==typeof t?t:u(!!t),I):w},I.extent=function(t){return arguments.length?(g="function"==typeof t?t:u([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),I):g},I.scaleExtent=function(t){return arguments.length?(M[0]=+t[0],M[1]=+t[1],I):[M[0],M[1]]},I.translateExtent=function(t){return arguments.length?(T[0][0]=+t[0][0],T[1][0]=+t[1][0],T[0][1]=+t[0][1],T[1][1]=+t[1][1],I):[[T[0][0],T[0][1]],[T[1][0],T[1][1]]]},I.constrain=function(t){return arguments.length?(k=t,I):k},I.duration=function(t){return arguments.length?(b=+t,I):b},I.interpolate=function(t){return arguments.length?(Y=t,I):Y},I.on=function(){var t=q.on.apply(q,arguments);return t===q?I:t},I.clickDistance=function(t){return arguments.length?(V=(t=+t)*t,I):Math.sqrt(V)},I},t.zoomTransform=a,t.zoomIdentity=c,Object.defineProperty(t,"__esModule",{value:!0})});

},{"d3-dispatch":12,"d3-drag":13,"d3-interpolate":21,"d3-selection":28,"d3-transition":33}],36:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var d3Array=require("d3-array"),d3Axis=require("d3-axis"),d3Brush=require("d3-brush"),d3Chord=require("d3-chord"),d3Collection=require("d3-collection"),d3Color=require("d3-color"),d3Contour=require("d3-contour"),d3Dispatch=require("d3-dispatch"),d3Drag=require("d3-drag"),d3Dsv=require("d3-dsv"),d3Ease=require("d3-ease"),d3Fetch=require("d3-fetch"),d3Force=require("d3-force"),d3Format=require("d3-format"),d3Geo=require("d3-geo"),d3Hierarchy=require("d3-hierarchy"),d3Interpolate=require("d3-interpolate"),d3Path=require("d3-path"),d3Polygon=require("d3-polygon"),d3Quadtree=require("d3-quadtree"),d3Random=require("d3-random"),d3Scale=require("d3-scale"),d3ScaleChromatic=require("d3-scale-chromatic"),d3Selection=require("d3-selection"),d3Shape=require("d3-shape"),d3Time=require("d3-time"),d3TimeFormat=require("d3-time-format"),d3Timer=require("d3-timer"),d3Transition=require("d3-transition"),d3Voronoi=require("d3-voronoi"),d3Zoom=require("d3-zoom"),version="5.9.1";Object.keys(d3Array).forEach(function(e){exports[e]=d3Array[e]}),Object.keys(d3Axis).forEach(function(e){exports[e]=d3Axis[e]}),Object.keys(d3Brush).forEach(function(e){exports[e]=d3Brush[e]}),Object.keys(d3Chord).forEach(function(e){exports[e]=d3Chord[e]}),Object.keys(d3Collection).forEach(function(e){exports[e]=d3Collection[e]}),Object.keys(d3Color).forEach(function(e){exports[e]=d3Color[e]}),Object.keys(d3Contour).forEach(function(e){exports[e]=d3Contour[e]}),Object.keys(d3Dispatch).forEach(function(e){exports[e]=d3Dispatch[e]}),Object.keys(d3Drag).forEach(function(e){exports[e]=d3Drag[e]}),Object.keys(d3Dsv).forEach(function(e){exports[e]=d3Dsv[e]}),Object.keys(d3Ease).forEach(function(e){exports[e]=d3Ease[e]}),Object.keys(d3Fetch).forEach(function(e){exports[e]=d3Fetch[e]}),Object.keys(d3Force).forEach(function(e){exports[e]=d3Force[e]}),Object.keys(d3Format).forEach(function(e){exports[e]=d3Format[e]}),Object.keys(d3Geo).forEach(function(e){exports[e]=d3Geo[e]}),Object.keys(d3Hierarchy).forEach(function(e){exports[e]=d3Hierarchy[e]}),Object.keys(d3Interpolate).forEach(function(e){exports[e]=d3Interpolate[e]}),Object.keys(d3Path).forEach(function(e){exports[e]=d3Path[e]}),Object.keys(d3Polygon).forEach(function(e){exports[e]=d3Polygon[e]}),Object.keys(d3Quadtree).forEach(function(e){exports[e]=d3Quadtree[e]}),Object.keys(d3Random).forEach(function(e){exports[e]=d3Random[e]}),Object.keys(d3Scale).forEach(function(e){exports[e]=d3Scale[e]}),Object.keys(d3ScaleChromatic).forEach(function(e){exports[e]=d3ScaleChromatic[e]}),Object.keys(d3Selection).forEach(function(e){exports[e]=d3Selection[e]}),Object.keys(d3Shape).forEach(function(e){exports[e]=d3Shape[e]}),Object.keys(d3Time).forEach(function(e){exports[e]=d3Time[e]}),Object.keys(d3TimeFormat).forEach(function(e){exports[e]=d3TimeFormat[e]}),Object.keys(d3Timer).forEach(function(e){exports[e]=d3Timer[e]}),Object.keys(d3Transition).forEach(function(e){exports[e]=d3Transition[e]}),Object.keys(d3Voronoi).forEach(function(e){exports[e]=d3Voronoi[e]}),Object.keys(d3Zoom).forEach(function(e){exports[e]=d3Zoom[e]}),exports.version=version,Object.defineProperty(exports,"event",{get:function(){return d3Selection.event}});

},{"d3-array":5,"d3-axis":6,"d3-brush":7,"d3-chord":8,"d3-collection":9,"d3-color":10,"d3-contour":11,"d3-dispatch":12,"d3-drag":13,"d3-dsv":14,"d3-ease":15,"d3-fetch":16,"d3-force":17,"d3-format":18,"d3-geo":19,"d3-hierarchy":20,"d3-interpolate":21,"d3-path":22,"d3-polygon":23,"d3-quadtree":24,"d3-random":25,"d3-scale":27,"d3-scale-chromatic":26,"d3-selection":28,"d3-shape":29,"d3-time":31,"d3-time-format":30,"d3-timer":32,"d3-transition":33,"d3-voronoi":34,"d3-zoom":35}],37:[function(require,module,exports){
(function (global){
!function(){"use strict";var t=Math.PI/180,e={version:"2.6.0",stages:[],idCounter:0,ids:{},names:{},shapes:{},listenClickTap:!1,inDblClickWindow:!1,isBrowser:"undefined"!=typeof window&&("[object Window]"==={}.toString.call(window)||"[object global]"==={}.toString.call(window)),isUnminified:/comment/.test(function(){}),enableTrace:!1,traceArrMax:100,dblClickWindow:400,pixelRatio:void 0,dragDistance:3,angleDeg:!0,showWarnings:!0,Filters:{},isDragging:function(){var t=e.DD;return!!t&&t.isDragging},isDragReady:function(){var t=e.DD;return!!t&&!!t.node},_addId:function(t,e){e&&(this.ids[e]=t)},_removeId:function(t){void 0!==t&&delete this.ids[t]},_addName:function(t,e){e&&(this.names[e]||(this.names[e]=[]),this.names[e].push(t))},_removeName:function(t,e){if(t){var i=this.names[t];if(i){for(var n=0;n<i.length;n++){i[n]._id===e&&i.splice(n,1)}0===i.length&&delete this.names[t]}}},getAngle:function(e){return this.angleDeg?e*t:e},_detectIE:function(t){var e=t.indexOf("msie ");if(e>0)return parseInt(t.substring(e+5,t.indexOf(".",e)),10);if(t.indexOf("trident/")>0){var i=t.indexOf("rv:");return parseInt(t.substring(i+3,t.indexOf(".",i)),10)}var n=t.indexOf("edge/");return n>0&&parseInt(t.substring(n+5,t.indexOf(".",n)),10)},_parseUA:function(t){var i=t.toLowerCase(),n=/(chrome)[ \/]([\w.]+)/.exec(i)||/(webkit)[ \/]([\w.]+)/.exec(i)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(i)||/(msie) ([\w.]+)/.exec(i)||i.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(i)||[],a=!!t.match(/Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile/i),r=!!t.match(/IEMobile/i);return{browser:n[1]||"",version:n[2]||"0",isIE:e._detectIE(i),mobile:a,ieMobile:r}},UA:void 0},i="undefined"!=typeof global?global:"undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope?self:{};e.UA=e._parseUA(i.navigator&&i.navigator.userAgent||""),i.Konva&&console.error("Konva instance is already exist in current eviroment. Please use only one instance."),i.Konva=e,e.global=i,e.window=i,e.document=i.document,"object"==typeof exports?module.exports=e:"function"==typeof define&&define.amd&&define(function(){return e})}(),function(){"use strict";Konva.Collection=function(){var t=[].slice.call(arguments),e=t.length,i=0;for(this.length=e;i<e;i++)this[i]=t[i];return this},Konva.Collection.prototype=[],Konva.Collection.prototype.each=function(t){for(var e=0;e<this.length;e++)t(this[e],e)},Konva.Collection.prototype.toArray=function(){var t,e=[],i=this.length;for(t=0;t<i;t++)e.push(this[t]);return e},Konva.Collection.toCollection=function(t){var e,i=new Konva.Collection,n=t.length;for(e=0;e<n;e++)i.push(t[e]);return i},Konva.Collection._mapMethod=function(t){Konva.Collection.prototype[t]=function(){var e,i=this.length,n=[].slice.call(arguments);for(e=0;e<i;e++)this[e][t].apply(this[e],n);return this}},Konva.Collection.mapMethods=function(t){var e=t.prototype;for(var i in e)Konva.Collection._mapMethod(i)},Konva.Transform=function(t){this.m=t&&t.slice()||[1,0,0,1,0,0]},Konva.Transform.prototype={copy:function(){return new Konva.Transform(this.m)},point:function(t){var e=this.m;return{x:e[0]*t.x+e[2]*t.y+e[4],y:e[1]*t.x+e[3]*t.y+e[5]}},translate:function(t,e){return this.m[4]+=this.m[0]*t+this.m[2]*e,this.m[5]+=this.m[1]*t+this.m[3]*e,this},scale:function(t,e){return this.m[0]*=t,this.m[1]*=t,this.m[2]*=e,this.m[3]*=e,this},rotate:function(t){var e=Math.cos(t),i=Math.sin(t),n=this.m[0]*e+this.m[2]*i,a=this.m[1]*e+this.m[3]*i,r=this.m[0]*-i+this.m[2]*e,o=this.m[1]*-i+this.m[3]*e;return this.m[0]=n,this.m[1]=a,this.m[2]=r,this.m[3]=o,this},getTranslation:function(){return{x:this.m[4],y:this.m[5]}},skew:function(t,e){var i=this.m[0]+this.m[2]*e,n=this.m[1]+this.m[3]*e,a=this.m[2]+this.m[0]*t,r=this.m[3]+this.m[1]*t;return this.m[0]=i,this.m[1]=n,this.m[2]=a,this.m[3]=r,this},multiply:function(t){var e=this.m[0]*t.m[0]+this.m[2]*t.m[1],i=this.m[1]*t.m[0]+this.m[3]*t.m[1],n=this.m[0]*t.m[2]+this.m[2]*t.m[3],a=this.m[1]*t.m[2]+this.m[3]*t.m[3],r=this.m[0]*t.m[4]+this.m[2]*t.m[5]+this.m[4],o=this.m[1]*t.m[4]+this.m[3]*t.m[5]+this.m[5];return this.m[0]=e,this.m[1]=i,this.m[2]=n,this.m[3]=a,this.m[4]=r,this.m[5]=o,this},invert:function(){var t=1/(this.m[0]*this.m[3]-this.m[1]*this.m[2]),e=this.m[3]*t,i=-this.m[1]*t,n=-this.m[2]*t,a=this.m[0]*t,r=t*(this.m[2]*this.m[5]-this.m[3]*this.m[4]),o=t*(this.m[1]*this.m[4]-this.m[0]*this.m[5]);return this.m[0]=e,this.m[1]=i,this.m[2]=n,this.m[3]=a,this.m[4]=r,this.m[5]=o,this},getMatrix:function(){return this.m},setAbsolutePosition:function(t,e){var i=this.m[0],n=this.m[1],a=this.m[2],r=this.m[3],o=this.m[4],s=(i*(e-this.m[5])-n*(t-o))/(i*r-n*a),h=(t-o-a*s)/i;return this.translate(h,s)}};var t=Math.PI/180,e=180/Math.PI,i={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,132,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,255,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,203],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[119,128,144],slategrey:[119,128,144],snow:[255,255,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],transparent:[255,255,255,0],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,5]},n=/rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/;Konva.Util={_isElement:function(t){return!(!t||1!=t.nodeType)},_isFunction:function(t){return!!(t&&t.constructor&&t.call&&t.apply)},_isObject:function(t){return!!t&&t.constructor===Object},_isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},_isNumber:function(t){return"[object Number]"===Object.prototype.toString.call(t)&&!isNaN(t)&&isFinite(t)},_isString:function(t){return"[object String]"===Object.prototype.toString.call(t)},_isBoolean:function(t){return"[object Boolean]"===Object.prototype.toString.call(t)},isObject:function(t){return t instanceof Object},isValidSelector:function(t){if("string"!=typeof t)return!1;var e=t[0];return"#"===e||"."===e||e===e.toUpperCase()},_sign:function(t){return 0===t?0:t>0?1:-1},createCanvasElement:function(){var t=Konva.isBrowser?Konva.document.createElement("canvas"):new Konva._nodeCanvas;try{t.style=t.style||{}}catch(t){}return t},_isInDocument:function(t){for(;t=t.parentNode;)if(t==Konva.document)return!0;return!1},_simplifyArray:function(t){var e,i,n=[],a=t.length,r=Konva.Util;for(e=0;e<a;e++)i=t[e],r._isNumber(i)?i=Math.round(1e3*i)/1e3:r._isString(i)||(i=i.toString()),n.push(i);return n},_getImage:function(t,e){var i,n;if(t)if(this._isElement(t))e(t);else if(this._isString(t))(i=new Konva.window.Image).onload=function(){e(i)},i.src=t;else if(t.data){(n=Konva.Util.createCanvasElement()).width=t.width,n.height=t.height,n.getContext("2d").putImageData(t,0,0),this._getImage(n.toDataURL(),e)}else e(null);else e(null)},_getRGBAString:function(t){return["rgba(",t.red||0,",",t.green||0,",",t.blue||0,",",t.alpha||1,")"].join("")},_rgbToHex:function(t,e,i){return((1<<24)+(t<<16)+(e<<8)+i).toString(16).slice(1)},_hexToRgb:function(t){t=t.replace("#","");var e=parseInt(t,16);return{r:e>>16&255,g:e>>8&255,b:255&e}},getRandomColor:function(){for(var t=(16777215*Math.random()<<0).toString(16);t.length<6;)t="0"+t;return"#"+t},get:function(t,e){return void 0===t?e:t},getRGB:function(t){var e;return t in i?{r:(e=i[t])[0],g:e[1],b:e[2]}:"#"===t[0]?this._hexToRgb(t.substring(1)):"rgb("===t.substr(0,4)?(e=n.exec(t.replace(/ /g,"")),{r:parseInt(e[1],10),g:parseInt(e[2],10),b:parseInt(e[3],10)}):{r:0,g:0,b:0}},colorToRGBA:function(t){return t=t||"black",Konva.Util._namedColorToRBA(t)||Konva.Util._hex3ColorToRGBA(t)||Konva.Util._hex6ColorToRGBA(t)||Konva.Util._rgbColorToRGBA(t)||Konva.Util._rgbaColorToRGBA(t)},_namedColorToRBA:function(t){var e=i[t.toLowerCase()];return e?{r:e[0],g:e[1],b:e[2],a:1}:null},_rgbColorToRGBA:function(t){if(0===t.indexOf("rgb(")){var e=(t=t.match(/rgb\(([^)]+)\)/)[1]).split(/ *, */).map(Number);return{r:e[0],g:e[1],b:e[2],a:1}}},_rgbaColorToRGBA:function(t){if(0===t.indexOf("rgba(")){var e=(t=t.match(/rgba\(([^)]+)\)/)[1]).split(/ *, */).map(Number);return{r:e[0],g:e[1],b:e[2],a:e[3]}}},_hex6ColorToRGBA:function(t){if("#"===t[0]&&7===t.length)return{r:parseInt(t.slice(1,3),16),g:parseInt(t.slice(3,5),16),b:parseInt(t.slice(5,7),16),a:1}},_hex3ColorToRGBA:function(t){if("#"===t[0]&&4===t.length)return{r:parseInt(t[1]+t[1],16),g:parseInt(t[2]+t[2],16),b:parseInt(t[3]+t[3],16),a:1}},_merge:function(t,e){var i=this._clone(e);for(var n in t)this._isObject(t[n])?i[n]=this._merge(t[n],i[n]):i[n]=t[n];return i},trimRight:function(t){return t.replace(/\s+$/,"")},trimLeft:function(t){return t.replace(/^\s+/,"")},haveIntersection:function(t,e){return!(e.x>t.x+t.width||e.x+e.width<t.x||e.y>t.y+t.height||e.y+e.height<t.y)},cloneObject:function(t){var e={};for(var i in t)this._isObject(t[i])?e[i]=this.cloneObject(t[i]):this._isArray(t[i])?e[i]=this.cloneArray(t[i]):e[i]=t[i];return e},cloneArray:function(t){return t.slice(0)},_degToRad:function(e){return e*t},_radToDeg:function(t){return t*e},_capitalize:function(t){return t.charAt(0).toUpperCase()+t.slice(1)},throw:function(t){throw new Error("Konva error: "+t)},error:function(t){console.error("Konva error: "+t)},warn:function(t){Konva.global.console&&console.warn&&Konva.showWarnings&&console.warn("Konva warning: "+t)},extend:function(t,e){function i(){this.constructor=t}i.prototype=e.prototype;var n=t.prototype;for(var a in t.prototype=new i,n)n.hasOwnProperty(a)&&(t.prototype[a]=n[a]);t.__super__=e.prototype,t.super=e},addMethods:function(t,e){var i;for(i in e)t.prototype[i]=e[i]},_getControlPoints:function(t,e,i,n,a,r,o){var s=Math.sqrt(Math.pow(i-t,2)+Math.pow(n-e,2)),h=Math.sqrt(Math.pow(a-i,2)+Math.pow(r-n,2)),l=o*s/(s+h),c=o*h/(s+h);return[i-l*(a-t),n-l*(r-e),i+c*(a-t),n+c*(r-e)]},_expandPoints:function(t,e){var i,n,a=t.length,r=[];for(i=2;i<a-2;i+=2)n=Konva.Util._getControlPoints(t[i-2],t[i-1],t[i],t[i+1],t[i+2],t[i+3],e),r.push(n[0]),r.push(n[1]),r.push(t[i]),r.push(t[i+1]),r.push(n[2]),r.push(n[3]);return r},_removeLastLetter:function(t){return t.substring(0,t.length-1)},each:function(t,e){for(var i in t)e(i,t[i])},_inRange:function(t,e,i){return e<=t&&t<i},_getProjectionToSegment:function(t,e,i,n,a,r){var o,s,h,l=(t-i)*(t-i)+(e-n)*(e-n);if(0==l)o=t,s=e,h=(a-i)*(a-i)+(r-n)*(r-n);else{var c=((a-t)*(i-t)+(r-e)*(n-e))/l;c<0?(o=t,s=e,h=(t-a)*(t-a)+(e-r)*(e-r)):c>1?(o=i,s=n,h=(i-a)*(i-a)+(n-r)*(n-r)):h=((o=t+c*(i-t))-a)*(o-a)+((s=e+c*(n-e))-r)*(s-r)}return[o,s,h]},_getProjectionToLine:function(t,e,i){var n=Konva.Util.cloneObject(t),a=Number.MAX_VALUE;return e.forEach(function(r,o){if(i||o!==e.length-1){var s=e[(o+1)%e.length],h=Konva.Util._getProjectionToSegment(r.x,r.y,s.x,s.y,t.x,t.y),l=h[0],c=h[1],d=h[2];d<a&&(n.x=l,n.y=c,a=d)}}),n},_prepareArrayForTween:function(t,e,i){var n,a=[],r=[];if(t.length>e.length){var o=e;e=t,t=o}for(n=0;n<t.length;n+=2)a.push({x:t[n],y:t[n+1]});for(n=0;n<e.length;n+=2)r.push({x:e[n],y:e[n+1]});var s=[];return r.forEach(function(t){var e=Konva.Util._getProjectionToLine(t,a,i);s.push(e.x),s.push(e.y)}),s},_prepareToStringify:function(t){var e;for(var i in t.visitedByCircularReferenceRemoval=!0,t)if(t.hasOwnProperty(i)&&t[i]&&"object"==typeof t[i])if(e=Object.getOwnPropertyDescriptor(t,i),t[i].visitedByCircularReferenceRemoval||Konva.Util._isElement(t[i])){if(!e.configurable)return null;delete t[i]}else if(null===Konva.Util._prepareToStringify(t[i])){if(!e.configurable)return null;delete t[i]}return delete t.visitedByCircularReferenceRemoval,t}}}(),function(){"use strict";var t;Konva.Canvas=function(t){this.init(t)},Konva.Canvas.prototype={init:function(e){var i=(e||{}).pixelRatio||Konva.pixelRatio||function(){if(t)return t;var e=Konva.Util.createCanvasElement().getContext("2d");return t=(Konva.window.devicePixelRatio||1)/(e.webkitBackingStorePixelRatio||e.mozBackingStorePixelRatio||e.msBackingStorePixelRatio||e.oBackingStorePixelRatio||e.backingStorePixelRatio||1)}();this.pixelRatio=i,this._canvas=Konva.Util.createCanvasElement(),this._canvas.style.padding=0,this._canvas.style.margin=0,this._canvas.style.border=0,this._canvas.style.background="transparent",this._canvas.style.position="absolute",this._canvas.style.top=0,this._canvas.style.left=0},getContext:function(){return this.context},getPixelRatio:function(){return this.pixelRatio},setPixelRatio:function(t){var e=this.pixelRatio;this.pixelRatio=t,this.setSize(this.getWidth()/e,this.getHeight()/e)},setWidth:function(t){this.width=this._canvas.width=t*this.pixelRatio,this._canvas.style.width=t+"px";var e=this.pixelRatio;this.getContext()._context.scale(e,e)},setHeight:function(t){this.height=this._canvas.height=t*this.pixelRatio,this._canvas.style.height=t+"px";var e=this.pixelRatio;this.getContext()._context.scale(e,e)},getWidth:function(){return this.width},getHeight:function(){return this.height},setSize:function(t,e){this.setWidth(t),this.setHeight(e)},toDataURL:function(t,e){try{return this._canvas.toDataURL(t,e)}catch(t){try{return this._canvas.toDataURL()}catch(t){return Konva.Util.warn("Unable to get data URL. "+t.message),""}}}},Konva.SceneCanvas=function(t){var e=t||{},i=e.width||0,n=e.height||0;Konva.Canvas.call(this,e),this.context=new Konva.SceneContext(this),this.setSize(i,n)},Konva.Util.extend(Konva.SceneCanvas,Konva.Canvas),Konva.HitCanvas=function(t){var e=t||{},i=e.width||0,n=e.height||0;Konva.Canvas.call(this,e),this.context=new Konva.HitContext(this),this.setSize(i,n),this.hitCanvas=!0},Konva.Util.extend(Konva.HitCanvas,Konva.Canvas)}(),function(){"use strict";var t=["arc","arcTo","beginPath","bezierCurveTo","clearRect","clip","closePath","createLinearGradient","createPattern","createRadialGradient","drawImage","fill","fillText","getImageData","createImageData","lineTo","moveTo","putImageData","quadraticCurveTo","rect","restore","rotate","save","scale","setLineDash","setTransform","stroke","strokeText","transform","translate"];Konva.Context=function(t){this.init(t)},Konva.Context.prototype={init:function(t){this.canvas=t,this._context=t._canvas.getContext("2d"),Konva.enableTrace&&(this.traceArr=[],this._enableTrace())},fillShape:function(t){t.getFillEnabled()&&this._fill(t)},strokeShape:function(t){t.getStrokeEnabled()&&this._stroke(t)},fillStrokeShape:function(t){t.getFillEnabled()&&this._fill(t),t.getStrokeEnabled()&&this._stroke(t)},getTrace:function(t){var e,i,n,a,r=this.traceArr,o=r.length,s="";for(e=0;e<o;e++)(n=(i=r[e]).method)?(a=i.args,s+=n,t?s+="()":Konva.Util._isArray(a[0])?s+="(["+a.join(",")+"])":s+="("+a.join(",")+")"):(s+=i.property,t||(s+="="+i.val)),s+=";";return s},clearTrace:function(){this.traceArr=[]},_trace:function(t){var e=this.traceArr;e.push(t),e.length>=Konva.traceArrMax&&e.shift()},reset:function(){var t=this.getCanvas().getPixelRatio();this.setTransform(1*t,0,0,1*t,0,0)},getCanvas:function(){return this.canvas},clear:function(t){var e=this.getCanvas();t?this.clearRect(t.x||0,t.y||0,t.width||0,t.height||0):this.clearRect(0,0,e.getWidth()/e.pixelRatio,e.getHeight()/e.pixelRatio)},_applyLineCap:function(t){var e=t.getLineCap();e&&this.setAttr("lineCap",e)},_applyOpacity:function(t){var e=t.getAbsoluteOpacity();1!==e&&this.setAttr("globalAlpha",e)},_applyLineJoin:function(t){var e=t.getLineJoin();e&&this.setAttr("lineJoin",e)},setAttr:function(t,e){this._context[t]=e},arc:function(){var t=arguments;this._context.arc(t[0],t[1],t[2],t[3],t[4],t[5])},beginPath:function(){this._context.beginPath()},bezierCurveTo:function(){var t=arguments;this._context.bezierCurveTo(t[0],t[1],t[2],t[3],t[4],t[5])},clearRect:function(){var t=arguments;this._context.clearRect(t[0],t[1],t[2],t[3])},clip:function(){this._context.clip()},closePath:function(){this._context.closePath()},createImageData:function(){var t=arguments;return 2===t.length?this._context.createImageData(t[0],t[1]):1===t.length?this._context.createImageData(t[0]):void 0},createLinearGradient:function(){var t=arguments;return this._context.createLinearGradient(t[0],t[1],t[2],t[3])},createPattern:function(){var t=arguments;return this._context.createPattern(t[0],t[1])},createRadialGradient:function(){var t=arguments;return this._context.createRadialGradient(t[0],t[1],t[2],t[3],t[4],t[5])},drawImage:function(){var t=arguments,e=this._context;3===t.length?e.drawImage(t[0],t[1],t[2]):5===t.length?e.drawImage(t[0],t[1],t[2],t[3],t[4]):9===t.length&&e.drawImage(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8])},isPointInPath:function(t,e){return this._context.isPointInPath(t,e)},fill:function(){this._context.fill()},fillRect:function(t,e,i,n){this._context.fillRect(t,e,i,n)},strokeRect:function(t,e,i,n){this._context.strokeRect(t,e,i,n)},fillText:function(){var t=arguments;this._context.fillText(t[0],t[1],t[2])},measureText:function(t){return this._context.measureText(t)},getImageData:function(){var t=arguments;return this._context.getImageData(t[0],t[1],t[2],t[3])},lineTo:function(){var t=arguments;this._context.lineTo(t[0],t[1])},moveTo:function(){var t=arguments;this._context.moveTo(t[0],t[1])},rect:function(){var t=arguments;this._context.rect(t[0],t[1],t[2],t[3])},putImageData:function(){var t=arguments;this._context.putImageData(t[0],t[1],t[2])},quadraticCurveTo:function(){var t=arguments;this._context.quadraticCurveTo(t[0],t[1],t[2],t[3])},restore:function(){this._context.restore()},rotate:function(){var t=arguments;this._context.rotate(t[0])},save:function(){this._context.save()},scale:function(){var t=arguments;this._context.scale(t[0],t[1])},setLineDash:function(){var t=arguments,e=this._context;this._context.setLineDash?e.setLineDash(t[0]):"mozDash"in e?e.mozDash=t[0]:"webkitLineDash"in e&&(e.webkitLineDash=t[0])},getLineDash:function(){return this._context.getLineDash()},setTransform:function(){var t=arguments;this._context.setTransform(t[0],t[1],t[2],t[3],t[4],t[5])},stroke:function(){this._context.stroke()},strokeText:function(){var t=arguments;this._context.strokeText(t[0],t[1],t[2])},transform:function(){var t=arguments;this._context.transform(t[0],t[1],t[2],t[3],t[4],t[5])},translate:function(){var t=arguments;this._context.translate(t[0],t[1])},_enableTrace:function(){var e,i,n=this,a=t.length,r=Konva.Util._simplifyArray,o=this.setAttr,s=function(t){var e,a=n[t];n[t]=function(){return i=r(Array.prototype.slice.call(arguments,0)),e=a.apply(n,arguments),n._trace({method:t,args:i}),e}};for(e=0;e<a;e++)s(t[e]);n.setAttr=function(){o.apply(n,arguments);var t=arguments[0],e=arguments[1];"shadowOffsetX"!==t&&"shadowOffsetY"!==t&&"shadowBlur"!==t||(e/=this.canvas.getPixelRatio()),n._trace({property:t,val:e})}}},["fillStyle","strokeStyle","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","lineCap","lineDashOffset","lineJoin","lineWidth","miterLimit","font","textAlign","textBaseline","globalAlpha","globalCompositeOperation"].forEach(function(t){Object.defineProperty(Konva.Context.prototype,t,{get:function(){return this._context[t]},set:function(e){this._context[t]=e}})}),Konva.SceneContext=function(t){Konva.Context.call(this,t)},Konva.SceneContext.prototype={_fillColor:function(t){var e=t.fill();this.setAttr("fillStyle",e),t._fillFunc(this)},_fillPattern:function(t){var e=t.getFillPatternX(),i=t.getFillPatternY(),n=t.getFillPatternScale(),a=Konva.getAngle(t.getFillPatternRotation()),r=t.getFillPatternOffset();(e||i)&&this.translate(e||0,i||0),a&&this.rotate(a),n&&this.scale(n.x,n.y),r&&this.translate(-1*r.x,-1*r.y),this.setAttr("fillStyle",this.createPattern(t.getFillPatternImage(),t.getFillPatternRepeat()||"repeat")),this.fill()},_fillLinearGradient:function(t){var e=t.getFillLinearGradientStartPoint(),i=t.getFillLinearGradientEndPoint(),n=t.getFillLinearGradientColorStops(),a=this.createLinearGradient(e.x,e.y,i.x,i.y);if(n){for(var r=0;r<n.length;r+=2)a.addColorStop(n[r],n[r+1]);this.setAttr("fillStyle",a),t._fillFunc(this)}},_fillRadialGradient:function(t){for(var e=t.getFillRadialGradientStartPoint(),i=t.getFillRadialGradientEndPoint(),n=t.getFillRadialGradientStartRadius(),a=t.getFillRadialGradientEndRadius(),r=t.getFillRadialGradientColorStops(),o=this.createRadialGradient(e.x,e.y,n,i.x,i.y,a),s=0;s<r.length;s+=2)o.addColorStop(r[s],r[s+1]);this.setAttr("fillStyle",o),this.fill()},_fill:function(t){var e=t.fill(),i=t.getFillPriority();if(e&&"color"===i)this._fillColor(t);else{var n=t.getFillPatternImage();if(n&&"pattern"===i)this._fillPattern(t);else{var a=t.getFillLinearGradientColorStops();if(a&&"linear-gradient"===i)this._fillLinearGradient(t);else{var r=t.getFillRadialGradientColorStops();r&&"radial-gradient"===i?this._fillRadialGradient(t):e?this._fillColor(t):n?this._fillPattern(t):a?this._fillLinearGradient(t):r&&this._fillRadialGradient(t)}}}},_strokeLinearGradient:function(t){var e=t.getStrokeLinearGradientStartPoint(),i=t.getStrokeLinearGradientEndPoint(),n=t.getStrokeLinearGradientColorStops(),a=this.createLinearGradient(e.x,e.y,i.x,i.y);if(n){for(var r=0;r<n.length;r+=2)a.addColorStop(n[r],n[r+1]);this.setAttr("strokeStyle",a)}},_stroke:function(t){var e=t.dash(),i=t.getStrokeScaleEnabled()||t instanceof Konva.Text;if(t.hasStroke()){if(!i){this.save();var n=this.getCanvas().getPixelRatio();this.setTransform(n,0,0,n,0,0)}this._applyLineCap(t),e&&t.dashEnabled()&&(this.setLineDash(e),this.setAttr("lineDashOffset",t.dashOffset())),this.setAttr("lineWidth",t.strokeWidth()),t.getShadowForStrokeEnabled()||this.setAttr("shadowColor","rgba(0,0,0,0)"),t.getStrokeLinearGradientColorStops()?this._strokeLinearGradient(t):this.setAttr("strokeStyle",t.stroke()),t._strokeFunc(this),i||this.restore()}},_applyShadow:function(t){var e=Konva.Util,i=e.get(t.getShadowRGBA(),"black"),n=e.get(t.getShadowBlur(),5),a=e.get(t.getShadowOffset(),{x:0,y:0}),r=t.getAbsoluteScale(),o=this.canvas.getPixelRatio(),s=r.x*o,h=r.y*o;this.setAttr("shadowColor",i),this.setAttr("shadowBlur",n*Math.min(Math.abs(s),Math.abs(h))),this.setAttr("shadowOffsetX",a.x*s),this.setAttr("shadowOffsetY",a.y*h)},_applyGlobalCompositeOperation:function(t){var e=t.getGlobalCompositeOperation();"source-over"!==e&&this.setAttr("globalCompositeOperation",e)}},Konva.Util.extend(Konva.SceneContext,Konva.Context),Konva.HitContext=function(t){Konva.Context.call(this,t)},Konva.HitContext.prototype={_fill:function(t){this.save(),this.setAttr("fillStyle",t.colorKey),t._fillFuncHit(this),this.restore()},_stroke:function(t){if(t.hasStroke()&&t.strokeHitEnabled()){var e=t.getStrokeScaleEnabled()||t instanceof Konva.Text;e||(this.save(),this.setTransform(1,0,0,1,0,0)),this._applyLineCap(t),this.setAttr("lineWidth",t.strokeWidth()),this.setAttr("strokeStyle",t.colorKey),t._strokeFuncHit(this),e||this.restore()}}},Konva.Util.extend(Konva.HitContext,Konva.Context)}(),function(){"use strict";Konva.Factory={addGetterSetter:function(t,e,i,n,a){this.addGetter(t,e,i),this.addSetter(t,e,n,a),this.addOverloadedGetterSetter(t,e)},addGetter:function(t,e,i){var n="get"+Konva.Util._capitalize(e);t.prototype[n]=function(){var t=this.attrs[e];return void 0===t?i:t}},addSetter:function(t,e,i,n){var a="set"+Konva.Util._capitalize(e);t.prototype[a]=function(t){return i&&null!=t&&(t=i.call(this,t,e)),this._setAttr(e,t),n&&n.call(this),this}},addComponentsGetterSetter:function(t,e,i,n,a){var r,o,s=i.length,h=Konva.Util._capitalize,l="get"+h(e),c="set"+h(e);t.prototype[l]=function(){var t={};for(r=0;r<s;r++)t[o=i[r]]=this.getAttr(e+h(o));return t},t.prototype[c]=function(t){var i,r=this.attrs[e];for(i in n&&(t=n.call(this,t)),t)t.hasOwnProperty(i)&&this._setAttr(e+h(i),t[i]);return this._fireChangeEvent(e,r,t),a&&a.call(this),this},this.addOverloadedGetterSetter(t,e)},addOverloadedGetterSetter:function(t,e){var i=Konva.Util._capitalize(e),n="set"+i,a="get"+i;t.prototype[e]=function(){return arguments.length?(this[n](arguments[0]),this):this[a]()}},addDeprecatedGetterSetter:function(t,e,i,n){Konva.Util.error("Adding deprecated "+e);var a="get"+Konva.Util._capitalize(e),r=e+" property is deprecated and will be removed soon. Look at Konva change log for more information.";t.prototype[a]=function(){Konva.Util.error(r);var t=this.attrs[e];return void 0===t?i:t},this.addSetter(t,e,n,function(){Konva.Util.error(r)}),this.addOverloadedGetterSetter(t,e)},backCompat:function(t,e){Konva.Util.each(e,function(e,i){var n=t.prototype[i],a="get"+Konva.Util._capitalize(e),r="set"+Konva.Util._capitalize(e);function o(){n.apply(this,arguments),Konva.Util.error('"'+e+'" method is deprecated and will be removed soon. Use ""'+i+'" instead.')}t.prototype[e]=o,t.prototype[a]=o,t.prototype[r]=o})},afterSetFilter:function(){this._filterUpToDate=!1}},Konva.Validators={RGBComponent:function(t){return t>255?255:t<0?0:Math.round(t)},alphaComponent:function(t){return t>1?1:t<1e-4?1e-4:t},_formatValue:function(t){return Konva.Util._isString(t)?'"'+t+'"':"[object Number]"===Object.prototype.toString.call(t)?t:Konva.Util._isBoolean(t)?t:Object.prototype.toString.call(t)},getNumberValidator:function(){if(Konva.isUnminified)return function(t,e){return Konva.Util._isNumber(t)||Konva.Util.warn(Konva.Validators._formatValue(t)+' is a not valid value for "'+e+'" attribute. The value should be a number.'),t}},getNumberOrAutoValidator:function(){if(Konva.isUnminified)return function(t,e){return Konva.Util._isNumber(t)||"auto"===t||Konva.Util.warn(Konva.Validators._formatValue(t)+' is a not valid value for "'+e+'" attribute. The value should be a number or "auto".'),t}},getStringValidator:function(){if(Konva.isUnminified)return function(t,e){return Konva.Util._isString(t)||Konva.Util.warn(Konva.Validators._formatValue(t)+' is a not valid value for "'+e+'" attribute. The value should be a string.'),t}},getFunctionValidator:function(){if(Konva.isUnminified)return function(t,e){return Konva.Util._isFunction(t)||Konva.Util.warn(Konva.Validators._formatValue(t)+' is a not valid value for "'+e+'" attribute. The value should be a function.'),t}},getNumberArrayValidator:function(){if(Konva.isUnminified)return function(t,e){return Konva.Util._isArray(t)?t.forEach(function(t){Konva.Util._isNumber(t)||Konva.Util.warn('"'+e+'" attribute has non numeric element '+t+". Make sure that all elements are numbers.")}):Konva.Util.warn(Konva.Validators._formatValue(t)+' is a not valid value for "'+e+'" attribute. The value should be a array of numbers.'),t}},getBooleanValidator:function(){if(Konva.isUnminified)return function(t,e){return!0===t||!1===t||Konva.Util.warn(Konva.Validators._formatValue(t)+' is a not valid value for "'+e+'" attribute. The value should be a boolean.'),t}}}}(),function(t){"use strict";var e="Shape",i=["id"],n=["xChange.konva","yChange.konva","scaleXChange.konva","scaleYChange.konva","skewXChange.konva","skewYChange.konva","rotationChange.konva","offsetXChange.konva","offsetYChange.konva","transformsEnabledChange.konva"].join(" "),a=["scaleXChange.konva","scaleYChange.konva"].join(" ");t.Node=function(t){this._init(t)},t.Util.addMethods(t.Node,{_init:function(e){this._id=t.idCounter++,this.eventListeners={},this.attrs={},this._cache={},this._filterUpToDate=!1,this._isUnderCache=!1,this.setAttrs(e),this.on(n,function(){this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform")}),this.on(a,function(){this._clearSelfAndDescendantCache("absoluteScale")}),this.on("visibleChange.konva",function(){this._clearSelfAndDescendantCache("visible")}),this.on("listeningChange.konva",function(){this._clearSelfAndDescendantCache("listening")}),this.on("opacityChange.konva",function(){this._clearSelfAndDescendantCache("absoluteOpacity")})},_clearCache:function(t){t?delete this._cache[t]:this._cache={}},_getCache:function(t,e){return void 0===this._cache[t]&&(this._cache[t]=e.call(this)),this._cache[t]},_clearSelfAndDescendantCache:function(t){this._clearCache(t),this._cache.canvas||this.children&&this.getChildren().each(function(e){e._clearSelfAndDescendantCache(t)})},clearCache:function(){return delete this._cache.canvas,this._filterUpToDate=!1,this._clearSelfAndDescendantCache(),this},cache:function(e){var i=e||{},n={};void 0!==i.x&&void 0!==i.y&&void 0!==i.width&&void 0!==i.height||(n=this.getClientRect({skipTransform:!0,relativeTo:this.getParent()}));var a=i.width||n.width,r=i.height||n.height,o=i.pixelRatio,s=void 0===i.x?n.x:i.x,h=void 0===i.y?n.y:i.y,l=i.offset||0,c=i.drawBorder||!1;if(a&&r){a+=2*l,r+=2*l,s-=l,h-=l;var d=new t.SceneCanvas({pixelRatio:o,width:a,height:r}),u=new t.SceneCanvas({pixelRatio:o,width:a,height:r}),g=new t.HitCanvas({pixelRatio:1,width:a,height:r}),f=d.getContext(),v=g.getContext();return g.isCache=!0,this.clearCache(),f.save(),v.save(),f.translate(-s,-h),v.translate(-s,-h),this._isUnderCache=!0,this._clearSelfAndDescendantCache("absoluteOpacity"),this._clearSelfAndDescendantCache("absoluteScale"),this.drawScene(d,this,!0),this.drawHit(g,this,!0),this._isUnderCache=!1,f.restore(),v.restore(),c&&(f.save(),f.beginPath(),f.rect(0,0,a,r),f.closePath(),f.setAttr("strokeStyle","red"),f.setAttr("lineWidth",5),f.stroke(),f.restore()),this._cache.canvas={scene:d,filter:u,hit:g,x:s,y:h},this}t.Util.error("Can not cache the node. Width or height of the node equals 0. Caching is skipped.")},getClientRect:function(){throw new Error('abstract "getClientRect" method call')},_transformedRect:function(t,e){var i,n,a,r,o=[{x:t.x,y:t.y},{x:t.x+t.width,y:t.y},{x:t.x+t.width,y:t.y+t.height},{x:t.x,y:t.y+t.height}],s=this.getAbsoluteTransform(e);return o.forEach(function(t){var e=s.point(t);void 0===i&&(i=a=e.x,n=r=e.y),i=Math.min(i,e.x),n=Math.min(n,e.y),a=Math.max(a,e.x),r=Math.max(r,e.y)}),{x:i,y:n,width:a-i,height:r-n}},_drawCachedSceneCanvas:function(t){t.save(),t._applyOpacity(this),t._applyGlobalCompositeOperation(this),t.translate(this._cache.canvas.x,this._cache.canvas.y);var e=this._getCachedSceneCanvas(),i=e.pixelRatio;t.drawImage(e._canvas,0,0,e.width/i,e.height/i),t.restore()},_drawCachedHitCanvas:function(t){var e=this._cache.canvas.hit;t.save(),t.translate(this._cache.canvas.x,this._cache.canvas.y),t.drawImage(e._canvas,0,0),t.restore()},_getCachedSceneCanvas:function(){var e,i,n,a,r=this.filters(),o=this._cache.canvas,s=o.scene,h=o.filter,l=h.getContext();if(r){if(!this._filterUpToDate){var c=s.pixelRatio;try{for(e=r.length,l.clear(),l.drawImage(s._canvas,0,0,s.getWidth()/c,s.getHeight()/c),i=l.getImageData(0,0,h.getWidth(),h.getHeight()),n=0;n<e;n++)"function"==typeof(a=r[n])?(a.call(this,i),l.putImageData(i,0,0)):t.Util.error("Filter should be type of function, but got "+typeof a+" insted. Please check correct filters")}catch(e){t.Util.error("Unable to apply filter. "+e.message)}this._filterUpToDate=!0}return h}return s},on:function(t,e){if(3===arguments.length)return this._delegate.apply(this,arguments);var i,n,a,r,o=t.split(" "),s=o.length;for(i=0;i<s;i++)a=(n=o[i].split("."))[0],r=n[1]||"",this.eventListeners[a]||(this.eventListeners[a]=[]),this.eventListeners[a].push({name:r,handler:e});return this},off:function(t,e){var i,n,a,r,o,s=(t||"").split(" "),h=s.length;if(!t)for(n in this.eventListeners)this._off(n);for(i=0;i<h;i++)if(r=(a=s[i].split("."))[0],o=a[1],r)this.eventListeners[r]&&this._off(r,o,e);else for(n in this.eventListeners)this._off(n,o,e);return this},dispatchEvent:function(t){var e={target:this,type:t.type,evt:t};return this.fire(t.type,e),this},addEventListener:function(t,e){return this.on(t,function(t){e.call(this,t.evt)}),this},removeEventListener:function(t){return this.off(t),this},_delegate:function(e,i,n){var a=this;this.on(e,function(e){for(var r=e.target.findAncestors(i,!0,a),o=0;o<r.length;o++)(e=t.Util.cloneObject(e)).currentTarget=r[o],n.call(r[o],e)})},remove:function(){var t=this.getParent();return t&&t.children&&(t.children.splice(this.index,1),t._setChildrenIndices(),delete this.parent),this._clearSelfAndDescendantCache("stage"),this._clearSelfAndDescendantCache("absoluteTransform"),this._clearSelfAndDescendantCache("visible"),this._clearSelfAndDescendantCache("listening"),this._clearSelfAndDescendantCache("absoluteOpacity"),this},destroy:function(){t._removeId(this.getId());for(var e=(this.getName()||"").split(/\s/g),i=0;i<e.length;i++){var n=e[i];t._removeName(n,this._id)}return this.remove(),this},getAttr:function(e){var i="get"+t.Util._capitalize(e);return t.Util._isFunction(this[i])?this[i]():this.attrs[e]},getAncestors:function(){for(var e=this.getParent(),i=new t.Collection;e;)i.push(e),e=e.getParent();return i},getAttrs:function(){return this.attrs||{}},setAttrs:function(e){var i,n;if(!e)return this;for(i in e)"children"!==i&&(n="set"+t.Util._capitalize(i),t.Util._isFunction(this[n])?this[n](e[i]):this._setAttr(i,e[i]));return this},isListening:function(){return this._getCache("listening",this._isListening)},_isListening:function(){var t=this.getListening(),e=this.getParent();return"inherit"===t?!e||e.isListening():t},isVisible:function(){return this._getCache("visible",this._isVisible)},_isVisible:function(t){var e=this.getVisible(),i=this.getParent();return t===i&&"inherit"===e||(t===i?e:"inherit"===e?!i||i._isVisible(t):e)},shouldDrawHit:function(){var t=this.getLayer();return!t&&this.isListening()&&this.isVisible()||t&&t.hitGraphEnabled()&&this.isListening()&&this.isVisible()},show:function(){return this.setVisible(!0),this},hide:function(){return this.setVisible(!1),this},getZIndex:function(){return this.index||0},getAbsoluteZIndex:function(){var t,i,n,a,r=this.getDepth(),o=this,s=0;return"Stage"!==o.nodeType&&function h(l){for(t=[],i=l.length,n=0;n<i;n++)a=l[n],s++,a.nodeType!==e&&(t=t.concat(a.getChildren().toArray())),a._id===o._id&&(n=i);t.length>0&&t[0].getDepth()<=r&&h(t)}(o.getStage().getChildren()),s},getDepth:function(){for(var t=0,e=this.parent;e;)t++,e=e.parent;return t},setPosition:function(t){return this.setX(t.x),this.setY(t.y),this},getPosition:function(){return{x:this.getX(),y:this.getY()}},getAbsolutePosition:function(e){var i=this.getAbsoluteTransform(e).getMatrix(),n=new t.Transform,a=this.offset();return n.m=i.slice(),n.translate(a.x,a.y),n.getTranslation()},setAbsolutePosition:function(t){var e,i=this._clearTransform();return this.attrs.x=i.x,this.attrs.y=i.y,delete i.x,delete i.y,(e=this.getAbsoluteTransform()).invert(),e.translate(t.x,t.y),t={x:this.attrs.x+e.getTranslation().x,y:this.attrs.y+e.getTranslation().y},this.setPosition({x:t.x,y:t.y}),this._setTransform(i),this},_setTransform:function(t){var e;for(e in t)this.attrs[e]=t[e];this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform")},_clearTransform:function(){var t={x:this.getX(),y:this.getY(),rotation:this.getRotation(),scaleX:this.getScaleX(),scaleY:this.getScaleY(),offsetX:this.getOffsetX(),offsetY:this.getOffsetY(),skewX:this.getSkewX(),skewY:this.getSkewY()};return this.attrs.x=0,this.attrs.y=0,this.attrs.rotation=0,this.attrs.scaleX=1,this.attrs.scaleY=1,this.attrs.offsetX=0,this.attrs.offsetY=0,this.attrs.skewX=0,this.attrs.skewY=0,this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform"),t},move:function(t){var e=t.x,i=t.y,n=this.getX(),a=this.getY();return void 0!==e&&(n+=e),void 0!==i&&(a+=i),this.setPosition({x:n,y:a}),this},_eachAncestorReverse:function(t,e){var i,n,a=[],r=this.getParent();if(e&&e._id===this._id)t(this);else{for(a.unshift(this);r&&(!e||r._id!==e._id);)a.unshift(r),r=r.parent;for(i=a.length,n=0;n<i;n++)t(a[n])}},rotate:function(t){return this.setRotation(this.getRotation()+t),this},moveToTop:function(){if(!this.parent)return t.Util.warn("Node has no parent. moveToTop function is ignored."),!1;var e=this.index;return this.parent.children.splice(e,1),this.parent.children.push(this),this.parent._setChildrenIndices(),!0},moveUp:function(){if(!this.parent)return t.Util.warn("Node has no parent. moveUp function is ignored."),!1;var e=this.index;return e<this.parent.getChildren().length-1&&(this.parent.children.splice(e,1),this.parent.children.splice(e+1,0,this),this.parent._setChildrenIndices(),!0)},moveDown:function(){if(!this.parent)return t.Util.warn("Node has no parent. moveDown function is ignored."),!1;var e=this.index;return e>0&&(this.parent.children.splice(e,1),this.parent.children.splice(e-1,0,this),this.parent._setChildrenIndices(),!0)},moveToBottom:function(){if(!this.parent)return t.Util.warn("Node has no parent. moveToBottom function is ignored."),!1;var e=this.index;return e>0&&(this.parent.children.splice(e,1),this.parent.children.unshift(this),this.parent._setChildrenIndices(),!0)},setZIndex:function(e){if(!this.parent)return t.Util.warn("Node has no parent. zIndex parameter is ignored."),!1;var i=this.index;return this.parent.children.splice(i,1),this.parent.children.splice(e,0,this),this.parent._setChildrenIndices(),this},getAbsoluteOpacity:function(){return this._getCache("absoluteOpacity",this._getAbsoluteOpacity)},_getAbsoluteOpacity:function(){var t=this.getOpacity(),e=this.getParent();return e&&!e._isUnderCache&&(t*=this.getParent().getAbsoluteOpacity()),t},moveTo:function(t){return this.getParent()!==t&&((this.__originalRemove||this.remove).call(this),t.add(this)),this},toObject:function(){var e,i,n,a,r={},o=this.getAttrs();for(e in r.attrs={},o)i=o[e],n="function"==typeof this[e]&&this[e],delete o[e],a=n?n.call(this):null,o[e]=i,a!==i&&(r.attrs[e]=i);return r.className=this.getClassName(),t.Util._prepareToStringify(r)},toJSON:function(){return JSON.stringify(this.toObject())},getParent:function(){return this.parent},findAncestors:function(t,e,i){var n=[];e&&this._isMatch(t)&&n.push(this);for(var a=this.parent;a;){if(a===i)return n;a._isMatch(t)&&n.push(a),a=a.parent}return n},findAncestor:function(t,e,i){return this.findAncestors(t,e,i)[0]},_isMatch:function(e){if(!e)return!1;var i,n,a=e.replace(/ /g,"").split(","),r=a.length;for(i=0;i<r;i++)if(n=a[i],t.Util.isValidSelector(n)||(t.Util.warn('Selector "'+n+'" is invalid. Allowed selectors examples are "#foo", ".bar" or "Group".'),t.Util.warn('If you have a custom shape with such className, please change it to start with upper letter like "Triangle".'),t.Util.warn("Konva is awesome, right?")),"#"===n.charAt(0)){if(this.id()===n.slice(1))return!0}else if("."===n.charAt(0)){if(this.hasName(n.slice(1)))return!0}else if(0!==this._get(n).length)return!0;return!1},getLayer:function(){var t=this.getParent();return t?t.getLayer():null},getStage:function(){return this._getCache("stage",this._getStage)},_getStage:function(){var t=this.getParent();return t?t.getStage():void 0},fire:function(t,e,i){return(e=e||{}).target=e.target||this,i?this._fireAndBubble(t,e):this._fire(t,e),this},getAbsoluteTransform:function(t){return t?this._getAbsoluteTransform(t):this._getCache("absoluteTransform",this._getAbsoluteTransform)},_getAbsoluteTransform:function(e){var i=new t.Transform;return this._eachAncestorReverse(function(t){var e=t.transformsEnabled();"all"===e?i.multiply(t.getTransform()):"position"===e&&i.translate(t.getX()-t.getOffsetX(),t.getY()-t.getOffsetY())},e),i},getAbsoluteScale:function(t){return t?this._getAbsoluteScale(t):this._getCache("absoluteScale",this._getAbsoluteScale)},_getAbsoluteScale:function(t){for(var e=this;e;)e._isUnderCache&&(t=e),e=e.getParent();var i=1,n=1;return this._eachAncestorReverse(function(t){i*=t.scaleX(),n*=t.scaleY()},t),{x:i,y:n}},getTransform:function(){return this._getCache("transform",this._getTransform)},_getTransform:function(){var e=new t.Transform,i=this.getX(),n=this.getY(),a=t.getAngle(this.getRotation()),r=this.getScaleX(),o=this.getScaleY(),s=this.getSkewX(),h=this.getSkewY(),l=this.getOffsetX(),c=this.getOffsetY();return 0===i&&0===n||e.translate(i,n),0!==a&&e.rotate(a),0===s&&0===h||e.skew(s,h),1===r&&1===o||e.scale(r,o),0===l&&0===c||e.translate(-1*l,-1*c),e},clone:function(e){var n,a,r,o,s,h=t.Util.cloneObject(this.attrs);for(var l in i){delete h[i[l]]}for(n in e)h[n]=e[n];var c=new this.constructor(h);for(n in this.eventListeners)for(r=(a=this.eventListeners[n]).length,o=0;o<r;o++)(s=a[o]).name.indexOf("konva")<0&&(c.eventListeners[n]||(c.eventListeners[n]=[]),c.eventListeners[n].push(s));return c},_toKonvaCanvas:function(e){e=e||{};var i=this.getClientRect(),n=this.getStage(),a=void 0!==e.x?e.x:i.x,r=void 0!==e.y?e.y:i.y,o=e.pixelRatio||1,s=new t.SceneCanvas({width:e.width||i.width||(n?n.getWidth():0),height:e.height||i.height||(n?n.getHeight():0),pixelRatio:o}),h=s.getContext();return h.save(),(a||r)&&h.translate(-1*a,-1*r),this.drawScene(s),h.restore(),s},toCanvas:function(t){return this._toKonvaCanvas(t)._canvas},toDataURL:function(t){var e=(t=t||{}).mimeType||null,i=t.quality||null,n=this._toKonvaCanvas(t).toDataURL(e,i);return t.callback&&t.callback(n),n},toImage:function(e){if(!e||!e.callback)throw"callback required for toImage method config argument";var i=e.callback;delete e.callback,t.Util._getImage(this.toDataURL(e),function(t){i(t)})},setSize:function(t){return this.setWidth(t.width),this.setHeight(t.height),this},getSize:function(){return{width:this.getWidth(),height:this.getHeight()}},getWidth:function(){return this.attrs.width||0},getHeight:function(){return this.attrs.height||0},getClassName:function(){return this.className||this.nodeType},getType:function(){return this.nodeType},getDragDistance:function(){return void 0!==this.attrs.dragDistance?this.attrs.dragDistance:this.parent?this.parent.getDragDistance():t.dragDistance},_get:function(t){return this.className===t||this.nodeType===t?[this]:[]},_off:function(t,e,i){var n,a,r,o=this.eventListeners[t];for(n=0;n<o.length;n++)if(a=o[n].name,r=o[n].handler,!("konva"===a&&"konva"!==e||e&&a!==e||i&&i!==r)){if(o.splice(n,1),0===o.length){delete this.eventListeners[t];break}n--}},_fireChangeEvent:function(t,e,i){this._fire(t+"Change",{oldVal:e,newVal:i})},setId:function(e){var i=this.getId();return t._removeId(i),t._addId(this,e),this._setAttr("id",e),this},setName:function(e){var i,n,a=(this.getName()||"").split(/\s/g),r=(e||"").split(/\s/g);for(n=0;n<a.length;n++)i=a[n],-1===r.indexOf(i)&&i&&t._removeName(i,this._id);for(n=0;n<r.length;n++)i=r[n],-1===a.indexOf(i)&&i&&t._addName(this,i);return this._setAttr("name",e),this},addName:function(t){if(!this.hasName(t)){var e=this.name(),i=e?e+" "+t:t;this.setName(i)}return this},hasName:function(t){return-1!==(this.name()||"").split(/\s/g).indexOf(t)},removeName:function(t){var e=(this.name()||"").split(/\s/g),i=e.indexOf(t);return-1!==i&&(e.splice(i,1),this.setName(e.join(" "))),this},setAttr:function(e,i){var n=this["set"+t.Util._capitalize(e)];return t.Util._isFunction(n)?n.call(this,i):this._setAttr(e,i),this},_setAttr:function(e,i){var n;(n=this.attrs[e])===i&&!t.Util.isObject(i)||(null==i?delete this.attrs[e]:this.attrs[e]=i,this._fireChangeEvent(e,n,i))},_setComponentAttr:function(t,e,i){var n;void 0!==i&&((n=this.attrs[t])||(this.attrs[t]=this.getAttr(t)),this.attrs[t][e]=i,this._fireChangeEvent(t,n,i))},_fireAndBubble:function(t,i,n){var a=!0;if(i&&this.nodeType===e&&(i.target=this),"mouseenter"===t&&n&&(this._id===n._id||this.isAncestorOf&&this.isAncestorOf(n))?a=!1:"mouseleave"===t&&n&&(this._id===n._id||this.isAncestorOf&&this.isAncestorOf(n))&&(a=!1),a){this._fire(t,i);var r=("mouseenter"===t||"mouseleave"===t)&&n&&n.isAncestorOf&&n.isAncestorOf(this)&&!n.isAncestorOf(this.parent);(i&&!i.cancelBubble||!i)&&this.parent&&this.parent.isListening()&&!r&&(n&&n.parent?this._fireAndBubble.call(this.parent,t,i,n.parent):this._fireAndBubble.call(this.parent,t,i))}},_fire:function(t,e){var i,n=this.eventListeners[t];if((e=e||{}).currentTarget=this,e.type=t,n)for(i=0;i<n.length;i++)n[i].handler.call(this,e)},draw:function(){return this.drawScene(),this.drawHit(),this}}),t.Node.create=function(e,i){return t.Util._isString(e)&&(e=JSON.parse(e)),this._createNode(e,i)},t.Node._createNode=function(e,i){var n,a,r,o=t.Node.prototype.getClassName.call(e),s=e.children;if(i&&(e.attrs.container=i),n=new t[o](e.attrs),s)for(a=s.length,r=0;r<a;r++)n.add(this._createNode(s[r]));return n},t.Factory.addOverloadedGetterSetter(t.Node,"position"),t.Factory.addGetterSetter(t.Node,"x",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Node,"y",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Node,"globalCompositeOperation","source-over",t.Validators.getStringValidator()),t.Factory.addGetterSetter(t.Node,"opacity",1,t.Validators.getNumberValidator()),t.Factory.addGetter(t.Node,"name"),t.Factory.addOverloadedGetterSetter(t.Node,"name"),t.Factory.addGetter(t.Node,"id"),t.Factory.addOverloadedGetterSetter(t.Node,"id"),t.Factory.addGetterSetter(t.Node,"rotation",0,t.Validators.getNumberValidator()),t.Factory.addComponentsGetterSetter(t.Node,"scale",["x","y"]),t.Factory.addGetterSetter(t.Node,"scaleX",1,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Node,"scaleY",1,t.Validators.getNumberValidator()),t.Factory.addComponentsGetterSetter(t.Node,"skew",["x","y"]),t.Factory.addGetterSetter(t.Node,"skewX",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Node,"skewY",0,t.Validators.getNumberValidator()),t.Factory.addComponentsGetterSetter(t.Node,"offset",["x","y"]),t.Factory.addGetterSetter(t.Node,"offsetX",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Node,"offsetY",0,t.Validators.getNumberValidator()),t.Factory.addSetter(t.Node,"dragDistance",t.Validators.getNumberValidator()),t.Factory.addOverloadedGetterSetter(t.Node,"dragDistance"),t.Factory.addSetter(t.Node,"width",t.Validators.getNumberValidator()),t.Factory.addOverloadedGetterSetter(t.Node,"width"),t.Factory.addSetter(t.Node,"height",t.Validators.getNumberValidator()),t.Factory.addOverloadedGetterSetter(t.Node,"height"),t.Factory.addGetterSetter(t.Node,"listening","inherit",function(e){return!0===e||!1===e||"inherit"===e||t.Util.warn(e+' is a not valid value for "listening" attribute. The value may be true, false or "inherit".'),e}),t.Factory.addGetterSetter(t.Node,"preventDefault",!0,t.Validators.getBooleanValidator()),t.Factory.addGetterSetter(t.Node,"filters",null,function(t){return this._filterUpToDate=!1,t}),t.Factory.addGetterSetter(t.Node,"visible","inherit",function(e){return!0===e||!1===e||"inherit"===e||t.Util.warn(e+' is a not valid value for "visible" attribute. The value may be true, false or "inherit".'),e}),t.Factory.addGetterSetter(t.Node,"transformsEnabled","all",t.Validators.getStringValidator()),t.Factory.addOverloadedGetterSetter(t.Node,"size"),t.Factory.backCompat(t.Node,{rotateDeg:"rotate",setRotationDeg:"setRotation",getRotationDeg:"getRotation"}),t.Collection.mapMethods(t.Node)}(Konva),function(){"use strict";Konva.Filters.Grayscale=function(t){var e,i,n=t.data,a=n.length;for(e=0;e<a;e+=4)i=.34*n[e]+.5*n[e+1]+.16*n[e+2],n[e]=i,n[e+1]=i,n[e+2]=i}}(),function(t){"use strict";t.Filters.Brighten=function(t){var e,i=255*this.brightness(),n=t.data,a=n.length;for(e=0;e<a;e+=4)n[e]+=i,n[e+1]+=i,n[e+2]+=i},t.Factory.addGetterSetter(t.Node,"brightness",0,t.Validators.getNumberValidator(),t.Factory.afterSetFilter)}(Konva),function(){"use strict";Konva.Filters.Invert=function(t){var e,i=t.data,n=i.length;for(e=0;e<n;e+=4)i[e]=255-i[e],i[e+1]=255-i[e+1],i[e+2]=255-i[e+2]}}(),function(t){"use strict";function e(){this.r=0,this.g=0,this.b=0,this.a=0,this.next=null}var i=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],n=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];t.Filters.Blur=function(t){var a=Math.round(this.blurRadius());a>0&&function(t,a){var r,o,s,h,l,c,d,u,g,f,v,p,m,_,y,K,S,b,x,C,w,F,T,P,A=t.data,k=t.width,M=t.height,G=a+a+1,N=k-1,R=M-1,D=a+1,L=D*(D+1)/2,O=new e,V=null,U=O,I=null,E=null,B=i[a],z=n[a];for(s=1;s<G;s++)U=U.next=new e,s===D&&(V=U);for(U.next=O,d=c=0,o=0;o<M;o++){for(K=S=b=x=u=g=f=v=0,p=D*(C=A[c]),m=D*(w=A[c+1]),_=D*(F=A[c+2]),y=D*(T=A[c+3]),u+=L*C,g+=L*w,f+=L*F,v+=L*T,U=O,s=0;s<D;s++)U.r=C,U.g=w,U.b=F,U.a=T,U=U.next;for(s=1;s<D;s++)h=c+((N<s?N:s)<<2),u+=(U.r=C=A[h])*(P=D-s),g+=(U.g=w=A[h+1])*P,f+=(U.b=F=A[h+2])*P,v+=(U.a=T=A[h+3])*P,K+=C,S+=w,b+=F,x+=T,U=U.next;for(I=O,E=V,r=0;r<k;r++)A[c+3]=T=v*B>>z,0!==T?(T=255/T,A[c]=(u*B>>z)*T,A[c+1]=(g*B>>z)*T,A[c+2]=(f*B>>z)*T):A[c]=A[c+1]=A[c+2]=0,u-=p,g-=m,f-=_,v-=y,p-=I.r,m-=I.g,_-=I.b,y-=I.a,h=d+((h=r+a+1)<N?h:N)<<2,u+=K+=I.r=A[h],g+=S+=I.g=A[h+1],f+=b+=I.b=A[h+2],v+=x+=I.a=A[h+3],I=I.next,p+=C=E.r,m+=w=E.g,_+=F=E.b,y+=T=E.a,K-=C,S-=w,b-=F,x-=T,E=E.next,c+=4;d+=k}for(r=0;r<k;r++){for(S=b=x=K=g=f=v=u=0,p=D*(C=A[c=r<<2]),m=D*(w=A[c+1]),_=D*(F=A[c+2]),y=D*(T=A[c+3]),u+=L*C,g+=L*w,f+=L*F,v+=L*T,U=O,s=0;s<D;s++)U.r=C,U.g=w,U.b=F,U.a=T,U=U.next;for(l=k,s=1;s<=a;s++)c=l+r<<2,u+=(U.r=C=A[c])*(P=D-s),g+=(U.g=w=A[c+1])*P,f+=(U.b=F=A[c+2])*P,v+=(U.a=T=A[c+3])*P,K+=C,S+=w,b+=F,x+=T,U=U.next,s<R&&(l+=k);for(c=r,I=O,E=V,o=0;o<M;o++)A[3+(h=c<<2)]=T=v*B>>z,T>0?(T=255/T,A[h]=(u*B>>z)*T,A[h+1]=(g*B>>z)*T,A[h+2]=(f*B>>z)*T):A[h]=A[h+1]=A[h+2]=0,u-=p,g-=m,f-=_,v-=y,p-=I.r,m-=I.g,_-=I.b,y-=I.a,h=r+((h=o+D)<R?h:R)*k<<2,u+=K+=I.r=A[h],g+=S+=I.g=A[h+1],f+=b+=I.b=A[h+2],v+=x+=I.a=A[h+3],I=I.next,p+=C=E.r,m+=w=E.g,_+=F=E.b,y+=T=E.a,K-=C,S-=w,b-=F,x-=T,E=E.next,c+=k}}(t,a)},t.Factory.addGetterSetter(t.Node,"blurRadius",0,t.Validators.getNumberValidator(),t.Factory.afterSetFilter)}(Konva),function(){"use strict";function t(t,e,i){var n=4*(i*t.width+e),a=[];return a.push(t.data[n++],t.data[n++],t.data[n++],t.data[n++]),a}function e(t,e){return Math.sqrt(Math.pow(t[0]-e[0],2)+Math.pow(t[1]-e[1],2)+Math.pow(t[2]-e[2],2))}Konva.Filters.Mask=function(i){var n=function(i,n){var a=t(i,0,0),r=t(i,i.width-1,0),o=t(i,0,i.height-1),s=t(i,i.width-1,i.height-1),h=n||10;if(e(a,r)<h&&e(r,s)<h&&e(s,o)<h&&e(o,a)<h){for(var l=function(t){for(var e=[0,0,0],i=0;i<t.length;i++)e[0]+=t[i][0],e[1]+=t[i][1],e[2]+=t[i][2];return e[0]/=t.length,e[1]/=t.length,e[2]/=t.length,e}([r,a,s,o]),c=[],d=0;d<i.width*i.height;d++){var u=e(l,[i.data[4*d],i.data[4*d+1],i.data[4*d+2]]);c[d]=u<h?0:255}return c}}(i,this.threshold());return n&&function(t,e){for(var i=0;i<t.width*t.height;i++)t.data[4*i+3]=e[i]}(i,n=function(t,e,i){for(var n=[1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9],a=Math.round(Math.sqrt(n.length)),r=Math.floor(a/2),o=[],s=0;s<i;s++)for(var h=0;h<e;h++){for(var l=s*e+h,c=0,d=0;d<a;d++)for(var u=0;u<a;u++){var g=s+d-r,f=h+u-r;if(g>=0&&g<i&&f>=0&&f<e){var v=n[d*a+u];c+=t[g*e+f]*v}}o[l]=c}return o}(n=function(t,e,i){for(var n=[1,1,1,1,1,1,1,1,1],a=Math.round(Math.sqrt(n.length)),r=Math.floor(a/2),o=[],s=0;s<i;s++)for(var h=0;h<e;h++){for(var l=s*e+h,c=0,d=0;d<a;d++)for(var u=0;u<a;u++){var g=s+d-r,f=h+u-r;if(g>=0&&g<i&&f>=0&&f<e){var v=n[d*a+u];c+=t[g*e+f]*v}}o[l]=c>=1020?255:0}return o}(n=function(t,e,i){for(var n=[1,1,1,1,0,1,1,1,1],a=Math.round(Math.sqrt(n.length)),r=Math.floor(a/2),o=[],s=0;s<i;s++)for(var h=0;h<e;h++){for(var l=s*e+h,c=0,d=0;d<a;d++)for(var u=0;u<a;u++){var g=s+d-r,f=h+u-r;if(g>=0&&g<i&&f>=0&&f<e){var v=n[d*a+u];c+=t[g*e+f]*v}}o[l]=2040===c?255:0}return o}(n,i.width,i.height),i.width,i.height),i.width,i.height)),i},Konva.Factory.addGetterSetter(Konva.Node,"threshold",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter)}(),function(){"use strict";Konva.Filters.RGB=function(t){var e,i,n=t.data,a=n.length,r=this.red(),o=this.green(),s=this.blue();for(e=0;e<a;e+=4)i=(.34*n[e]+.5*n[e+1]+.16*n[e+2])/255,n[e]=i*r,n[e+1]=i*o,n[e+2]=i*s,n[e+3]=n[e+3]},Konva.Factory.addGetterSetter(Konva.Node,"red",0,function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)}),Konva.Factory.addGetterSetter(Konva.Node,"green",0,function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)}),Konva.Factory.addGetterSetter(Konva.Node,"blue",0,Konva.Validators.RGBComponent,Konva.Factory.afterSetFilter)}(),function(){"use strict";Konva.Filters.RGBA=function(t){var e,i,n=t.data,a=n.length,r=this.red(),o=this.green(),s=this.blue(),h=this.alpha();for(e=0;e<a;e+=4)i=1-h,n[e]=r*h+n[e]*i,n[e+1]=o*h+n[e+1]*i,n[e+2]=s*h+n[e+2]*i},Konva.Factory.addGetterSetter(Konva.Node,"red",0,function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)}),Konva.Factory.addGetterSetter(Konva.Node,"green",0,function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)}),Konva.Factory.addGetterSetter(Konva.Node,"blue",0,Konva.Validators.RGBComponent,Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"alpha",1,function(t){return this._filterUpToDate=!1,t>1?1:t<0?0:t})}(),function(){"use strict";Konva.Filters.HSV=function(t){var e,i,n,a,r,o=t.data,s=o.length,h=Math.pow(2,this.value()),l=Math.pow(2,this.saturation()),c=Math.abs(this.hue()+360)%360,d=h*l*Math.cos(c*Math.PI/180),u=h*l*Math.sin(c*Math.PI/180),g=.299*h+.701*d+.167*u,f=.587*h-.587*d+.33*u,v=.114*h-.114*d-.497*u,p=.299*h-.299*d-.328*u,m=.587*h+.413*d+.035*u,_=.114*h-.114*d+.293*u,y=.299*h-.3*d+1.25*u,K=.587*h-.586*d-1.05*u,S=.114*h+.886*d-.2*u;for(e=0;e<s;e+=4)i=o[e+0],n=o[e+1],a=o[e+2],r=o[e+3],o[e+0]=g*i+f*n+v*a,o[e+1]=p*i+m*n+_*a,o[e+2]=y*i+K*n+S*a,o[e+3]=r},Konva.Factory.addGetterSetter(Konva.Node,"hue",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"saturation",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"value",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter)}(),function(){"use strict";Konva.Factory.addGetterSetter(Konva.Node,"hue",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"saturation",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"luminance",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter),Konva.Filters.HSL=function(t){var e,i,n,a,r,o=t.data,s=o.length,h=Math.pow(2,this.saturation()),l=Math.abs(this.hue()+360)%360,c=127*this.luminance(),d=1*h*Math.cos(l*Math.PI/180),u=1*h*Math.sin(l*Math.PI/180),g=.299+.701*d+.167*u,f=.587-.587*d+.33*u,v=.114-.114*d-.497*u,p=.299-.299*d-.328*u,m=.587+.413*d+.035*u,_=.114-.114*d+.293*u,y=.299-.3*d+1.25*u,K=.587-.586*d-1.05*u,S=.114+.886*d-.2*u;for(e=0;e<s;e+=4)i=o[e+0],n=o[e+1],a=o[e+2],r=o[e+3],o[e+0]=g*i+f*n+v*a+c,o[e+1]=p*i+m*n+_*a+c,o[e+2]=y*i+K*n+S*a+c,o[e+3]=r}}(),function(){"use strict";Konva.Filters.Emboss=function(t){var e=10*this.embossStrength(),i=255*this.embossWhiteLevel(),n=this.embossDirection(),a=this.embossBlend(),r=0,o=0,s=t.data,h=t.width,l=t.height,c=4*h,d=l;switch(n){case"top-left":r=-1,o=-1;break;case"top":r=-1,o=0;break;case"top-right":r=-1,o=1;break;case"right":r=0,o=1;break;case"bottom-right":r=1,o=1;break;case"bottom":r=1,o=0;break;case"bottom-left":r=1,o=-1;break;case"left":r=0,o=-1;break;default:Konva.Util.error("Unknown emboss direction: "+n)}do{var u=(d-1)*c,g=r;d+g<1&&(g=0),d+g>l&&(g=0);var f=(d-1+g)*h*4,v=h;do{var p=u+4*(v-1),m=o;v+m<1&&(m=0),v+m>h&&(m=0);var _=f+4*(v-1+m),y=s[p]-s[_],K=s[p+1]-s[_+1],S=s[p+2]-s[_+2],b=y,x=b>0?b:-b;if((K>0?K:-K)>x&&(b=K),(S>0?S:-S)>x&&(b=S),b*=e,a){var C=s[p]+b,w=s[p+1]+b,F=s[p+2]+b;s[p]=C>255?255:C<0?0:C,s[p+1]=w>255?255:w<0?0:w,s[p+2]=F>255?255:F<0?0:F}else{var T=i-b;T<0?T=0:T>255&&(T=255),s[p]=s[p+1]=s[p+2]=T}}while(--v)}while(--d)},Konva.Factory.addGetterSetter(Konva.Node,"embossStrength",.5,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"embossWhiteLevel",.5,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"embossDirection","top-left",null,Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"embossBlend",!1,null,Konva.Factory.afterSetFilter)}(),function(){"use strict";function t(t,e,i,n,a){var r=i-e,o=a-n;return 0===r?n+o/2:0===o?n:o*((t-e)/r)+n}Konva.Filters.Enhance=function(e){var i,n,a,r,o=e.data,s=o.length,h=o[0],l=h,c=o[1],d=c,u=o[2],g=u,f=this.enhance();if(0!==f){for(r=0;r<s;r+=4)(i=o[r+0])<h?h=i:i>l&&(l=i),(n=o[r+1])<c?c=n:n>d&&(d=n),(a=o[r+2])<u?u=a:a>g&&(g=a);var v,p,m,_,y,K,S,b,x;for(l===h&&(l=255,h=0),d===c&&(d=255,c=0),g===u&&(g=255,u=0),f>0?(p=l+f*(255-l),m=h-f*(h-0),y=d+f*(255-d),K=c-f*(c-0),b=g+f*(255-g),x=u-f*(u-0)):(p=l+f*(l-(v=.5*(l+h))),m=h+f*(h-v),y=d+f*(d-(_=.5*(d+c))),K=c+f*(c-_),b=g+f*(g-(S=.5*(g+u))),x=u+f*(u-S)),r=0;r<s;r+=4)o[r+0]=t(o[r+0],h,l,m,p),o[r+1]=t(o[r+1],c,d,K,y),o[r+2]=t(o[r+2],u,g,x,b)}},Konva.Factory.addGetterSetter(Konva.Node,"enhance",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter)}(),function(){"use strict";Konva.Filters.Posterize=function(t){var e,i=Math.round(254*this.levels())+1,n=t.data,a=n.length,r=255/i;for(e=0;e<a;e+=1)n[e]=Math.floor(n[e]/r)*r},Konva.Factory.addGetterSetter(Konva.Node,"levels",.5,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter)}(),function(){"use strict";Konva.Filters.Noise=function(t){var e,i=255*this.noise(),n=t.data,a=n.length,r=i/2;for(e=0;e<a;e+=4)n[e+0]+=r-2*r*Math.random(),n[e+1]+=r-2*r*Math.random(),n[e+2]+=r-2*r*Math.random()},Konva.Factory.addGetterSetter(Konva.Node,"noise",.2,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter)}(),function(){"use strict";Konva.Filters.Pixelate=function(t){var e,i,n,a,r,o,s,h,l,c,d,u,g,f,v=Math.ceil(this.pixelSize()),p=t.width,m=t.height,_=Math.ceil(p/v),y=Math.ceil(m/v);if(t=t.data,v<=0)Konva.Util.error("pixelSize value can not be <= 0");else for(u=0;u<_;u+=1)for(g=0;g<y;g+=1){for(a=0,r=0,o=0,s=0,l=(h=u*v)+v,d=(c=g*v)+v,f=0,e=h;e<l;e+=1)if(!(e>=p))for(i=c;i<d;i+=1)i>=m||(a+=t[(n=4*(p*i+e))+0],r+=t[n+1],o+=t[n+2],s+=t[n+3],f+=1);for(a/=f,r/=f,o/=f,s/=f,e=h;e<l;e+=1)if(!(e>=p))for(i=c;i<d;i+=1)i>=m||(t[(n=4*(p*i+e))+0]=a,t[n+1]=r,t[n+2]=o,t[n+3]=s)}},Konva.Factory.addGetterSetter(Konva.Node,"pixelSize",8,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter)}(),function(){"use strict";Konva.Filters.Threshold=function(t){var e,i=255*this.threshold(),n=t.data,a=n.length;for(e=0;e<a;e+=1)n[e]=n[e]<i?0:255},Konva.Factory.addGetterSetter(Konva.Node,"threshold",.5,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter)}(),function(){"use strict";Konva.Filters.Sepia=function(t){var e,i,n,a,r,o,s,h,l,c=t.data,d=t.width,u=t.height,g=4*d;do{e=(u-1)*g,i=d;do{s=.393*(a=c[n=e+4*(i-1)])+.769*(r=c[n+1])+.189*(o=c[n+2]),h=.349*a+.686*r+.168*o,l=.272*a+.534*r+.131*o,c[n]=s>255?255:s,c[n+1]=h>255?255:h,c[n+2]=l>255?255:l,c[n+3]=c[n+3]}while(--i)}while(--u)}}(),function(){"use strict";Konva.Filters.Solarize=function(t){var e=t.data,i=t.width,n=4*i,a=t.height;do{var r=(a-1)*n,o=i;do{var s=r+4*(o-1),h=e[s],l=e[s+1],c=e[s+2];h>127&&(h=255-h),l>127&&(l=255-l),c>127&&(c=255-c),e[s]=h,e[s+1]=l,e[s+2]=c}while(--o)}while(--a)}}(),function(){"use strict";Konva.Filters.Kaleidoscope=function(t){var e,i,n,a,r,o,s,h,l,c=t.width,d=t.height,u=Math.round(this.kaleidoscopePower()),g=Math.round(this.kaleidoscopeAngle()),f=Math.floor(c*(g%360)/360);if(!(u<1)){var v=Konva.Util.createCanvasElement();v.width=c,v.height=d;var p=v.getContext("2d").getImageData(0,0,c,d);!function(t,e,i){var n,a,r,o,s=t.data,h=e.data,l=t.width,c=t.height,d=i.polarCenterX||l/2,u=i.polarCenterY||c/2,g=0,f=0,v=0,p=0,m=Math.sqrt(d*d+u*u);a=l-d,r=c-u,m=(o=Math.sqrt(a*a+r*r))>m?o:m;var _,y,K,S,b=c,x=l,C=360/x*Math.PI/180;for(y=0;y<x;y+=1)for(K=Math.sin(y*C),S=Math.cos(y*C),_=0;_<b;_+=1)a=Math.floor(d+m*_/b*S),g=s[0+(n=4*((r=Math.floor(u+m*_/b*K))*l+a))],f=s[n+1],v=s[n+2],p=s[n+3],h[0+(n=4*(y+_*l))]=g,h[n+1]=f,h[n+2]=v,h[n+3]=p}(t,p,{polarCenterX:c/2,polarCenterY:d/2});for(var m=c/Math.pow(2,u);m<=8;)m*=2,u-=1;var _=m=Math.ceil(m),y=0,K=_,S=1;for(f+m>c&&(y=_,K=0,S=-1),i=0;i<d;i+=1)for(e=y;e!==K;e+=S)h=4*(c*i+Math.round(e+f)%c),a=p.data[h+0],r=p.data[h+1],o=p.data[h+2],s=p.data[h+3],l=4*(c*i+e),p.data[l+0]=a,p.data[l+1]=r,p.data[l+2]=o,p.data[l+3]=s;for(i=0;i<d;i+=1)for(_=Math.floor(m),n=0;n<u;n+=1){for(e=0;e<_+1;e+=1)h=4*(c*i+e),a=p.data[h+0],r=p.data[h+1],o=p.data[h+2],s=p.data[h+3],l=4*(c*i+2*_-e-1),p.data[l+0]=a,p.data[l+1]=r,p.data[l+2]=o,p.data[l+3]=s;_*=2}!function(t,e,i){var n,a,r,o,s,h,l=t.data,c=e.data,d=t.width,u=t.height,g=i.polarCenterX||d/2,f=i.polarCenterY||u/2,v=0,p=0,m=0,_=0,y=Math.sqrt(g*g+f*f);a=d-g,r=u-f,y=(h=Math.sqrt(a*a+r*r))>y?h:y;var K,S,b,x=u,C=d,w=i.polarRotation||0;for(a=0;a<d;a+=1)for(r=0;r<u;r+=1)o=a-g,s=r-f,K=Math.sqrt(o*o+s*s)*x/y,S=(S=(180*Math.atan2(s,o)/Math.PI+360+w)%360)*C/360,b=Math.floor(S),v=l[0+(n=4*(Math.floor(K)*d+b))],p=l[n+1],m=l[n+2],_=l[n+3],c[0+(n=4*(r*d+a))]=v,c[n+1]=p,c[n+2]=m,c[n+3]=_}(p,t,{polarRotation:0})}},Konva.Factory.addGetterSetter(Konva.Node,"kaleidoscopePower",2,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"kaleidoscopeAngle",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter)}(),function(t){"use strict";t.Filters.Contrast=function(t){var e,i=Math.pow((parseInt(this.contrast())+100)/100,2),n=t.data,a=n.length,r=150,o=150,s=150;for(e=0;e<a;e+=4)r=n[e],o=n[e+1],s=n[e+2],r/=255,r-=.5,r*=i,r+=.5,o/=255,o-=.5,o*=i,o+=.5,s/=255,s-=.5,s*=i,s+=.5,r=(r*=255)<0?0:r>255?255:r,o=(o*=255)<0?0:o>255?255:o,s=(s*=255)<0?0:s>255?255:s,n[e]=r,n[e+1]=o,n[e+2]=s},t.Factory.addGetterSetter(t.Node,"contrast",0,t.Validators.getNumberValidator(),t.Factory.afterSetFilter)}(Konva),function(){"use strict";Konva.Container=function(t){this.__init(t)},Konva.Util.addMethods(Konva.Container,{__init:function(t){this.children=new Konva.Collection,Konva.Node.call(this,t)},getChildren:function(t){if(!t)return this.children;var e=new Konva.Collection;return this.children.each(function(i){t(i)&&e.push(i)}),e},hasChildren:function(){return this.getChildren().length>0},removeChildren:function(){for(var t,e=Konva.Collection.toCollection(this.children),i=0;i<e.length;i++)delete(t=e[i]).parent,t.index=0,t.remove();return e=null,this.children=new Konva.Collection,this},destroyChildren:function(){for(var t,e=Konva.Collection.toCollection(this.children),i=0;i<e.length;i++)delete(t=e[i]).parent,t.index=0,t.destroy();return e=null,this.children=new Konva.Collection,this},add:function(t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.add(arguments[e]);return this}if(t.getParent())return t.moveTo(this),this;var i=this.children;return this._validateAdd(t),t.index=i.length,t.parent=this,i.push(t),this._fire("add",{child:t}),Konva.DD&&t.isDragging()&&Konva.DD.anim.setLayers(t.getLayer()),this},destroy:function(){return this.hasChildren()&&this.destroyChildren(),Konva.Node.prototype.destroy.call(this),this},find:function(t){return this._generalFind(t,!1)},findOne:function(t){var e=this._generalFind(t,!0);return e.length>0?e[0]:void 0},_generalFind:function(t,e){var i=[];return"string"==typeof t?i=this._findByString(t,e):"function"==typeof t&&(i=this._findByFunction(t,e)),Konva.Collection.toCollection(i)},_findByString:function(t){var e,i,n,a,r,o,s,h=[],l=t.replace(/ /g,"").split(","),c=l.length;for(e=0;e<c;e++){if(n=l[e],!Konva.Util.isValidSelector(n)){var d='Selector "'+n+'" is invalid. Allowed selectors examples are "#foo", ".bar" or "Group".\nIf you have a custom shape with such className, please change it to start with upper letter like "Triangle".\nKonva is awesome, right?';Konva.Util.warn(d)}if("#"===n.charAt(0))(r=this._getNodeById(n.slice(1)))&&h.push(r);else if("."===n.charAt(0))a=this._getNodesByName(n.slice(1)),h=h.concat(a);else for(s=(o=this.getChildren()).length,i=0;i<s;i++)h=h.concat(o[i]._get(n))}return h},_findByFunction:function(t,e){var i=[],n=function(a){if(!(e&&i.length>0)){var r=a.getChildren(),o=r.length;t(a)&&(i=i.concat(a));for(var s=0;s<o;s++)n(r[s])}};return n(this),i},_getNodeById:function(t){var e=Konva.ids[t];return void 0!==e&&this.isAncestorOf(e)?e:null},_getNodesByName:function(t){var e=Konva.names[t]||[];return this._getDescendants(e)},_get:function(t){for(var e=Konva.Node.prototype._get.call(this,t),i=this.getChildren(),n=i.length,a=0;a<n;a++)e=e.concat(i[a]._get(t));return e},toObject:function(){var t=Konva.Node.prototype.toObject.call(this);t.children=[];for(var e=this.getChildren(),i=e.length,n=0;n<i;n++){var a=e[n];t.children.push(a.toObject())}return t},_getDescendants:function(t){for(var e=[],i=t.length,n=0;n<i;n++){var a=t[n];this.isAncestorOf(a)&&e.push(a)}return e},isAncestorOf:function(t){for(var e=t.getParent();e;){if(e._id===this._id)return!0;e=e.getParent()}return!1},clone:function(t){var e=Konva.Node.prototype.clone.call(this,t);return this.getChildren().each(function(t){e.add(t.clone())}),e},getAllIntersections:function(t){var e=[];return this.find("Shape").each(function(i){i.isVisible()&&i.intersects(t)&&e.push(i)}),e},_setChildrenIndices:function(){this.children.each(function(t,e){t.index=e})},drawScene:function(t,e,i){var n=this.getLayer(),a=t||n&&n.getCanvas(),r=a&&a.getContext(),o=this._cache.canvas,s=o&&o.scene;return(this.isVisible()||i)&&(!i&&s?(r.save(),n._applyTransform(this,r,e),this._drawCachedSceneCanvas(r),r.restore()):this._drawChildren(a,"drawScene",e,!1,i)),this},drawHit:function(t,e,i){var n=this.getLayer(),a=t||n&&n.hitCanvas,r=a&&a.getContext(),o=this._cache.canvas,s=o&&o.hit;return(this.shouldDrawHit(a)||i)&&(n&&n.clearHitCache(),!i&&s?(r.save(),n._applyTransform(this,r,e),this._drawCachedHitCanvas(r),r.restore()):this._drawChildren(a,"drawHit",e)),this},_drawChildren:function(t,e,i,n,a){var r,o,s=this.getLayer(),h=t&&t.getContext(),l=this.getClipWidth(),c=this.getClipHeight(),d=this.getClipFunc(),u=l&&c||d;if(u&&s){h.save();var g=this.getAbsoluteTransform(i),f=g.getMatrix();h.transform(f[0],f[1],f[2],f[3],f[4],f[5]),h.beginPath(),d?d.call(this,h,this):(r=this.getClipX(),o=this.getClipY(),h.rect(r,o,l,c)),h.clip(),f=g.copy().invert().getMatrix(),h.transform(f[0],f[1],f[2],f[3],f[4],f[5])}this.children.each(function(r){r[e](t,i,n,a)}),u&&h.restore()},shouldDrawHit:function(t){var e=this.getLayer(),i=Konva.DD&&Konva.isDragging()&&-1!==Konva.DD.anim.getLayers().indexOf(e);return t&&t.isCache||e&&e.hitGraphEnabled()&&this.isVisible()&&!i},getClientRect:function(t){var e,i,n,a,r=(t=t||{}).skipTransform,o=t.relativeTo,s={x:1/0,y:1/0,width:0,height:0},h=this;this.children.each(function(r){if(r.getVisible()){var o=r.getClientRect({relativeTo:h,skipShadow:t.skipShadow,skipStroke:t.skipStroke});0===o.width&&0===o.height||(void 0===e?(e=o.x,i=o.y,n=o.x+o.width,a=o.y+o.height):(e=Math.min(e,o.x),i=Math.min(i,o.y),n=Math.max(n,o.x+o.width),a=Math.max(a,o.y+o.height)))}});for(var l=this.find("Shape"),c=!1,d=0;d<l.length;d++){if(l[d]._isVisible(this)){c=!0;break}}return s=c?{x:e,y:i,width:n-e,height:a-i}:{x:0,y:0,width:0,height:0},r?s:this._transformedRect(s,o)}}),Konva.Util.extend(Konva.Container,Konva.Node),Konva.Container.prototype.get=Konva.Container.prototype.find,Konva.Factory.addComponentsGetterSetter(Konva.Container,"clip",["x","y","width","height"]),Konva.Factory.addGetterSetter(Konva.Container,"clipX",void 0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Container,"clipY",void 0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Container,"clipWidth",void 0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Container,"clipHeight",void 0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Container,"clipFunc"),Konva.Collection.mapMethods(Konva.Container)}(),function(t){"use strict";var e="hasShadow",i="shadowRGBA";function n(t){t.fill()}function a(t){t.stroke()}function r(t){t.fill()}function o(t){t.stroke()}function s(){this._clearCache(e)}function h(){this._clearCache(i)}t.Shape=function(t){this.__init(t)},t.Util.addMethods(t.Shape,{__init:function(e){this.nodeType="Shape",this._fillFunc=n,this._strokeFunc=a,this._fillFuncHit=r,this._strokeFuncHit=o;for(var i,l=t.shapes;!(i=t.Util.getRandomColor())||i in l;);this.colorKey=i,l[i]=this,t.Node.call(this,e),this.on("shadowColorChange.konva shadowBlurChange.konva shadowOffsetChange.konva shadowOpacityChange.konva shadowEnabledChange.konva",s),this.on("shadowColorChange.konva shadowOpacityChange.konva shadowEnabledChange.konva",h)},hasChildren:function(){return!1},getChildren:function(){return[]},getContext:function(){return this.getLayer().getContext()},getCanvas:function(){return this.getLayer().getCanvas()},hasShadow:function(){return this._getCache(e,this._hasShadow)},_hasShadow:function(){return this.getShadowEnabled()&&0!==this.getShadowOpacity()&&!!(this.getShadowColor()||this.getShadowBlur()||this.getShadowOffsetX()||this.getShadowOffsetY())},getShadowRGBA:function(){return this._getCache(i,this._getShadowRGBA)},_getShadowRGBA:function(){if(this.hasShadow()){var e=t.Util.colorToRGBA(this.shadowColor());return"rgba("+e.r+","+e.g+","+e.b+","+e.a*(this.getShadowOpacity()||1)+")"}},hasFill:function(){return!!(this.getFill()||this.getFillPatternImage()||this.getFillLinearGradientColorStops()||this.getFillRadialGradientColorStops())},hasStroke:function(){return this.strokeEnabled()&&!(!this.stroke()&&!this.getStrokeLinearGradientColorStops())},intersects:function(t){var e=this.getStage().bufferHitCanvas;return e.getContext().clear(),this.drawHit(e),e.context.getImageData(Math.round(t.x),Math.round(t.y),1,1).data[3]>0},destroy:function(){return t.Node.prototype.destroy.call(this),delete t.shapes[this.colorKey],this},_useBufferCanvas:function(t){return!t&&this.perfectDrawEnabled()&&1!==this.getAbsoluteOpacity()&&this.hasFill()&&this.hasStroke()&&this.getStage()||this.perfectDrawEnabled()&&this.hasShadow()&&1!==this.getAbsoluteOpacity()&&this.hasFill()&&this.hasStroke()&&this.getStage()},getSelfRect:function(){var t=this.getSize();return{x:this._centroid?Math.round(-t.width/2):0,y:this._centroid?Math.round(-t.height/2):0,width:t.width,height:t.height}},getClientRect:function(t){var e=(t=t||{}).skipTransform,i=t.relativeTo,n=this.getSelfRect(),a=!t.skipStroke&&this.hasStroke()&&this.strokeWidth()||0,r=n.width+a,o=n.height+a,s=!t.skipShadow&&this.hasShadow(),h=s?this.shadowOffsetX():0,l=s?this.shadowOffsetY():0,c=r+Math.abs(h),d=o+Math.abs(l),u=s&&this.shadowBlur()||0,g=c+2*u,f=d+2*u,v=0;Math.round(a/2)!==a/2&&(v=1);var p={width:g+v,height:f+v,x:-Math.round(a/2+u)+Math.min(h,0)+n.x,y:-Math.round(a/2+u)+Math.min(l,0)+n.y};return e?p:this._transformedRect(p,i)},drawScene:function(t,e,i,n){var a,r,o=this.getLayer(),s=t||o.getCanvas(),h=s.getContext(),l=this._cache.canvas,c=this.sceneFunc(),d=this.hasShadow(),u=this.hasStroke();if(!this.isVisible()&&!i)return this;if(l)return h.save(),o._applyTransform(this,h,e),this._drawCachedSceneCanvas(h),h.restore(),this;if(!c)return this;if(h.save(),this._useBufferCanvas(i)&&!n){if((r=(a=this.getStage().bufferCanvas).getContext()).clear(),r.save(),r._applyLineJoin(this),!i)if(o)o._applyTransform(this,r,e);else{var g=this.getAbsoluteTransform(e).getMatrix();h.transform(g[0],g[1],g[2],g[3],g[4],g[5])}c.call(this,r,this),r.restore();var f=a.pixelRatio;d&&!s.hitCanvas?(h.save(),h._applyShadow(this),h._applyOpacity(this),h._applyGlobalCompositeOperation(this),h.drawImage(a._canvas,0,0,a.width/f,a.height/f),h.restore()):(h._applyOpacity(this),h._applyGlobalCompositeOperation(this),h.drawImage(a._canvas,0,0,a.width/f,a.height/f))}else{if(h._applyLineJoin(this),!i)if(o)o._applyTransform(this,h,e);else{var v=this.getAbsoluteTransform(e).getMatrix();h.transform(v[0],v[1],v[2],v[3],v[4],v[5])}d&&u&&!s.hitCanvas?(h.save(),i||(h._applyOpacity(this),h._applyGlobalCompositeOperation(this)),h._applyShadow(this),c.call(this,h,this),h.restore(),this.hasFill()&&this.getShadowForStrokeEnabled()&&c.call(this,h,this)):d&&!s.hitCanvas?(h.save(),i||(h._applyOpacity(this),h._applyGlobalCompositeOperation(this)),h._applyShadow(this),c.call(this,h,this),h.restore()):(i||(h._applyOpacity(this),h._applyGlobalCompositeOperation(this)),c.call(this,h,this))}return h.restore(),this},drawHit:function(t,e,i){var n=this.getLayer(),a=t||n.hitCanvas,r=a.getContext(),o=this.hitFunc()||this.sceneFunc(),s=this._cache.canvas,h=s&&s.hit;if(!this.shouldDrawHit(a)&&!i)return this;if(n&&n.clearHitCache(),h)return r.save(),n._applyTransform(this,r,e),this._drawCachedHitCanvas(r),r.restore(),this;if(!o)return this;if(r.save(),r._applyLineJoin(this),!i)if(n)n._applyTransform(this,r,e);else{var l=this.getAbsoluteTransform(e).getMatrix();r.transform(l[0],l[1],l[2],l[3],l[4],l[5])}return o.call(this,r,this),r.restore(),this},drawHitFromCache:function(e){var i,n,a,r,o,s=e||0,h=this._cache.canvas,l=this._getCachedSceneCanvas(),c=h.hit,d=c.getContext(),u=c.getWidth(),g=c.getHeight();d.clear(),d.drawImage(l._canvas,0,0,u,g);try{for(a=(n=(i=d.getImageData(0,0,u,g)).data).length,r=t.Util._hexToRgb(this.colorKey),o=0;o<a;o+=4)n[o+3]>s?(n[o]=r.r,n[o+1]=r.g,n[o+2]=r.b,n[o+3]=255):n[o+3]=0;d.putImageData(i,0,0)}catch(e){t.Util.error("Unable to draw hit graph from cached scene canvas. "+e.message)}return this}}),t.Util.extend(t.Shape,t.Node),t.Factory.addGetterSetter(t.Shape,"stroke",void 0,t.Validators.getStringValidator()),t.Factory.addGetterSetter(t.Shape,"strokeWidth",2,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"strokeHitEnabled",!0,t.Validators.getBooleanValidator()),t.Factory.addGetterSetter(t.Shape,"perfectDrawEnabled",!0,t.Validators.getBooleanValidator()),t.Factory.addGetterSetter(t.Shape,"shadowForStrokeEnabled",!0,t.Validators.getBooleanValidator()),t.Factory.addGetterSetter(t.Shape,"lineJoin"),t.Factory.addGetterSetter(t.Shape,"lineCap"),t.Factory.addGetterSetter(t.Shape,"sceneFunc"),t.Factory.addGetterSetter(t.Shape,"hitFunc"),t.Factory.addGetterSetter(t.Shape,"dash"),t.Factory.addGetterSetter(t.Shape,"dashOffset",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"shadowColor",void 0,t.Validators.getStringValidator()),t.Factory.addGetterSetter(t.Shape,"shadowBlur",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"shadowOpacity",1,t.Validators.getNumberValidator()),t.Factory.addComponentsGetterSetter(t.Shape,"shadowOffset",["x","y"]),t.Factory.addGetterSetter(t.Shape,"shadowOffsetX",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"shadowOffsetY",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"fillPatternImage"),t.Factory.addGetterSetter(t.Shape,"fill",void 0,t.Validators.getStringValidator()),t.Factory.addGetterSetter(t.Shape,"fillPatternX",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"fillPatternY",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"fillLinearGradientColorStops"),t.Factory.addGetterSetter(t.Shape,"strokeLinearGradientColorStops"),t.Factory.addGetterSetter(t.Shape,"fillRadialGradientStartRadius",0),t.Factory.addGetterSetter(t.Shape,"fillRadialGradientEndRadius",0),t.Factory.addGetterSetter(t.Shape,"fillRadialGradientColorStops"),t.Factory.addGetterSetter(t.Shape,"fillPatternRepeat","repeat"),t.Factory.addGetterSetter(t.Shape,"fillEnabled",!0),t.Factory.addGetterSetter(t.Shape,"strokeEnabled",!0),t.Factory.addGetterSetter(t.Shape,"shadowEnabled",!0),t.Factory.addGetterSetter(t.Shape,"dashEnabled",!0),t.Factory.addGetterSetter(t.Shape,"strokeScaleEnabled",!0),t.Factory.addGetterSetter(t.Shape,"fillPriority","color"),t.Factory.addComponentsGetterSetter(t.Shape,"fillPatternOffset",["x","y"]),t.Factory.addGetterSetter(t.Shape,"fillPatternOffsetX",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"fillPatternOffsetY",0,t.Validators.getNumberValidator()),t.Factory.addComponentsGetterSetter(t.Shape,"fillPatternScale",["x","y"]),t.Factory.addGetterSetter(t.Shape,"fillPatternScaleX",1,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"fillPatternScaleY",1,t.Validators.getNumberValidator()),t.Factory.addComponentsGetterSetter(t.Shape,"fillLinearGradientStartPoint",["x","y"]),t.Factory.addComponentsGetterSetter(t.Shape,"strokeLinearGradientStartPoint",["x","y"]),t.Factory.addGetterSetter(t.Shape,"fillLinearGradientStartPointX",0),t.Factory.addGetterSetter(t.Shape,"strokeLinearGradientStartPointX",0),t.Factory.addGetterSetter(t.Shape,"fillLinearGradientStartPointY",0),t.Factory.addGetterSetter(t.Shape,"strokeLinearGradientStartPointY",0),t.Factory.addComponentsGetterSetter(t.Shape,"fillLinearGradientEndPoint",["x","y"]),t.Factory.addComponentsGetterSetter(t.Shape,"strokeLinearGradientEndPoint",["x","y"]),t.Factory.addGetterSetter(t.Shape,"fillLinearGradientEndPointX",0),t.Factory.addGetterSetter(t.Shape,"strokeLinearGradientEndPointX",0),t.Factory.addGetterSetter(t.Shape,"fillLinearGradientEndPointY",0),t.Factory.addGetterSetter(t.Shape,"strokeLinearGradientEndPointY",0),t.Factory.addComponentsGetterSetter(t.Shape,"fillRadialGradientStartPoint",["x","y"]),t.Factory.addGetterSetter(t.Shape,"fillRadialGradientStartPointX",0),t.Factory.addGetterSetter(t.Shape,"fillRadialGradientStartPointY",0),t.Factory.addComponentsGetterSetter(t.Shape,"fillRadialGradientEndPoint",["x","y"]),t.Factory.addGetterSetter(t.Shape,"fillRadialGradientEndPointX",0),t.Factory.addGetterSetter(t.Shape,"fillRadialGradientEndPointY",0),t.Factory.addGetterSetter(t.Shape,"fillPatternRotation",0),t.Factory.backCompat(t.Shape,{dashArray:"dash",getDashArray:"getDash",setDashArray:"getDash",drawFunc:"sceneFunc",getDrawFunc:"getSceneFunc",setDrawFunc:"setSceneFunc",drawHitFunc:"hitFunc",getDrawHitFunc:"getHitFunc",setDrawHitFunc:"setHitFunc"}),t.Collection.mapMethods(t.Shape)}(Konva),function(){"use strict";var t="_",e=["mousedown","mousemove","mouseup","mouseout","touchstart","touchmove","touchend","mouseover","wheel","contextmenu"],i=e.length;function n(e,i){e.content.addEventListener(i,function(n){e[t+i](n)},!1)}Konva.Stage=function(t){this.___init(t)},Konva.Util.addMethods(Konva.Stage,{___init:function(t){this.nodeType="Stage",Konva.Container.call(this,t),this._id=Konva.idCounter++,this._buildDOM(),this._bindContentEvents(),this._enableNestedTransforms=!1,Konva.stages.push(this)},_validateAdd:function(t){"Layer"!==t.getType()&&Konva.Util.throw("You may only add layers to the stage.")},setContainer:function(t){if("string"==typeof t){if("."===t.charAt(0)){var e=t.slice(1);t=Konva.document.getElementsByClassName(e)[0]}else{var i;i="#"!==t.charAt(0)?t:t.slice(1),t=Konva.document.getElementById(i)}if(!t)throw"Can not find container in document with id "+i}return this._setAttr("container",t),this},shouldDrawHit:function(){return!0},draw:function(){return Konva.Node.prototype.draw.call(this),this},setHeight:function(t){return Konva.Node.prototype.setHeight.call(this,t),this._resizeDOM(),this},setWidth:function(t){return Konva.Node.prototype.setWidth.call(this,t),this._resizeDOM(),this},clear:function(){var t,e=this.children,i=e.length;for(t=0;t<i;t++)e[t].clear();return this},clone:function(t){return t||(t={}),t.container=Konva.document.createElement("div"),Konva.Container.prototype.clone.call(this,t)},destroy:function(){var t=this.content;Konva.Container.prototype.destroy.call(this),t&&Konva.Util._isInDocument(t)&&this.getContainer().removeChild(t);var e=Konva.stages.indexOf(this);return e>-1&&Konva.stages.splice(e,1),this},getPointerPosition:function(){return this.pointerPos},getStage:function(){return this},getContent:function(){return this.content},_toKonvaCanvas:function(t){var e=(t=t||{}).x||0,i=t.y||0,n=new Konva.SceneCanvas({width:t.width||this.getWidth(),height:t.height||this.getHeight(),pixelRatio:t.pixelRatio||1}),a=n.getContext()._context,r=this.children;return(e||i)&&a.translate(-1*e,-1*i),r.each(function(n){if(n.isVisible()){var r=n._toKonvaCanvas(t);a.drawImage(r._canvas,e,i,r.getWidth()/r.getPixelRatio(),r.getHeight()/r.getPixelRatio())}}),n},toImage:function(t){var e=t.callback;t.callback=function(t){Konva.Util._getImage(t,function(t){e(t)})},this.toDataURL(t)},getIntersection:function(t,e){var i,n,a=this.getChildren();for(i=a.length-1;i>=0;i--)if(n=a[i].getIntersection(t,e))return n;return null},_resizeDOM:function(){if(this.content){var t,e,i=this.getWidth(),n=this.getHeight(),a=this.getChildren(),r=a.length;for(this.content.style.width=i+"px",this.content.style.height=n+"px",this.bufferCanvas.setSize(i,n),this.bufferHitCanvas.setSize(i,n),t=0;t<r;t++)(e=a[t]).setSize(i,n),e.draw()}},add:function(t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return Konva.Container.prototype.add.call(this,t),t._setCanvasSize(this.width(),this.height()),t.draw(),Konva.isBrowser&&this.content.appendChild(t.canvas._canvas),this},getParent:function(){return null},getLayer:function(){return null},getLayers:function(){return this.getChildren()},_bindContentEvents:function(){if(Konva.isBrowser)for(var t=0;t<i;t++)n(this,e[t])},_mouseover:function(t){Konva.UA.mobile||(this._setPointerPosition(t),this._fire("contentMouseover",{evt:t}))},_mouseout:function(t){if(!Konva.UA.mobile){this._setPointerPosition(t);var e=this.targetShape;e&&!Konva.isDragging()&&(e._fireAndBubble("mouseout",{evt:t}),e._fireAndBubble("mouseleave",{evt:t}),this.targetShape=null),this.pointerPos=void 0,this._fire("contentMouseout",{evt:t})}},_mousemove:function(t){return Konva.UA.ieMobile?this._touchmove(t):void 0===t.movementX&&void 0===t.movementY||0!==t.movementY||0!==t.movementX?Konva.UA.mobile?null:(this._setPointerPosition(t),Konva.isDragging()||((e=this.getIntersection(this.getPointerPosition()))&&e.isListening()?Konva.isDragging()||this.targetShape&&this.targetShape._id===e._id?e._fireAndBubble("mousemove",{evt:t}):(this.targetShape&&(this.targetShape._fireAndBubble("mouseout",{evt:t},e),this.targetShape._fireAndBubble("mouseleave",{evt:t},e)),e._fireAndBubble("mouseover",{evt:t},this.targetShape),e._fireAndBubble("mouseenter",{evt:t},this.targetShape),this.targetShape=e):(this.targetShape&&!Konva.isDragging()&&(this.targetShape._fireAndBubble("mouseout",{evt:t}),this.targetShape._fireAndBubble("mouseleave",{evt:t}),this.targetShape=null),this._fire("mousemove",{evt:t,target:this,currentTarget:this})),this._fire("contentMousemove",{evt:t})),void(t.cancelable&&t.preventDefault())):null;var e},_mousedown:function(t){if(Konva.UA.ieMobile)return this._touchstart(t);if(!Konva.UA.mobile){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition());Konva.listenClickTap=!0,e&&e.isListening()?(this.clickStartShape=e,e._fireAndBubble("mousedown",{evt:t})):this._fire("mousedown",{evt:t,target:this,currentTarget:this}),this._fire("contentMousedown",{evt:t})}},_mouseup:function(t){if(Konva.UA.ieMobile)return this._touchend(t);if(!Konva.UA.mobile){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition()),i=this.clickStartShape,n=this.clickEndShape,a=!1,r=Konva.DD;Konva.inDblClickWindow?(a=!0,clearTimeout(this.dblTimeout)):r&&r.justDragged?r&&(r.justDragged=!1):(Konva.inDblClickWindow=!0,clearTimeout(this.dblTimeout)),this.dblTimeout=setTimeout(function(){Konva.inDblClickWindow=!1},Konva.dblClickWindow),e&&e.isListening()?(this.clickEndShape=e,e._fireAndBubble("mouseup",{evt:t}),Konva.listenClickTap&&i&&i._id===e._id&&(e._fireAndBubble("click",{evt:t}),a&&n&&n._id===e._id&&e._fireAndBubble("dblclick",{evt:t}))):(this._fire("mouseup",{evt:t,target:this,currentTarget:this}),Konva.listenClickTap&&this._fire("click",{evt:t,target:this,currentTarget:this}),a&&this._fire("dblclick",{evt:t,target:this,currentTarget:this})),this._fire("contentMouseup",{evt:t}),Konva.listenClickTap&&(this._fire("contentClick",{evt:t}),a&&this._fire("contentDblclick",{evt:t})),Konva.listenClickTap=!1}t.cancelable&&t.preventDefault()},_contextmenu:function(t){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition());e&&e.isListening()?e._fireAndBubble("contextmenu",{evt:t}):this._fire("contextmenu",{evt:t,target:this,currentTarget:this}),this._fire("contentContextmenu",{evt:t})},_touchstart:function(t){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition());Konva.listenClickTap=!0,e&&e.isListening()?(this.tapStartShape=e,e._fireAndBubble("touchstart",{evt:t}),e.isListening()&&e.preventDefault()&&t.cancelable&&t.preventDefault()):this._fire("touchstart",{evt:t,target:this,currentTarget:this}),this._fire("contentTouchstart",{evt:t})},_touchend:function(t){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition()),i=!1;Konva.inDblClickWindow?(i=!0,clearTimeout(this.dblTimeout)):(Konva.inDblClickWindow=!0,clearTimeout(this.dblTimeout)),this.dblTimeout=setTimeout(function(){Konva.inDblClickWindow=!1},Konva.dblClickWindow),e&&e.isListening()?(e._fireAndBubble("touchend",{evt:t}),Konva.listenClickTap&&this.tapStartShape&&e._id===this.tapStartShape._id&&(e._fireAndBubble("tap",{evt:t}),i&&e._fireAndBubble("dbltap",{evt:t})),e.isListening()&&e.preventDefault()&&t.cancelable&&t.preventDefault()):(this._fire("touchend",{evt:t,target:this,currentTarget:this}),Konva.listenClickTap&&this._fire("tap",{evt:t,target:this,currentTarget:this}),i&&this._fire("dbltap",{evt:t,target:this,currentTarget:this})),this._fire("contentTouchend",{evt:t}),Konva.listenClickTap&&(this._fire("contentTap",{evt:t}),i&&this._fire("contentDbltap",{evt:t})),Konva.listenClickTap=!1},_touchmove:function(t){this._setPointerPosition(t);var e,i=Konva.DD;Konva.isDragging()||((e=this.getIntersection(this.getPointerPosition()))&&e.isListening()?(e._fireAndBubble("touchmove",{evt:t}),e.isListening()&&e.preventDefault()&&t.cancelable&&t.preventDefault()):this._fire("touchmove",{evt:t,target:this,currentTarget:this}),this._fire("contentTouchmove",{evt:t})),i&&Konva.isDragging()&&Konva.DD.node.preventDefault()&&t.cancelable&&t.preventDefault()},_wheel:function(t){this._setPointerPosition(t);var e=this.getIntersection(this.getPointerPosition());e&&e.isListening()?e._fireAndBubble("wheel",{evt:t}):this._fire("wheel",{evt:t,target:this,currentTarget:this}),this._fire("contentWheel",{evt:t})},_setPointerPosition:function(t){var e=this._getContentPosition(),i=null,n=null;if(void 0!==(t=t||window.event).touches){if(t.touches.length>0){var a=t.touches[0];i=a.clientX-e.left,n=a.clientY-e.top}}else i=t.clientX-e.left,n=t.clientY-e.top;null!==i&&null!==n&&(this.pointerPos={x:i,y:n})},_getContentPosition:function(){var t=this.content.getBoundingClientRect?this.content.getBoundingClientRect():{top:0,left:0};return{top:t.top,left:t.left}},_buildDOM:function(){if(this.bufferCanvas=new Konva.SceneCanvas,this.bufferHitCanvas=new Konva.HitCanvas({pixelRatio:1}),Konva.isBrowser){var t=this.getContainer();if(!t)throw"Stage has no container. A container is required.";t.innerHTML="",this.content=Konva.document.createElement("div"),this.content.style.position="relative",this.content.style.userSelect="none",this.content.className="konvajs-content",this.content.setAttribute("role","presentation"),t.appendChild(this.content),this._resizeDOM()}},_onContent:function(t,e){var i,n,a=t.split(" "),r=a.length;for(i=0;i<r;i++)n=a[i],this.content.addEventListener(n,e,!1)},cache:function(){Konva.Util.warn("Cache function is not allowed for stage. You may use cache only for layers, groups and shapes.")},clearCache:function(){}}),Konva.Util.extend(Konva.Stage,Konva.Container),Konva.Factory.addGetter(Konva.Stage,"container"),Konva.Factory.addOverloadedGetterSetter(Konva.Stage,"container")}(),function(t){"use strict";t.BaseLayer=function(t){this.___init(t)},t.Util.addMethods(t.BaseLayer,{___init:function(e){this.nodeType="Layer",t.Container.call(this,e)},createPNGStream:function(){return this.canvas._canvas.createPNGStream()},getCanvas:function(){return this.canvas},getHitCanvas:function(){return this.hitCanvas},getContext:function(){return this.getCanvas().getContext()},clear:function(t){return this.getContext().clear(t),this},clearHitCache:function(){this._hitImageData=void 0},setZIndex:function(e){t.Node.prototype.setZIndex.call(this,e);var i=this.getStage();return i&&(i.content.removeChild(this.getCanvas()._canvas),e<i.getChildren().length-1?i.content.insertBefore(this.getCanvas()._canvas,i.getChildren()[e+1].getCanvas()._canvas):i.content.appendChild(this.getCanvas()._canvas)),this},moveToTop:function(){t.Node.prototype.moveToTop.call(this);var e=this.getStage();return e&&(e.content.removeChild(this.getCanvas()._canvas),e.content.appendChild(this.getCanvas()._canvas)),this},moveUp:function(){if(!t.Node.prototype.moveUp.call(this))return this;var e=this.getStage();return e?(e.content.removeChild(this.getCanvas()._canvas),this.index<e.getChildren().length-1?e.content.insertBefore(this.getCanvas()._canvas,e.getChildren()[this.index+1].getCanvas()._canvas):e.content.appendChild(this.getCanvas()._canvas),this):this},moveDown:function(){if(t.Node.prototype.moveDown.call(this)){var e=this.getStage();if(e){var i=e.getChildren();e.content.removeChild(this.getCanvas()._canvas),e.content.insertBefore(this.getCanvas()._canvas,i[this.index+1].getCanvas()._canvas)}}return this},moveToBottom:function(){if(t.Node.prototype.moveToBottom.call(this)){var e=this.getStage();if(e){var i=e.getChildren();e.content.removeChild(this.getCanvas()._canvas),e.content.insertBefore(this.getCanvas()._canvas,i[1].getCanvas()._canvas)}}return this},getLayer:function(){return this},remove:function(){var e=this.getCanvas()._canvas;return t.Node.prototype.remove.call(this),e&&e.parentNode&&t.Util._isInDocument(e)&&e.parentNode.removeChild(e),this},getStage:function(){return this.parent},setSize:function(t,e){return this.canvas.setSize(t,e),this},_toKonvaCanvas:function(e){return(e=e||{}).width=e.width||this.getWidth(),e.height=e.height||this.getHeight(),e.x=void 0!==e.x?e.x:this.getX(),e.y=void 0!==e.y?e.y:this.getY(),t.Node.prototype._toKonvaCanvas.call(this,e)},getWidth:function(){if(this.parent)return this.parent.getWidth()},setWidth:function(){t.Util.warn('Can not change width of layer. Use "stage.width(value)" function instead.')},getHeight:function(){if(this.parent)return this.parent.getHeight()},setHeight:function(){t.Util.warn('Can not change height of layer. Use "stage.height(value)" function instead.')},_applyTransform:function(t,e,i){var n=t.getAbsoluteTransform(i).getMatrix();e.transform(n[0],n[1],n[2],n[3],n[4],n[5])}}),t.Util.extend(t.BaseLayer,t.Container),t.Factory.addGetterSetter(t.BaseLayer,"clearBeforeDraw",!0),t.Collection.mapMethods(t.BaseLayer)}(Konva),function(){"use strict";var t=[{x:0,y:0},{x:-1,y:-1},{x:1,y:-1},{x:1,y:1},{x:-1,y:1}],e=t.length;Konva.Layer=function(t){this.____init(t)},Konva.Util.addMethods(Konva.Layer,{____init:function(t){this.nodeType="Layer",this.canvas=new Konva.SceneCanvas,this.hitCanvas=new Konva.HitCanvas({pixelRatio:1}),Konva.BaseLayer.call(this,t)},_setCanvasSize:function(t,e){this.canvas.setSize(t,e),this.hitCanvas.setSize(t,e)},_validateAdd:function(t){var e=t.getType();"Group"!==e&&"Shape"!==e&&Konva.Util.throw("You may only add groups and shapes to a layer.")},getIntersection:function(i,n){var a,r,o,s;if(!this.hitGraphEnabled()||!this.isVisible())return null;for(var h=1,l=!1;;){for(r=0;r<e;r++){if(o=t[r],(s=(a=this._getIntersection({x:i.x+o.x*h,y:i.y+o.y*h})).shape)&&n)return s.findAncestor(n,!0);if(s)return s;if(l=!!a.antialiased,!a.antialiased)break}if(!l)return null;h+=1}},_getImageData:function(t,e){var i=this.hitCanvas.width||1,n=this.hitCanvas.height||1,a=Math.round(e)*i+Math.round(t);return this._hitImageData||(this._hitImageData=this.hitCanvas.context.getImageData(0,0,i,n)),[this._hitImageData.data[4*a+0],this._hitImageData.data[4*a+1],this._hitImageData.data[4*a+2],this._hitImageData.data[4*a+3]]},_getIntersection:function(t){var e,i,n=this.hitCanvas.pixelRatio,a=this.hitCanvas.context.getImageData(Math.round(t.x*n),Math.round(t.y*n),1,1).data,r=a[3];return 255===r?(e=Konva.Util._rgbToHex(a[0],a[1],a[2]),(i=Konva.shapes["#"+e])?{shape:i}:{antialiased:!0}):r>0?{antialiased:!0}:{}},drawScene:function(t,e){var i=this.getLayer(),n=t||i&&i.getCanvas();return this._fire("beforeDraw",{node:this}),this.getClearBeforeDraw()&&n.getContext().clear(),Konva.Container.prototype.drawScene.call(this,n,e),this._fire("draw",{node:this}),this},drawHit:function(t,e){var i=this.getLayer(),n=t||i&&i.hitCanvas;return i&&i.getClearBeforeDraw()&&i.getHitCanvas().getContext().clear(),Konva.Container.prototype.drawHit.call(this,n,e),this.imageData=null,this},clear:function(t){return Konva.BaseLayer.prototype.clear.call(this,t),this.getHitCanvas().getContext().clear(t),this.imageData=null,this},setVisible:function(t){return Konva.Node.prototype.setVisible.call(this,t),t?(this.getCanvas()._canvas.style.display="block",this.hitCanvas._canvas.style.display="block"):(this.getCanvas()._canvas.style.display="none",this.hitCanvas._canvas.style.display="none"),this},enableHitGraph:function(){return this.setHitGraphEnabled(!0),this},disableHitGraph:function(){return this.setHitGraphEnabled(!1),this},setSize:function(t,e){return Konva.BaseLayer.prototype.setSize.call(this,t,e),this.hitCanvas.setSize(t,e),this}}),Konva.Util.extend(Konva.Layer,Konva.BaseLayer),Konva.Factory.addGetterSetter(Konva.Layer,"hitGraphEnabled",!0),Konva.Collection.mapMethods(Konva.Layer)}(),function(){"use strict";Konva.FastLayer=function(t){this.____init(t)},Konva.Util.addMethods(Konva.FastLayer,{____init:function(t){this.nodeType="Layer",this.canvas=new Konva.SceneCanvas,Konva.BaseLayer.call(this,t)},_validateAdd:function(t){"Shape"!==t.getType()&&Konva.Util.throw("You may only add shapes to a fast layer.")},_setCanvasSize:function(t,e){this.canvas.setSize(t,e)},hitGraphEnabled:function(){return!1},getIntersection:function(){return null},drawScene:function(t){var e=this.getLayer(),i=t||e&&e.getCanvas();return this.getClearBeforeDraw()&&i.getContext().clear(),Konva.Container.prototype.drawScene.call(this,i),this},draw:function(){return this.drawScene(),this},setVisible:function(t){return Konva.Node.prototype.setVisible.call(this,t),this.getCanvas()._canvas.style.display=t?"block":"none",this}}),Konva.Util.extend(Konva.FastLayer,Konva.BaseLayer),Konva.Collection.mapMethods(Konva.FastLayer)}(),function(){"use strict";Konva.Group=function(t){this.___init(t)},Konva.Util.addMethods(Konva.Group,{___init:function(t){this.nodeType="Group",Konva.Container.call(this,t)},_validateAdd:function(t){var e=t.getType();"Group"!==e&&"Shape"!==e&&Konva.Util.throw("You may only add groups and shapes to groups.")}}),Konva.Util.extend(Konva.Group,Konva.Container),Konva.Collection.mapMethods(Konva.Group)}(),function(t){"use strict";var e=t.global.performance&&t.global.performance.now?function(){return t.global.performance.now()}:function(){return(new Date).getTime()};function i(t){setTimeout(t,1e3/60)}var n=t.global.requestAnimationFrame||t.global.webkitRequestAnimationFrame||t.global.mozRequestAnimationFrame||t.global.oRequestAnimationFrame||t.global.msRequestAnimationFrame||i;function a(){return n.apply(t.global,arguments)}t.Animation=function(i,n){var a=t.Animation;this.func=i,this.setLayers(n),this.id=a.animIdCounter++,this.frame={time:0,timeDiff:0,lastTime:e()}},t.Animation.prototype={setLayers:function(t){var e=[];return e=t?t.length>0?t:[t]:[],this.layers=e,this},getLayers:function(){return this.layers},addLayer:function(t){var e,i=this.layers,n=i.length;for(e=0;e<n;e++)if(i[e]._id===t._id)return!1;return this.layers.push(t),!0},isRunning:function(){var e,i=t.Animation.animations,n=i.length;for(e=0;e<n;e++)if(i[e].id===this.id)return!0;return!1},start:function(){var i=t.Animation;return this.stop(),this.frame.timeDiff=0,this.frame.lastTime=e(),i._addAnimation(this),this},stop:function(){return t.Animation._removeAnimation(this),this},_updateFrameObject:function(t){this.frame.timeDiff=t-this.frame.lastTime,this.frame.lastTime=t,this.frame.time+=this.frame.timeDiff,this.frame.frameRate=1e3/this.frame.timeDiff}},t.Animation.animations=[],t.Animation.animIdCounter=0,t.Animation.animRunning=!1,t.Animation._addAnimation=function(t){this.animations.push(t),this._handleAnimation()},t.Animation._removeAnimation=function(t){var e,i=t.id,n=this.animations,a=n.length;for(e=0;e<a;e++)if(n[e].id===i){this.animations.splice(e,1);break}},t.Animation._runFrames=function(){var t,i,n,a,r,o,s,h,l={},c=this.animations;for(a=0;a<c.length;a++)if(i=(t=c[a]).layers,n=t.func,t._updateFrameObject(e()),o=i.length,!n||!1!==n.call(t,t.frame))for(r=0;r<o;r++)void 0!==(s=i[r])._id&&(l[s._id]=s);for(h in l)l.hasOwnProperty(h)&&l[h].draw()},t.Animation._animationLoop=function(){var e=t.Animation;e.animations.length?(e._runFrames(),a(e._animationLoop)):e.animRunning=!1},t.Animation._handleAnimation=function(){this.animRunning||(this.animRunning=!0,a(this._animationLoop))},t.BaseLayer.prototype.batchDraw=function(){var e=this,i=t.Animation;return this.batchAnim||(this.batchAnim=new i(function(){e.batchAnim.stop()},this)),this.batchAnim.isRunning()||this.batchAnim.start(),this},t.Stage.prototype.batchDraw=function(){return this.getChildren().each(function(t){t.batchDraw()}),this}}(Konva),function(){"use strict";var t={node:1,duration:1,easing:1,onFinish:1,yoyo:1},e=0,i=["fill","stroke","shadowColor"],n=function(t,e,i,n,a,r,o){this.prop=t,this.propFunc=e,this.begin=n,this._pos=n,this.duration=r,this._change=0,this.prevPos=0,this.yoyo=o,this._time=0,this._position=0,this._startTime=0,this._finish=0,this.func=i,this._change=a-this.begin,this.pause()};n.prototype={fire:function(t){var e=this[t];e&&e()},setTime:function(t){t>this.duration?this.yoyo?(this._time=this.duration,this.reverse()):this.finish():t<0?this.yoyo?(this._time=0,this.play()):this.reset():(this._time=t,this.update())},getTime:function(){return this._time},setPosition:function(t){this.prevPos=this._pos,this.propFunc(t),this._pos=t},getPosition:function(t){return void 0===t&&(t=this._time),this.func(t,this.begin,this._change,this.duration)},play:function(){this.state=2,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onPlay")},reverse:function(){this.state=3,this._time=this.duration-this._time,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onReverse")},seek:function(t){this.pause(),this._time=t,this.update(),this.fire("onSeek")},reset:function(){this.pause(),this._time=0,this.update(),this.fire("onReset")},finish:function(){this.pause(),this._time=this.duration,this.update(),this.fire("onFinish")},update:function(){this.setPosition(this.getPosition(this._time))},onEnterFrame:function(){var t=this.getTimer()-this._startTime;2===this.state?this.setTime(t):3===this.state&&this.setTime(this.duration-t)},pause:function(){this.state=1,this.fire("onPause")},getTimer:function(){return(new Date).getTime()}},Konva.Tween=function(i){var a,r,o=this,s=i.node,h=s._id,l=i.easing||Konva.Easings.Linear,c=!!i.yoyo;a=void 0===i.duration?.3:0===i.duration?.001:i.duration,this.node=s,this._id=e++;var d=s.getLayer()||(s instanceof Konva.Stage?s.getLayers():null);for(r in d||Konva.Util.error("Tween constructor have `node` that is not in a layer. Please add node into layer first."),this.anim=new Konva.Animation(function(){o.tween.onEnterFrame()},d),this.tween=new n(r,function(t){o._tweenFunc(t)},l,0,1,1e3*a,c),this._addListeners(),Konva.Tween.attrs[h]||(Konva.Tween.attrs[h]={}),Konva.Tween.attrs[h][this._id]||(Konva.Tween.attrs[h][this._id]={}),Konva.Tween.tweens[h]||(Konva.Tween.tweens[h]={}),i)void 0===t[r]&&this._addAttr(r,i[r]);this.reset(),this.onFinish=i.onFinish,this.onReset=i.onReset},Konva.Tween.attrs={},Konva.Tween.tweens={},Konva.Tween.prototype={_addAttr:function(t,e){var n,a,r,o,s,h,l,c,d=this.node,u=d._id;if((r=Konva.Tween.tweens[u][t])&&delete Konva.Tween.attrs[u][r][t],n=d.getAttr(t),Konva.Util._isArray(e))if(a=[],s=Math.max(e.length,n.length),"points"===t&&e.length!==n.length&&(e.length>n.length?(l=n,n=Konva.Util._prepareArrayForTween(n,e,d.closed())):(h=e,e=Konva.Util._prepareArrayForTween(e,n,d.closed()))),0===t.indexOf("fill"))for(o=0;o<s;o++)if(o%2==0)a.push(e[o]-n[o]);else{var g=Konva.Util.colorToRGBA(n[o]);c=Konva.Util.colorToRGBA(e[o]),n[o]=g,a.push({r:c.r-g.r,g:c.g-g.g,b:c.b-g.b,a:c.a-g.a})}else for(o=0;o<s;o++)a.push(e[o]-n[o]);else-1!==i.indexOf(t)?(n=Konva.Util.colorToRGBA(n),a={r:(c=Konva.Util.colorToRGBA(e)).r-n.r,g:c.g-n.g,b:c.b-n.b,a:c.a-n.a}):a=e-n;Konva.Tween.attrs[u][this._id][t]={start:n,diff:a,end:e,trueEnd:h,trueStart:l},Konva.Tween.tweens[u][t]=this._id},_tweenFunc:function(t){var e,n,a,r,o,s,h,l,c=this.node,d=Konva.Tween.attrs[c._id][this._id];for(e in d){if(a=(n=d[e]).start,r=n.diff,l=n.end,Konva.Util._isArray(a))if(o=[],h=Math.max(a.length,l.length),0===e.indexOf("fill"))for(s=0;s<h;s++)s%2==0?o.push((a[s]||0)+r[s]*t):o.push("rgba("+Math.round(a[s].r+r[s].r*t)+","+Math.round(a[s].g+r[s].g*t)+","+Math.round(a[s].b+r[s].b*t)+","+(a[s].a+r[s].a*t)+")");else for(s=0;s<h;s++)o.push((a[s]||0)+r[s]*t);else o=-1!==i.indexOf(e)?"rgba("+Math.round(a.r+r.r*t)+","+Math.round(a.g+r.g*t)+","+Math.round(a.b+r.b*t)+","+(a.a+r.a*t)+")":a+r*t;c.setAttr(e,o)}},_addListeners:function(){var t=this;this.tween.onPlay=function(){t.anim.start()},this.tween.onReverse=function(){t.anim.start()},this.tween.onPause=function(){t.anim.stop()},this.tween.onFinish=function(){var e=t.node,i=Konva.Tween.attrs[e._id][t._id];i.points&&i.points.trueEnd&&e.points(i.points.trueEnd),t.onFinish&&t.onFinish.call(t)},this.tween.onReset=function(){var e=t.node,i=Konva.Tween.attrs[e._id][t._id];i.points&&i.points.trueStart&&e.points(i.points.trueStart),t.onReset&&t.onReset()}},play:function(){return this.tween.play(),this},reverse:function(){return this.tween.reverse(),this},reset:function(){return this.tween.reset(),this},seek:function(t){return this.tween.seek(1e3*t),this},pause:function(){return this.tween.pause(),this},finish:function(){return this.tween.finish(),this},destroy:function(){var t,e=this.node._id,i=this._id,n=Konva.Tween.tweens[e];for(t in this.pause(),n)delete Konva.Tween.tweens[e][t];delete Konva.Tween.attrs[e][i]}},Konva.Node.prototype.to=function(t){var e=t.onFinish;t.node=this,t.onFinish=function(){this.destroy(),e&&e()},new Konva.Tween(t).play()},Konva.Easings={BackEaseIn:function(t,e,i,n){var a=1.70158;return i*(t/=n)*t*((a+1)*t-a)+e},BackEaseOut:function(t,e,i,n){var a=1.70158;return i*((t=t/n-1)*t*((a+1)*t+a)+1)+e},BackEaseInOut:function(t,e,i,n){var a=1.70158;return(t/=n/2)<1?i/2*(t*t*((1+(a*=1.525))*t-a))+e:i/2*((t-=2)*t*((1+(a*=1.525))*t+a)+2)+e},ElasticEaseIn:function(t,e,i,n,a,r){var o=0;return 0===t?e:1==(t/=n)?e+i:(r||(r=.3*n),!a||a<Math.abs(i)?(a=i,o=r/4):o=r/(2*Math.PI)*Math.asin(i/a),-a*Math.pow(2,10*(t-=1))*Math.sin((t*n-o)*(2*Math.PI)/r)+e)},ElasticEaseOut:function(t,e,i,n,a,r){var o=0;return 0===t?e:1==(t/=n)?e+i:(r||(r=.3*n),!a||a<Math.abs(i)?(a=i,o=r/4):o=r/(2*Math.PI)*Math.asin(i/a),a*Math.pow(2,-10*t)*Math.sin((t*n-o)*(2*Math.PI)/r)+i+e)},ElasticEaseInOut:function(t,e,i,n,a,r){var o=0;return 0===t?e:2==(t/=n/2)?e+i:(r||(r=n*(.3*1.5)),!a||a<Math.abs(i)?(a=i,o=r/4):o=r/(2*Math.PI)*Math.asin(i/a),t<1?a*Math.pow(2,10*(t-=1))*Math.sin((t*n-o)*(2*Math.PI)/r)*-.5+e:a*Math.pow(2,-10*(t-=1))*Math.sin((t*n-o)*(2*Math.PI)/r)*.5+i+e)},BounceEaseOut:function(t,e,i,n){return(t/=n)<1/2.75?i*(7.5625*t*t)+e:t<2/2.75?i*(7.5625*(t-=1.5/2.75)*t+.75)+e:t<2.5/2.75?i*(7.5625*(t-=2.25/2.75)*t+.9375)+e:i*(7.5625*(t-=2.625/2.75)*t+.984375)+e},BounceEaseIn:function(t,e,i,n){return i-Konva.Easings.BounceEaseOut(n-t,0,i,n)+e},BounceEaseInOut:function(t,e,i,n){return t<n/2?.5*Konva.Easings.BounceEaseIn(2*t,0,i,n)+e:.5*Konva.Easings.BounceEaseOut(2*t-n,0,i,n)+.5*i+e},EaseIn:function(t,e,i,n){return i*(t/=n)*t+e},EaseOut:function(t,e,i,n){return-i*(t/=n)*(t-2)+e},EaseInOut:function(t,e,i,n){return(t/=n/2)<1?i/2*t*t+e:-i/2*(--t*(t-2)-1)+e},StrongEaseIn:function(t,e,i,n){return i*(t/=n)*t*t*t*t+e},StrongEaseOut:function(t,e,i,n){return i*((t=t/n-1)*t*t*t*t+1)+e},StrongEaseInOut:function(t,e,i,n){return(t/=n/2)<1?i/2*t*t*t*t*t+e:i/2*((t-=2)*t*t*t*t+2)+e},Linear:function(t,e,i,n){return i*t/n+e}}}(),function(){"use strict";Konva.DD={anim:new Konva.Animation(function(){var t=this.dirty;return this.dirty=!1,t}),isDragging:!1,justDragged:!1,offset:{x:0,y:0},node:null,_drag:function(t){var e=Konva.DD,i=e.node;if(i){if(!e.isDragging){var n=i.getStage().getPointerPosition();n||(i.getStage()._setPointerPosition(t),n=i.getStage().getPointerPosition());var a=i.dragDistance();if(Math.max(Math.abs(n.x-e.startPointerPos.x),Math.abs(n.y-e.startPointerPos.y))<a)return}if(i.getStage()._setPointerPosition(t),!e.isDragging&&(e.isDragging=!0,i.fire("dragstart",{type:"dragstart",target:i,evt:t},!0),!i.isDragging()))return;i._setDragPosition(t),i.fire("dragmove",{type:"dragmove",target:i,evt:t},!0)}},_endDragBefore:function(t){var e,i=Konva.DD,n=i.node;n&&(e=n.getLayer(),i.anim.stop(),i.isDragging&&(i.isDragging=!1,i.justDragged=!0,Konva.listenClickTap=!1,t&&(t.dragEndNode=n)),delete i.node,(n.getLayer()||e||n instanceof Konva.Stage)&&(e||n).draw())},_endDragAfter:function(t){var e=(t=t||{}).dragEndNode;t&&e&&e.fire("dragend",{type:"dragend",target:e,evt:t},!0)}},Konva.Node.prototype.startDrag=function(){var t=Konva.DD,e=this.getStage(),i=this.getLayer(),n=e.getPointerPosition(),a=this.getAbsolutePosition();n&&(t.node&&t.node.stopDrag(),t.node=this,t.startPointerPos=n,t.offset.x=n.x-a.x,t.offset.y=n.y-a.y,t.anim.setLayers(i||this.getLayers()),t.anim.start(),this._setDragPosition())},Konva.Node.prototype._setDragPosition=function(t){var e=Konva.DD,i=this.getStage().getPointerPosition(),n=this.getDragBoundFunc();if(i){var a={x:i.x-e.offset.x,y:i.y-e.offset.y};void 0!==n&&(a=n.call(this,a,t)),this.setAbsolutePosition(a),this._lastPos&&this._lastPos.x===a.x&&this._lastPos.y===a.y||(e.anim.dirty=!0),this._lastPos=a}},Konva.Node.prototype.stopDrag=function(){var t=Konva.DD,e={};t._endDragBefore(e),t._endDragAfter(e)},Konva.Node.prototype.setDraggable=function(t){this._setAttr("draggable",t),this._dragChange()};var t=Konva.Node.prototype.remove;Konva.Node.prototype.__originalRemove=t,Konva.Node.prototype.remove=function(){var e=Konva.DD;e.node&&e.node._id===this._id&&this.stopDrag(),t.call(this)},Konva.Node.prototype.isDragging=function(){var t=Konva.DD;return!(!t.node||t.node._id!==this._id||!t.isDragging)},Konva.Node.prototype._listenDrag=function(){var t=this;this._dragCleanup(),"Stage"===this.getClassName()?this.on("contentMousedown.konva contentTouchstart.konva",function(e){Konva.DD.node||t.startDrag(e)}):this.on("mousedown.konva touchstart.konva",function(e){1!==e.evt.button&&2!==e.evt.button&&(Konva.DD.node||t.startDrag(e))})},Konva.Node.prototype._dragChange=function(){if(this.attrs.draggable)this._listenDrag();else{this._dragCleanup();var t=this.getStage(),e=Konva.DD;t&&e.node&&e.node._id===this._id&&e.node.stopDrag()}},Konva.Node.prototype._dragCleanup=function(){"Stage"===this.getClassName()?(this.off("contentMousedown.konva"),this.off("contentTouchstart.konva")):(this.off("mousedown.konva"),this.off("touchstart.konva"))},Konva.Factory.addGetterSetter(Konva.Node,"dragBoundFunc"),Konva.Factory.addGetter(Konva.Node,"draggable",!1),Konva.Factory.addOverloadedGetterSetter(Konva.Node,"draggable"),Konva.isBrowser&&(window.addEventListener("mouseup",Konva.DD._endDragBefore,!0),window.addEventListener("touchend",Konva.DD._endDragBefore,!0),window.addEventListener("mousemove",Konva.DD._drag),window.addEventListener("touchmove",Konva.DD._drag),window.addEventListener("mouseup",Konva.DD._endDragAfter,!1),window.addEventListener("touchend",Konva.DD._endDragAfter,!1))}(),function(){"use strict";Konva.Rect=function(t){this.___init(t)},Konva.Rect.prototype={___init:function(t){Konva.Shape.call(this,t),this.className="Rect",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e=this.getCornerRadius(),i=this.getWidth(),n=this.getHeight();t.beginPath(),e?(e=Math.min(e,i/2,n/2),t.moveTo(e,0),t.lineTo(i-e,0),t.arc(i-e,e,e,3*Math.PI/2,0,!1),t.lineTo(i,n-e),t.arc(i-e,n-e,e,0,Math.PI/2,!1),t.lineTo(e,n),t.arc(e,n-e,e,Math.PI/2,Math.PI,!1),t.lineTo(0,e),t.arc(e,e,e,Math.PI,3*Math.PI/2,!1)):t.rect(0,0,i,n),t.closePath(),t.fillStrokeShape(this)}},Konva.Util.extend(Konva.Rect,Konva.Shape),Konva.Factory.addGetterSetter(Konva.Rect,"cornerRadius",0,Konva.Validators.getNumberValidator()),Konva.Collection.mapMethods(Konva.Rect)}(),function(t){"use strict";var e=2*Math.PI-1e-4;t.Circle=function(t){this.___init(t)},t.Circle.prototype={_centroid:!0,___init:function(e){t.Shape.call(this,e),this.className="Circle",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){t.beginPath(),t.arc(0,0,this.getRadius(),0,e,!1),t.closePath(),t.fillStrokeShape(this)},getWidth:function(){return 2*this.getRadius()},getHeight:function(){return 2*this.getRadius()},setWidth:function(e){t.Node.prototype.setWidth.call(this,e),this.radius()!==e/2&&this.setRadius(e/2)},setHeight:function(e){t.Node.prototype.setHeight.call(this,e),this.radius()!==e/2&&this.setRadius(e/2)}},t.Util.extend(t.Circle,t.Shape),t.Factory.addGetterSetter(t.Circle,"radius",0,t.Validators.getNumberValidator()),t.Factory.addOverloadedGetterSetter(t.Circle,"radius"),t.Collection.mapMethods(t.Circle)}(Konva),function(){"use strict";var t=2*Math.PI-1e-4;Konva.Ellipse=function(t){this.___init(t)},Konva.Ellipse.prototype={_centroid:!0,___init:function(t){Konva.Shape.call(this,t),this.className="Ellipse",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(e){var i=this.getRadiusX(),n=this.getRadiusY();e.beginPath(),e.save(),i!==n&&e.scale(1,n/i),e.arc(0,0,i,0,t,!1),e.restore(),e.closePath(),e.fillStrokeShape(this)},getWidth:function(){return 2*this.getRadiusX()},getHeight:function(){return 2*this.getRadiusY()},setWidth:function(t){Konva.Node.prototype.setWidth.call(this,t),this.setRadius({x:t/2})},setHeight:function(t){Konva.Node.prototype.setHeight.call(this,t),this.setRadius({y:t/2})}},Konva.Util.extend(Konva.Ellipse,Konva.Shape),Konva.Factory.addComponentsGetterSetter(Konva.Ellipse,"radius",["x","y"]),Konva.Factory.addGetterSetter(Konva.Ellipse,"radiusX",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Ellipse,"radiusY",0,Konva.Validators.getNumberValidator()),Konva.Collection.mapMethods(Konva.Ellipse)}(),function(){"use strict";var t=2*Math.PI-1e-4;Konva.Ring=function(t){this.___init(t)},Konva.Ring.prototype={_centroid:!0,___init:function(t){Konva.Shape.call(this,t),this.className="Ring",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(e){e.beginPath(),e.arc(0,0,this.getInnerRadius(),0,t,!1),e.moveTo(this.getOuterRadius(),0),e.arc(0,0,this.getOuterRadius(),t,0,!0),e.closePath(),e.fillStrokeShape(this)},getWidth:function(){return 2*this.getOuterRadius()},getHeight:function(){return 2*this.getOuterRadius()},setWidth:function(t){Konva.Node.prototype.setWidth.call(this,t),this.outerRadius()!==t/2&&this.setOuterRadius(t/2)},setHeight:function(t){Konva.Node.prototype.setHeight.call(this,t),this.outerRadius()!==t/2&&this.setOuterRadius(t/2)},setOuterRadius:function(t){this._setAttr("outerRadius",t),this.setWidth(2*t),this.setHeight(2*t)}},Konva.Util.extend(Konva.Ring,Konva.Shape),Konva.Factory.addGetterSetter(Konva.Ring,"innerRadius",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetter(Konva.Ring,"outerRadius",0,Konva.Validators.getNumberValidator()),Konva.Factory.addOverloadedGetterSetter(Konva.Ring,"outerRadius"),Konva.Collection.mapMethods(Konva.Ring)}(),function(){"use strict";Konva.Wedge=function(t){this.___init(t)},Konva.Wedge.prototype={_centroid:!0,___init:function(t){Konva.Shape.call(this,t),this.className="Wedge",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){t.beginPath(),t.arc(0,0,this.getRadius(),0,Konva.getAngle(this.getAngle()),this.getClockwise()),t.lineTo(0,0),t.closePath(),t.fillStrokeShape(this)},getWidth:function(){return 2*this.getRadius()},getHeight:function(){return 2*this.getRadius()},setWidth:function(t){Konva.Node.prototype.setWidth.call(this,t),this.radius()!==t/2&&this.setRadius(t/2)},setHeight:function(t){Konva.Node.prototype.setHeight.call(this,t),this.radius()!==t/2&&this.setRadius(t/2)}},Konva.Util.extend(Konva.Wedge,Konva.Shape),Konva.Factory.addGetterSetter(Konva.Wedge,"radius",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Wedge,"angle",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Wedge,"clockwise",!1),Konva.Factory.backCompat(Konva.Wedge,{angleDeg:"angle",getAngleDeg:"getAngle",setAngleDeg:"setAngle"}),Konva.Collection.mapMethods(Konva.Wedge)}(),function(t){"use strict";t.Arc=function(t){this.___init(t)},t.Arc.prototype={_centroid:!0,___init:function(e){t.Shape.call(this,e),this.className="Arc",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(e){var i=t.getAngle(this.angle()),n=this.clockwise();e.beginPath(),e.arc(0,0,this.getOuterRadius(),0,i,n),e.arc(0,0,this.getInnerRadius(),i,0,!n),e.closePath(),e.fillStrokeShape(this)},getWidth:function(){return 2*this.getOuterRadius()},getHeight:function(){return 2*this.getOuterRadius()},setWidth:function(e){t.Node.prototype.setWidth.call(this,e),this.getOuterRadius()!==e/2&&this.setOuterRadius(e/2)},setHeight:function(e){t.Node.prototype.setHeight.call(this,e),this.getOuterRadius()!==e/2&&this.setOuterRadius(e/2)}},t.Util.extend(t.Arc,t.Shape),t.Factory.addGetterSetter(t.Arc,"innerRadius",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Arc,"outerRadius",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Arc,"angle",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Arc,"clockwise",!1),t.Collection.mapMethods(t.Arc)}(Konva),function(){"use strict";Konva.Image=function(t){this.___init(t)},Konva.Image.prototype={___init:function(t){Konva.Shape.call(this,t),this.className="Image",this.sceneFunc(this._sceneFunc),this.hitFunc(this._hitFunc)},_useBufferCanvas:function(){return(this.hasShadow()||1!==this.getAbsoluteOpacity())&&this.hasStroke()&&this.getStage()},_sceneFunc:function(t){var e,i,n,a=this.getWidth(),r=this.getHeight(),o=this.getImage();o&&(e=this.getCropWidth(),i=this.getCropHeight(),n=e&&i?[o,this.getCropX(),this.getCropY(),e,i,0,0,a,r]:[o,0,0,a,r]),(this.hasFill()||this.hasStroke())&&(t.beginPath(),t.rect(0,0,a,r),t.closePath(),t.fillStrokeShape(this)),o&&t.drawImage.apply(t,n)},_hitFunc:function(t){var e=this.getWidth(),i=this.getHeight();t.beginPath(),t.rect(0,0,e,i),t.closePath(),t.fillStrokeShape(this)},getWidth:function(){var t=this.getImage();return this.attrs.width||(t?t.width:0)},getHeight:function(){var t=this.getImage();return this.attrs.height||(t?t.height:0)}},Konva.Util.extend(Konva.Image,Konva.Shape),Konva.Factory.addGetterSetter(Konva.Image,"image"),Konva.Factory.addComponentsGetterSetter(Konva.Image,"crop",["x","y","width","height"]),Konva.Factory.addGetterSetter(Konva.Image,"cropX",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Image,"cropY",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Image,"cropWidth",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Image,"cropHeight",0,Konva.Validators.getNumberValidator()),Konva.Collection.mapMethods(Konva.Image),Konva.Image.fromURL=function(t,e){var i=new Image;i.onload=function(){var t=new Konva.Image({image:i});e(t)},i.crossOrigin="Anonymous",i.src=t}}(),function(){"use strict";var t,e="2d",i=["fontFamily","fontSize","fontStyle","fontVariant","padding","align","verticalAlign","lineHeight","text","width","height","wrap","ellipsis","letterSpacing"],n=i.length;function a(){return t||(t=Konva.Util.createCanvasElement().getContext(e))}function r(t){t.fillText(this.partialText,0,0)}function o(t){t.strokeText(this.partialText,0,0)}Konva.Text=function(t){this.___init(t)},Konva.Text.prototype={___init:function(t){(t=t||{}).fillLinearGradientColorStops||t.fillRadialGradientColorStops||(t.fill=t.fill||"black"),Konva.Shape.call(this,t),this._fillFunc=r,this._strokeFunc=o,this.className="Text";for(var e=0;e<n;e++)this.on(i[e]+"Change.konva",this._setTextData);this._setTextData(),this.sceneFunc(this._sceneFunc),this.hitFunc(this._hitFunc)},_sceneFunc:function(t){var e,i=this.getPadding(),n=this.getTextHeight(),a=this.getLineHeight()*n,r=this.textArr,o=r.length,s=this.getVerticalAlign(),h=0,l=this.getAlign(),c=this.getWidth(),d=this.getLetterSpacing(),u=this.textDecoration(),g=this.fill(),f=this.fontSize();for(t.setAttr("font",this._getContextFont()),t.setAttr("textBaseline","middle"),t.setAttr("textAlign","left"),"middle"===s?h=(this.getHeight()-o*a-2*i)/2:"bottom"===s&&(h=this.getHeight()-o*a-2*i),i?(t.translate(i,0),t.translate(0,h+i+a/2)):t.translate(0,h+a/2),e=0;e<o;e++){var v,p,m,_=r[e],y=_.text,K=_.width,S=e!==o-1;if(t.save(),"right"===l?t.translate(c-K-2*i,0):"center"===l&&t.translate((c-K-2*i)/2,0),-1!==u.indexOf("underline")&&(t.save(),t.beginPath(),t.moveTo(0,Math.round(a/2)),p=0===(v=y.split(" ").length-1),m="justify"===l&&S&&!p?c-2*i:K,t.lineTo(Math.round(m),Math.round(a/2)),t.lineWidth=f/15,t.strokeStyle=g,t.stroke(),t.restore()),-1!==u.indexOf("line-through")&&(t.save(),t.beginPath(),t.moveTo(0,0),p=0===(v=y.split(" ").length-1),m="justify"===l&&S&&!p?c-2*i:K,t.lineTo(Math.round(m),0),t.lineWidth=f/15,t.strokeStyle=g,t.stroke(),t.restore()),0!==d||"justify"===l){v=y.split(" ").length-1;for(var b=0;b<y.length;b++){var x=y[b];" "===x&&e!==o-1&&"justify"===l&&t.translate(Math.floor((c-2*i-K)/v),0),this.partialText=x,t.fillStrokeShape(this),t.translate(Math.round(this._getTextSize(x).width)+d,0)}}else this.partialText=y,t.fillStrokeShape(this);t.restore(),o>1&&t.translate(0,a)}},_hitFunc:function(t){var e=this.getWidth(),i=this.getHeight();t.beginPath(),t.rect(0,0,e,i),t.closePath(),t.fillStrokeShape(this)},setText:function(t){var e=Konva.Util._isString(t)?t:(t||"").toString();return this._setAttr("text",e),this},getWidth:function(){return"auto"===this.attrs.width||void 0===this.attrs.width?this.getTextWidth()+2*this.getPadding():this.attrs.width},getHeight:function(){return"auto"===this.attrs.height||void 0===this.attrs.height?this.getTextHeight()*this.textArr.length*this.getLineHeight()+2*this.getPadding():this.attrs.height},getTextWidth:function(){return this.textWidth},getTextHeight:function(){return this.textHeight},_getTextSize:function(t){var e,i=a(),n=this.getFontSize();return i.save(),i.font=this._getContextFont(),e=i.measureText(t),i.restore(),{width:e.width,height:parseInt(n,10)}},_getContextFont:function(){return Konva.UA.isIE?this.getFontStyle()+" "+this.getFontSize()+"px "+this.getFontFamily():this.getFontStyle()+" "+this.getFontVariant()+" "+this.getFontSize()+"px "+this.getFontFamily()},_addTextLine:function(t){"justify"===this.align()&&(t=t.trim());var e=this._getTextWidth(t);return this.textArr.push({text:t,width:e})},_getTextWidth:function(t){var e=this.getLetterSpacing(),i=t.length;return a().measureText(t).width+(i?e*(i-1):0)},_setTextData:function(){var t=this.getText().split("\n"),e=+this.getFontSize(),i=0,n=this.getLineHeight()*e,r=this.attrs.width,o=this.attrs.height,s="auto"!==r,h="auto"!==o,l=this.getPadding(),c=r-2*l,d=o-2*l,u=0,g=this.getWrap(),f="none"!==g,v="char"!==g&&f,p=this.getEllipsis()&&!f;this.textArr=[],a().font=this._getContextFont();for(var m=0,_=t.length;m<_;++m){var y=t[m],K=p?this._getTextWidth("…"):0,S=this._getTextWidth(y);if(s&&S>c)for(;y.length>0;){for(var b=0,x=y.length,C="",w=0;b<x;){var F=b+x>>>1,T=y.slice(0,F+1),P=this._getTextWidth(T)+K;P<=c?(b=F+1,C=T+(p?"…":""),w=P):x=F}if(!C)break;if(v){var A,k=y[C.length];(A=(" "===k||"-"===k)&&w<=c?C.length:Math.max(C.lastIndexOf(" "),C.lastIndexOf("-"))+1)>0&&(b=A,C=C.slice(0,b),w=this._getTextWidth(C))}if(C=Konva.Util.trimRight(C),this._addTextLine(C),i=Math.max(i,w),u+=n,!f||h&&u+n>d)break;if(y=y.slice(b),(y=Konva.Util.trimLeft(y)).length>0&&(S=this._getTextWidth(y))<=c){this._addTextLine(y),u+=n,i=Math.max(i,S);break}}else this._addTextLine(y),u+=n,i=Math.max(i,S);if(h&&u+n>d)break}this.textHeight=e,this.textWidth=i}},Konva.Util.extend(Konva.Text,Konva.Shape),Konva.Factory.addSetter(Konva.Node,"width",Konva.Validators.getNumberOrAutoValidator()),Konva.Factory.addSetter(Konva.Node,"height",Konva.Validators.getNumberOrAutoValidator()),Konva.Factory.addGetterSetter(Konva.Text,"fontFamily","Arial"),Konva.Factory.addGetterSetter(Konva.Text,"fontSize",12,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Text,"fontStyle","normal"),Konva.Factory.addGetterSetter(Konva.Text,"fontVariant","normal"),Konva.Factory.addGetterSetter(Konva.Text,"padding",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Text,"align","left"),Konva.Factory.addGetterSetter(Konva.Text,"verticalAlign","top"),Konva.Factory.addGetterSetter(Konva.Text,"lineHeight",1,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Text,"wrap","word"),Konva.Factory.addGetterSetter(Konva.Text,"ellipsis",!1),Konva.Factory.addGetterSetter(Konva.Text,"letterSpacing",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetter(Konva.Text,"text",""),Konva.Factory.addOverloadedGetterSetter(Konva.Text,"text"),Konva.Factory.addGetterSetter(Konva.Text,"textDecoration",""),Konva.Collection.mapMethods(Konva.Text)}(),function(){"use strict";Konva.Line=function(t){this.___init(t)},Konva.Line.prototype={___init:function(t){Konva.Shape.call(this,t),this.className="Line",this.on("pointsChange.konva tensionChange.konva closedChange.konva bezierChange.konva",function(){this._clearCache("tensionPoints")}),this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e,i,n,a=this.getPoints(),r=a.length,o=this.getTension(),s=this.getClosed(),h=this.getBezier();if(r){if(t.beginPath(),t.moveTo(a[0],a[1]),0!==o&&r>4){for(i=(e=this.getTensionPoints()).length,n=s?0:4,s||t.quadraticCurveTo(e[0],e[1],e[2],e[3]);n<i-2;)t.bezierCurveTo(e[n++],e[n++],e[n++],e[n++],e[n++],e[n++]);s||t.quadraticCurveTo(e[i-2],e[i-1],a[r-2],a[r-1])}else if(h)for(n=2;n<r;)t.bezierCurveTo(a[n++],a[n++],a[n++],a[n++],a[n++],a[n++]);else for(n=2;n<r;n+=2)t.lineTo(a[n],a[n+1]);s?(t.closePath(),t.fillStrokeShape(this)):t.strokeShape(this)}},getTensionPoints:function(){return this._getCache("tensionPoints",this._getTensionPoints)},_getTensionPoints:function(){return this.getClosed()?this._getTensionPointsClosed():Konva.Util._expandPoints(this.getPoints(),this.getTension())},_getTensionPointsClosed:function(){var t=this.getPoints(),e=t.length,i=this.getTension(),n=Konva.Util,a=n._getControlPoints(t[e-2],t[e-1],t[0],t[1],t[2],t[3],i),r=n._getControlPoints(t[e-4],t[e-3],t[e-2],t[e-1],t[0],t[1],i),o=Konva.Util._expandPoints(t,i);return[a[2],a[3]].concat(o).concat([r[0],r[1],t[e-2],t[e-1],r[2],r[3],a[0],a[1],t[0],t[1]])},getWidth:function(){return this.getSelfRect().width},getHeight:function(){return this.getSelfRect().height},getSelfRect:function(){for(var t,e,i,n=(t=0!==this.getTension()?this._getTensionPoints():this.getPoints())[0],a=t[0],r=t[1],o=t[1],s=0;s<t.length/2;s++)e=t[2*s],i=t[2*s+1],n=Math.min(n,e),a=Math.max(a,e),r=Math.min(r,i),o=Math.max(o,i);return{x:Math.round(n),y:Math.round(r),width:Math.round(a-n),height:Math.round(o-r)}}},Konva.Util.extend(Konva.Line,Konva.Shape),Konva.Factory.addGetterSetter(Konva.Line,"closed",!1),Konva.Factory.addGetterSetter(Konva.Line,"bezier",!1),Konva.Factory.addGetterSetter(Konva.Line,"tension",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Line,"points",[],Konva.Validators.getNumberArrayValidator()),Konva.Collection.mapMethods(Konva.Line)}(),function(){"use strict";Konva.Sprite=function(t){this.___init(t)},Konva.Sprite.prototype={___init:function(t){Konva.Shape.call(this,t),this.className="Sprite",this._updated=!0;var e=this;this.anim=new Konva.Animation(function(){var t=e._updated;return e._updated=!1,t}),this.on("animationChange.konva",function(){this.frameIndex(0)}),this.on("frameIndexChange.konva",function(){this._updated=!0}),this.on("frameRateChange.konva",function(){this.anim.isRunning()&&(clearInterval(this.interval),this._setInterval())}),this.sceneFunc(this._sceneFunc),this.hitFunc(this._hitFunc)},_sceneFunc:function(t){var e=this.getAnimation(),i=this.frameIndex(),n=4*i,a=this.getAnimations()[e],r=this.frameOffsets(),o=a[n+0],s=a[n+1],h=a[n+2],l=a[n+3],c=this.getImage();if((this.hasFill()||this.hasStroke())&&(t.beginPath(),t.rect(0,0,h,l),t.closePath(),t.fillStrokeShape(this)),c)if(r){var d=r[e],u=2*i;t.drawImage(c,o,s,h,l,d[u+0],d[u+1],h,l)}else t.drawImage(c,o,s,h,l,0,0,h,l)},_hitFunc:function(t){var e=this.getAnimation(),i=this.frameIndex(),n=4*i,a=this.getAnimations()[e],r=this.frameOffsets(),o=a[n+2],s=a[n+3];if(t.beginPath(),r){var h=r[e],l=2*i;t.rect(h[l+0],h[l+1],o,s)}else t.rect(0,0,o,s);t.closePath(),t.fillShape(this)},_useBufferCanvas:function(){return(this.hasShadow()||1!==this.getAbsoluteOpacity())&&this.hasStroke()},_setInterval:function(){var t=this;this.interval=setInterval(function(){t._updateIndex()},1e3/this.getFrameRate())},start:function(){if(!this.isRunning()){var t=this.getLayer();this.anim.setLayers(t),this._setInterval(),this.anim.start()}},stop:function(){this.anim.stop(),clearInterval(this.interval)},isRunning:function(){return this.anim.isRunning()},_updateIndex:function(){var t=this.frameIndex(),e=this.getAnimation();t<this.getAnimations()[e].length/4-1?this.frameIndex(t+1):this.frameIndex(0)}},Konva.Util.extend(Konva.Sprite,Konva.Shape),Konva.Factory.addGetterSetter(Konva.Sprite,"animation"),Konva.Factory.addGetterSetter(Konva.Sprite,"animations"),Konva.Factory.addGetterSetter(Konva.Sprite,"frameOffsets"),Konva.Factory.addGetterSetter(Konva.Sprite,"image"),Konva.Factory.addGetterSetter(Konva.Sprite,"frameIndex",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Sprite,"frameRate",17,Konva.Validators.getNumberValidator()),Konva.Factory.backCompat(Konva.Sprite,{index:"frameIndex",getIndex:"getFrameIndex",setIndex:"setFrameIndex"}),Konva.Collection.mapMethods(Konva.Sprite)}(),function(){"use strict";Konva.Path=function(t){this.___init(t)},Konva.Path.prototype={___init:function(t){this.dataArray=[];var e=this;Konva.Shape.call(this,t),this.className="Path",this.dataArray=Konva.Path.parsePathData(this.getData()),this.pathLength=0;for(var i=0;i<this.dataArray.length;++i)this.pathLength+=this.dataArray[i].pathLength;this.on("dataChange.konva",function(){e.dataArray=Konva.Path.parsePathData(this.getData()),this.pathLength=0;for(var t=0;t<this.dataArray.length;++t)this.pathLength+=this.dataArray[t].pathLength}),this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e=this.dataArray;t.beginPath();for(var i=0;i<e.length;i++){var n=e[i].command,a=e[i].points;switch(n){case"L":t.lineTo(a[0],a[1]);break;case"M":t.moveTo(a[0],a[1]);break;case"C":t.bezierCurveTo(a[0],a[1],a[2],a[3],a[4],a[5]);break;case"Q":t.quadraticCurveTo(a[0],a[1],a[2],a[3]);break;case"A":var r=a[0],o=a[1],s=a[2],h=a[3],l=a[4],c=a[5],d=a[6],u=a[7],g=s>h?s:h,f=s>h?1:s/h,v=s>h?h/s:1;t.translate(r,o),t.rotate(d),t.scale(f,v),t.arc(0,0,g,l,l+c,1-u),t.scale(1/f,1/v),t.rotate(-d),t.translate(-r,-o);break;case"z":t.closePath()}}t.fillStrokeShape(this)},getSelfRect:function(){var t=[];this.dataArray.forEach(function(e){t=t.concat(e.points)});for(var e,i,n=t[0],a=t[0],r=t[1],o=t[1],s=0;s<t.length/2;s++)e=t[2*s],i=t[2*s+1],isNaN(e)||(n=Math.min(n,e),a=Math.max(a,e)),isNaN(i)||(r=Math.min(r,i),o=Math.max(o,i));return{x:Math.round(n),y:Math.round(r),width:Math.round(a-n),height:Math.round(o-r)}},getLength:function(){return this.pathLength},getPointAtLength:function(t){var e,i=0,n=this.dataArray.length;if(!n)return null;for(;i<n&&t>this.dataArray[i].pathLength;)t-=this.dataArray[i].pathLength,++i;if(i===n)return{x:(e=this.dataArray[i-1].points.slice(-2))[0],y:e[1]};if(t<.01)return{x:(e=this.dataArray[i].points.slice(0,2))[0],y:e[1]};var a=this.dataArray[i],r=a.points;switch(a.command){case"L":return Konva.Path.getPointOnLine(t,a.start.x,a.start.y,r[0],r[1]);case"C":return Konva.Path.getPointOnCubicBezier(t/a.pathLength,a.start.x,a.start.y,r[0],r[1],r[2],r[3],r[4],r[5]);case"Q":return Konva.Path.getPointOnQuadraticBezier(t/a.pathLength,a.start.x,a.start.y,r[0],r[1],r[2],r[3]);case"A":var o=r[0],s=r[1],h=r[2],l=r[3],c=r[4],d=r[5],u=r[6];return c+=d*t/a.pathLength,Konva.Path.getPointOnEllipticalArc(o,s,h,l,c,u)}return null}},Konva.Util.extend(Konva.Path,Konva.Shape),Konva.Path.getLineLength=function(t,e,i,n){return Math.sqrt((i-t)*(i-t)+(n-e)*(n-e))},Konva.Path.getPointOnLine=function(t,e,i,n,a,r,o){void 0===r&&(r=e),void 0===o&&(o=i);var s=(a-i)/(n-e+1e-8),h=Math.sqrt(t*t/(1+s*s));n<e&&(h*=-1);var l,c=s*h;if(n===e)l={x:r,y:o+c};else if((o-i)/(r-e+1e-8)===s)l={x:r+h,y:o+c};else{var d,u,g=this.getLineLength(e,i,n,a);if(g<1e-8)return;var f=(r-e)*(n-e)+(o-i)*(a-i);d=e+(f/=g*g)*(n-e),u=i+f*(a-i);var v=this.getLineLength(r,o,d,u),p=Math.sqrt(t*t-v*v);h=Math.sqrt(p*p/(1+s*s)),n<e&&(h*=-1),l={x:d+h,y:u+(c=s*h)}}return l},Konva.Path.getPointOnCubicBezier=function(t,e,i,n,a,r,o,s,h){function l(t){return t*t*t}function c(t){return 3*t*t*(1-t)}function d(t){return 3*t*(1-t)*(1-t)}function u(t){return(1-t)*(1-t)*(1-t)}return{x:s*l(t)+r*c(t)+n*d(t)+e*u(t),y:h*l(t)+o*c(t)+a*d(t)+i*u(t)}},Konva.Path.getPointOnQuadraticBezier=function(t,e,i,n,a,r,o){function s(t){return t*t}function h(t){return 2*t*(1-t)}function l(t){return(1-t)*(1-t)}return{x:r*s(t)+n*h(t)+e*l(t),y:o*s(t)+a*h(t)+i*l(t)}},Konva.Path.getPointOnEllipticalArc=function(t,e,i,n,a,r){var o=Math.cos(r),s=Math.sin(r),h=i*Math.cos(a),l=n*Math.sin(a);return{x:t+(h*o-l*s),y:e+(h*s+l*o)}},Konva.Path.parsePathData=function(t){if(!t)return[];var e=t,i=["m","M","l","L","v","V","h","H","z","Z","c","C","q","Q","t","T","s","S","a","A"];e=e.replace(new RegExp(" ","g"),",");for(var n=0;n<i.length;n++)e=e.replace(new RegExp(i[n],"g"),"|"+i[n]);var a,r=e.split("|"),o=[],s=[],h=0,l=0,c=/([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:e[-+]?\d+)?)/gi;for(n=1;n<r.length;n++){var d=r[n],u=d.charAt(0);for(d=d.slice(1),s.length=0;a=c.exec(d);)s.push(a[0]);for(var g=[],f=0,v=s.length;f<v;f++){var p=parseFloat(s[f]);isNaN(p)?g.push(0):g.push(p)}for(;g.length>0&&!isNaN(g[0]);){var m,_,y,K,S,b,x,C,w,F,T=null,P=[],A=h,k=l;switch(u){case"l":h+=g.shift(),l+=g.shift(),T="L",P.push(h,l);break;case"L":h=g.shift(),l=g.shift(),P.push(h,l);break;case"m":var M=g.shift(),G=g.shift();if(h+=M,l+=G,T="M",o.length>2&&"z"===o[o.length-1].command)for(var N=o.length-2;N>=0;N--)if("M"===o[N].command){h=o[N].points[0]+M,l=o[N].points[1]+G;break}P.push(h,l),u="l";break;case"M":h=g.shift(),l=g.shift(),T="M",P.push(h,l),u="L";break;case"h":h+=g.shift(),T="L",P.push(h,l);break;case"H":h=g.shift(),T="L",P.push(h,l);break;case"v":l+=g.shift(),T="L",P.push(h,l);break;case"V":l=g.shift(),T="L",P.push(h,l);break;case"C":P.push(g.shift(),g.shift(),g.shift(),g.shift()),h=g.shift(),l=g.shift(),P.push(h,l);break;case"c":P.push(h+g.shift(),l+g.shift(),h+g.shift(),l+g.shift()),h+=g.shift(),l+=g.shift(),T="C",P.push(h,l);break;case"S":_=h,y=l,"C"===(m=o[o.length-1]).command&&(_=h+(h-m.points[2]),y=l+(l-m.points[3])),P.push(_,y,g.shift(),g.shift()),h=g.shift(),l=g.shift(),T="C",P.push(h,l);break;case"s":_=h,y=l,"C"===(m=o[o.length-1]).command&&(_=h+(h-m.points[2]),y=l+(l-m.points[3])),P.push(_,y,h+g.shift(),l+g.shift()),h+=g.shift(),l+=g.shift(),T="C",P.push(h,l);break;case"Q":P.push(g.shift(),g.shift()),h=g.shift(),l=g.shift(),P.push(h,l);break;case"q":P.push(h+g.shift(),l+g.shift()),h+=g.shift(),l+=g.shift(),T="Q",P.push(h,l);break;case"T":_=h,y=l,"Q"===(m=o[o.length-1]).command&&(_=h+(h-m.points[0]),y=l+(l-m.points[1])),h=g.shift(),l=g.shift(),T="Q",P.push(_,y,h,l);break;case"t":_=h,y=l,"Q"===(m=o[o.length-1]).command&&(_=h+(h-m.points[0]),y=l+(l-m.points[1])),h+=g.shift(),l+=g.shift(),T="Q",P.push(_,y,h,l);break;case"A":K=g.shift(),S=g.shift(),b=g.shift(),x=g.shift(),C=g.shift(),w=h,F=l,h=g.shift(),l=g.shift(),T="A",P=this.convertEndpointToCenterParameterization(w,F,h,l,x,C,K,S,b);break;case"a":K=g.shift(),S=g.shift(),b=g.shift(),x=g.shift(),C=g.shift(),w=h,F=l,h+=g.shift(),l+=g.shift(),T="A",P=this.convertEndpointToCenterParameterization(w,F,h,l,x,C,K,S,b)}o.push({command:T||u,points:P,start:{x:A,y:k},pathLength:this.calcLength(A,k,T||u,P)})}"z"!==u&&"Z"!==u||o.push({command:"z",points:[],start:void 0,pathLength:0})}return o},Konva.Path.calcLength=function(t,e,i,n){var a,r,o,s,h=Konva.Path;switch(i){case"L":return h.getLineLength(t,e,n[0],n[1]);case"C":for(a=0,r=h.getPointOnCubicBezier(0,t,e,n[0],n[1],n[2],n[3],n[4],n[5]),s=.01;s<=1;s+=.01)o=h.getPointOnCubicBezier(s,t,e,n[0],n[1],n[2],n[3],n[4],n[5]),a+=h.getLineLength(r.x,r.y,o.x,o.y),r=o;return a;case"Q":for(a=0,r=h.getPointOnQuadraticBezier(0,t,e,n[0],n[1],n[2],n[3]),s=.01;s<=1;s+=.01)o=h.getPointOnQuadraticBezier(s,t,e,n[0],n[1],n[2],n[3]),a+=h.getLineLength(r.x,r.y,o.x,o.y),r=o;return a;case"A":a=0;var l=n[4],c=n[5],d=n[4]+c,u=Math.PI/180;if(Math.abs(l-d)<u&&(u=Math.abs(l-d)),r=h.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],l,0),c<0)for(s=l-u;s>d;s-=u)o=h.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],s,0),a+=h.getLineLength(r.x,r.y,o.x,o.y),r=o;else for(s=l+u;s<d;s+=u)o=h.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],s,0),a+=h.getLineLength(r.x,r.y,o.x,o.y),r=o;return o=h.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],d,0),a+=h.getLineLength(r.x,r.y,o.x,o.y)}return 0},Konva.Path.convertEndpointToCenterParameterization=function(t,e,i,n,a,r,o,s,h){var l=h*(Math.PI/180),c=Math.cos(l)*(t-i)/2+Math.sin(l)*(e-n)/2,d=-1*Math.sin(l)*(t-i)/2+Math.cos(l)*(e-n)/2,u=c*c/(o*o)+d*d/(s*s);u>1&&(o*=Math.sqrt(u),s*=Math.sqrt(u));var g=Math.sqrt((o*o*(s*s)-o*o*(d*d)-s*s*(c*c))/(o*o*(d*d)+s*s*(c*c)));a===r&&(g*=-1),isNaN(g)&&(g=0);var f=g*o*d/s,v=g*-s*c/o,p=(t+i)/2+Math.cos(l)*f-Math.sin(l)*v,m=(e+n)/2+Math.sin(l)*f+Math.cos(l)*v,_=function(t){return Math.sqrt(t[0]*t[0]+t[1]*t[1])},y=function(t,e){return(t[0]*e[0]+t[1]*e[1])/(_(t)*_(e))},K=function(t,e){return(t[0]*e[1]<t[1]*e[0]?-1:1)*Math.acos(y(t,e))},S=K([1,0],[(c-f)/o,(d-v)/s]),b=[(c-f)/o,(d-v)/s],x=[(-1*c-f)/o,(-1*d-v)/s],C=K(b,x);return y(b,x)<=-1&&(C=Math.PI),y(b,x)>=1&&(C=0),0===r&&C>0&&(C-=2*Math.PI),1===r&&C<0&&(C+=2*Math.PI),[p,m,o,s,S,C,l,r]},Konva.Factory.addGetterSetter(Konva.Path,"data"),Konva.Collection.mapMethods(Konva.Path)}(),function(){"use strict";function t(t){t.fillText(this.partialText,0,0)}function e(t){t.strokeText(this.partialText,0,0)}Konva.TextPath=function(t){this.___init(t)},Konva.TextPath.prototype={___init:function(i){var n=this;this.dummyCanvas=Konva.Util.createCanvasElement(),this.dataArray=[],Konva.Shape.call(this,i),this._fillFunc=t,this._strokeFunc=e,this._fillFuncHit=t,this._strokeFuncHit=e,this.className="TextPath",this.dataArray=Konva.Path.parsePathData(this.attrs.data),this.on("dataChange.konva",function(){n.dataArray=Konva.Path.parsePathData(this.attrs.data),n._setTextData()}),this.on("textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva",n._setTextData),i&&i.getKerning&&(Konva.Util.warn('getKerning TextPath API is deprecated. Please use "kerningFunc" instead.'),this.setKerningFunc(i.getKerning)),n._setTextData(),this.sceneFunc(this._sceneFunc),this.hitFunc(this._hitFunc)},_sceneFunc:function(t){t.setAttr("font",this._getContextFont()),t.setAttr("textBaseline",this.getTextBaseline()),t.setAttr("textAlign","left"),t.save();var e=this.textDecoration(),i=this.fill(),n=this.fontSize(),a=this.glyphInfo;"underline"===e&&t.beginPath();for(var r=0;r<a.length;r++){t.save();var o=a[r].p0;t.translate(o.x,o.y),t.rotate(a[r].rotation),this.partialText=a[r].text,t.fillStrokeShape(this),"underline"===e&&(0===r&&t.moveTo(0,n/2+1),t.lineTo(n,n/2+1)),t.restore()}"underline"===e&&(t.strokeStyle=i,t.lineWidth=n/20,t.stroke()),t.restore()},_hitFunc:function(t){t.beginPath();var e=this.glyphInfo;if(e.length>=1){var i=e[0].p0;t.moveTo(i.x,i.y)}for(var n=0;n<e.length;n++){var a=e[n].p1;t.lineTo(a.x,a.y)}t.setAttr("lineWidth",this.getFontSize()),t.setAttr("strokeStyle",this.colorKey),t.stroke()},getTextWidth:function(){return this.textWidth},getTextHeight:function(){return this.textHeight},setText:function(t){Konva.Text.prototype.setText.call(this,t)},_getTextSize:function(t){var e=this.dummyCanvas.getContext("2d");e.save(),e.font=this._getContextFont();var i=e.measureText(t);return e.restore(),{width:i.width,height:parseInt(this.attrs.fontSize,10)}},_setTextData:function(){var t=this,e=this._getTextSize(this.attrs.text),i=this.getLetterSpacing(),n=this.align(),a=this.getKerningFunc();this.textWidth=e.width,this.textHeight=e.height;var r=Math.max(this.textWidth+((this.attrs.text||"").length-1)*i,0);this.glyphInfo=[];for(var o=0,s=0;s<t.dataArray.length;s++)t.dataArray[s].pathLength>0&&(o+=t.dataArray[s].pathLength);var h=0;"center"===n&&(h=Math.max(0,o/2-r/2)),"right"===n&&(h=Math.max(0,o-r));for(var l,c,d,u=this.getText().split(""),g=this.getText().split(" ").length-1,f=-1,v=0,p=function(){v=0;for(var e=t.dataArray,i=f+1;i<e.length;i++){if(e[i].pathLength>0)return f=i,e[i];"M"===e[i].command&&(l={x:e[i].points[0],y:e[i].points[1]})}return{}},m=function(e){var a=t._getTextSize(e).width+i;" "===e&&"justify"===n&&(a+=(o-r)/g);var s=0,h=0;for(c=void 0;Math.abs(a-s)/a>.01&&h<25;){h++;for(var u=s;void 0===d;)(d=p())&&u+d.pathLength<a&&(u+=d.pathLength,d=void 0);if(d==={}||void 0===l)return;var f=!1;switch(d.command){case"L":Konva.Path.getLineLength(l.x,l.y,d.points[0],d.points[1])>a?c=Konva.Path.getPointOnLine(a,l.x,l.y,d.points[0],d.points[1],l.x,l.y):d=void 0;break;case"A":var m=d.points[4],_=d.points[5],y=d.points[4]+_;0===v?v=m+1e-8:a>s?v+=Math.PI/180*_/Math.abs(_):v-=Math.PI/360*_/Math.abs(_),(_<0&&v<y||_>=0&&v>y)&&(v=y,f=!0),c=Konva.Path.getPointOnEllipticalArc(d.points[0],d.points[1],d.points[2],d.points[3],v,d.points[6]);break;case"C":0===v?v=a>d.pathLength?1e-8:a/d.pathLength:a>s?v+=(a-s)/d.pathLength:v-=(s-a)/d.pathLength,v>1&&(v=1,f=!0),c=Konva.Path.getPointOnCubicBezier(v,d.start.x,d.start.y,d.points[0],d.points[1],d.points[2],d.points[3],d.points[4],d.points[5]);break;case"Q":0===v?v=a/d.pathLength:a>s?v+=(a-s)/d.pathLength:v-=(s-a)/d.pathLength,v>1&&(v=1,f=!0),c=Konva.Path.getPointOnQuadraticBezier(v,d.start.x,d.start.y,d.points[0],d.points[1],d.points[2],d.points[3])}void 0!==c&&(s=Konva.Path.getLineLength(l.x,l.y,c.x,c.y)),f&&(f=!1,d=void 0)}},_=t._getTextSize("C").width+i,y=0;y<h/_&&(m("C"),void 0!==l&&void 0!==c);y++)l=c;for(var K=0;K<u.length&&(m(u[K]),void 0!==l&&void 0!==c);K++){var S=Konva.Path.getLineLength(l.x,l.y,c.x,c.y),b=0;if(a)try{b=a(u[K-1],u[K])*this.fontSize()}catch(t){b=0}l.x+=b,c.x+=b,this.textWidth+=b;var x=Konva.Path.getPointOnLine(b+S/2,l.x,l.y,c.x,c.y),C=Math.atan2(c.y-l.y,c.x-l.x);this.glyphInfo.push({transposeX:x.x,transposeY:x.y,text:u[K],rotation:C,p0:l,p1:c}),l=c}},getSelfRect:function(){var t=[];this.glyphInfo.forEach(function(e){t.push(e.p0.x),t.push(e.p0.y),t.push(e.p1.x),t.push(e.p1.y)});for(var e,i,n=t[0],a=t[0],r=t[0],o=t[0],s=0;s<t.length/2;s++)e=t[2*s],i=t[2*s+1],n=Math.min(n,e),a=Math.max(a,e),r=Math.min(r,i),o=Math.max(o,i);var h=this.fontSize();return{x:Math.round(n)-h/2,y:Math.round(r)-h/2,width:Math.round(a-n)+h,height:Math.round(o-r)+h}}},Konva.TextPath.prototype._getContextFont=Konva.Text.prototype._getContextFont,Konva.Util.extend(Konva.TextPath,Konva.Shape),Konva.Factory.addGetterSetter(Konva.TextPath,"data"),Konva.Factory.addGetterSetter(Konva.TextPath,"fontFamily","Arial"),Konva.Factory.addGetterSetter(Konva.TextPath,"fontSize",12,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.TextPath,"fontStyle","normal"),Konva.Factory.addGetterSetter(Konva.TextPath,"align","left"),Konva.Factory.addGetterSetter(Konva.TextPath,"letterSpacing",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.TextPath,"textBaseline","middle"),Konva.Factory.addGetterSetter(Konva.TextPath,"fontVariant","normal"),Konva.Factory.addGetter(Konva.TextPath,"text",""),Konva.Factory.addGetterSetter(Konva.TextPath,"textDecoration",null),Konva.Factory.addGetterSetter(Konva.TextPath,"kerningFunc",null),Konva.Collection.mapMethods(Konva.TextPath)}(),function(){"use strict";Konva.RegularPolygon=function(t){this.___init(t)},Konva.RegularPolygon.prototype={_centroid:!0,___init:function(t){Konva.Shape.call(this,t),this.className="RegularPolygon",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e,i,n,a=this.attrs.sides,r=this.attrs.radius;for(t.beginPath(),t.moveTo(0,0-r),e=1;e<a;e++)i=r*Math.sin(2*e*Math.PI/a),n=-1*r*Math.cos(2*e*Math.PI/a),t.lineTo(i,n);t.closePath(),t.fillStrokeShape(this)},getWidth:function(){return 2*this.getRadius()},getHeight:function(){return 2*this.getRadius()},setWidth:function(t){Konva.Node.prototype.setWidth.call(this,t),this.radius()!==t/2&&this.setRadius(t/2)},setHeight:function(t){Konva.Node.prototype.setHeight.call(this,t),this.radius()!==t/2&&this.setRadius(t/2)}},Konva.Util.extend(Konva.RegularPolygon,Konva.Shape),Konva.Factory.addGetterSetter(Konva.RegularPolygon,"radius",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.RegularPolygon,"sides",0,Konva.Validators.getNumberValidator()),Konva.Collection.mapMethods(Konva.RegularPolygon)}(),function(){"use strict";Konva.Star=function(t){this.___init(t)},Konva.Star.prototype={_centroid:!0,___init:function(t){Konva.Shape.call(this,t),this.className="Star",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e=this.innerRadius(),i=this.outerRadius(),n=this.numPoints();t.beginPath(),t.moveTo(0,0-i);for(var a=1;a<2*n;a++){var r=a%2==0?i:e,o=r*Math.sin(a*Math.PI/n),s=-1*r*Math.cos(a*Math.PI/n);t.lineTo(o,s)}t.closePath(),t.fillStrokeShape(this)},getWidth:function(){return 2*this.getOuterRadius()},getHeight:function(){return 2*this.getOuterRadius()},setWidth:function(t){Konva.Node.prototype.setWidth.call(this,t),this.outerRadius()!==t/2&&this.setOuterRadius(t/2)},setHeight:function(t){Konva.Node.prototype.setHeight.call(this,t),this.outerRadius()!==t/2&&this.setOuterRadius(t/2)}},Konva.Util.extend(Konva.Star,Konva.Shape),Konva.Factory.addGetterSetter(Konva.Star,"numPoints",5,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Star,"innerRadius",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Star,"outerRadius",0,Konva.Validators.getNumberValidator()),Konva.Collection.mapMethods(Konva.Star)}(),function(){"use strict";var t=["fontFamily","fontSize","fontStyle","padding","lineHeight","text","width"],e=t.length;Konva.Label=function(t){this.____init(t)},Konva.Label.prototype={____init:function(t){var e=this;Konva.Group.call(this,t),this.className="Label",this.on("add.konva",function(t){e._addListeners(t.child),e._sync()})},getText:function(){return this.find("Text")[0]},getTag:function(){return this.find("Tag")[0]},_addListeners:function(i){var n,a=this,r=function(){a._sync()};for(n=0;n<e;n++)i.on(t[n]+"Change.konva",r)},getWidth:function(){return this.getText().getWidth()},getHeight:function(){return this.getText().getHeight()},_sync:function(){var t,e,i,n,a,r,o,s=this.getText(),h=this.getTag();if(s&&h){switch(t=s.getWidth(),e=s.getHeight(),i=h.getPointerDirection(),n=h.getPointerWidth(),o=h.getPointerHeight(),a=0,r=0,i){case"up":a=t/2,r=-1*o;break;case"right":a=t+n,r=e/2;break;case"down":a=t/2,r=e+o;break;case"left":a=-1*n,r=e/2}h.setAttrs({x:-1*a,y:-1*r,width:t,height:e}),s.setAttrs({x:-1*a,y:-1*r})}}},Konva.Util.extend(Konva.Label,Konva.Group),Konva.Collection.mapMethods(Konva.Label),Konva.Tag=function(t){this.___init(t)},Konva.Tag.prototype={___init:function(t){Konva.Shape.call(this,t),this.className="Tag",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var e=this.getWidth(),i=this.getHeight(),n=this.getPointerDirection(),a=this.getPointerWidth(),r=this.getPointerHeight(),o=Math.min(this.getCornerRadius(),e/2,i/2);t.beginPath(),o?t.moveTo(o,0):t.moveTo(0,0),"up"===n&&(t.lineTo((e-a)/2,0),t.lineTo(e/2,-1*r),t.lineTo((e+a)/2,0)),o?(t.lineTo(e-o,0),t.arc(e-o,o,o,3*Math.PI/2,0,!1)):t.lineTo(e,0),"right"===n&&(t.lineTo(e,(i-r)/2),t.lineTo(e+a,i/2),t.lineTo(e,(i+r)/2)),o?(t.lineTo(e,i-o),t.arc(e-o,i-o,o,0,Math.PI/2,!1)):t.lineTo(e,i),"down"===n&&(t.lineTo((e+a)/2,i),t.lineTo(e/2,i+r),t.lineTo((e-a)/2,i)),o?(t.lineTo(o,i),t.arc(o,i-o,o,Math.PI/2,Math.PI,!1)):t.lineTo(0,i),"left"===n&&(t.lineTo(0,(i+r)/2),t.lineTo(-1*a,i/2),t.lineTo(0,(i-r)/2)),o&&(t.lineTo(0,o),t.arc(o,o,o,Math.PI,3*Math.PI/2,!1)),t.closePath(),t.fillStrokeShape(this)},getSelfRect:function(){var t=0,e=0,i=this.getPointerWidth(),n=this.getPointerHeight(),a=this.pointerDirection(),r=this.getWidth(),o=this.getHeight();return"up"===a?(e-=n,o+=n):"down"===a?o+=n:"left"===a?(t-=1.5*i,r+=i):"right"===a&&(r+=1.5*i),{x:t,y:e,width:r,height:o}}},Konva.Util.extend(Konva.Tag,Konva.Shape),Konva.Factory.addGetterSetter(Konva.Tag,"pointerDirection","none"),Konva.Factory.addGetterSetter(Konva.Tag,"pointerWidth",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Tag,"pointerHeight",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Tag,"cornerRadius",0,Konva.Validators.getNumberValidator()),Konva.Collection.mapMethods(Konva.Tag)}(),function(t){"use strict";t.Arrow=function(t){this.____init(t)},t.Arrow.prototype={____init:function(e){t.Line.call(this,e),this.className="Arrow"},_sceneFunc:function(e){t.Line.prototype._sceneFunc.apply(this,arguments);var i=2*Math.PI,n=this.points(),a=n,r=0!==this.getTension()&&n.length>4;r&&(a=this.getTensionPoints());var o,s,h=n.length;r?(o=n[h-2]-a[h-2],s=n[h-1]-a[h-1]):(o=n[h-2]-n[h-4],s=n[h-1]-n[h-3]);var l=(Math.atan2(s,o)+i)%i,c=this.pointerLength(),d=this.pointerWidth();e.save(),e.beginPath(),e.translate(n[h-2],n[h-1]),e.rotate(l),e.moveTo(0,0),e.lineTo(-c,d/2),e.lineTo(-c,-d/2),e.closePath(),e.restore(),this.pointerAtBeginning()&&(e.save(),e.translate(n[0],n[1]),r?(o=a[0]-n[0],s=a[1]-n[1]):(o=n[2]-n[0],s=n[3]-n[1]),e.rotate((Math.atan2(-s,-o)+i)%i),e.moveTo(0,0),e.lineTo(-c,d/2),e.lineTo(-c,-d/2),e.closePath(),e.restore());var u=this.dashEnabled();u&&(this.attrs.dashEnabled=!1,e.setLineDash([])),e.fillStrokeShape(this),u&&(this.attrs.dashEnabled=!0)}},t.Util.extend(t.Arrow,t.Line),t.Factory.addGetterSetter(t.Arrow,"pointerLength",10,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Arrow,"pointerWidth",10,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Arrow,"pointerAtBeginning",!1),t.Collection.mapMethods(t.Arrow)}(Konva),function(t){"use strict";var e=["resizeEnabledChange","rotateAnchorOffsetChange","rotateEnabledChange","enabledAnchorsChange","anchorSizeChange","borderEnabledChange","borderStrokeChange","borderStrokeWidthChange","borderDashChange","anchorStrokeChange","anchorStrokeWidthChange","anchorFillChange","anchorCornerRadiusChange","ignoreStrokeChange"].join(" "),i=["xChange.resizer","yChange.resizer","widthChange.resizer","heightChange.resizer","scaleXChange.resizer","scaleYChange.resizer","skewXChange.resizer","skewYChange.resizer","rotationChange.resizer","offsetXChange.resizer","offsetYChange.resizer","transformsEnabledChange.resizer"].join(" "),n=["widthChange.resizer","heightChange.resizer","scaleXChange.resizer","scaleYChange.resizer","skewXChange.resizer","skewYChange.resizer","rotationChange.resizer","offsetXChange.resizer","offsetYChange.resizer"].join(" "),a={"top-left":-45,"top-center":0,"top-right":45,"middle-right":-90,"middle-left":90,"bottom-left":-135,"bottom-center":180,"bottom-right":135};t.Transformer=function(t){this.____init(t)};var r=["top-left","top-center","top-right","middle-right","middle-left","bottom-left","bottom-center","bottom-right"];t.Transformer.prototype={_centroid:!1,____init:function(i){t.Group.call(this,i),this.className="Transformer",this._createElements(),this._handleMouseMove=this._handleMouseMove.bind(this),this._handleMouseUp=this._handleMouseUp.bind(this),this.update=this.update.bind(this),this.on(e,this.update),this.getNode()&&this.update()},attachTo:function(t){this.setNode(t)},setNode:function(t){return this._node&&this.detach(),this._node=t,this._resetTransformCache(),t.on(i,this._resetTransformCache.bind(this)),t.on(n,function(){this._transforming||this.update()}.bind(this)),!!this.findOne(".top-left")&&this.update(),this},getNode:function(){return this._node},detach:function(){this.getNode()&&(this.getNode().off(".resizer"),this._node=void 0),this._resetTransformCache()},_resetTransformCache:function(){this._clearCache("nodeRect"),this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform")},_getNodeRect:function(){return this._getCache("nodeRect",this.__getNodeRect)},__getNodeRect:function(){var e=this.getNode();if(!e)return{x:-Number.MAX_SAFE_INTEGER,y:-Number.MAX_SAFE_INTEGER,width:0,height:0,rotation:0};var i=e.getClientRect({skipTransform:!0,skipShadow:!0,skipStroke:this.ignoreStroke()}),n=t.getAngle(e.rotation()),a=i.x*e.scaleX()-e.offsetX()*e.scaleX(),r=i.y*e.scaleY()-e.offsetY()*e.scaleY();return{x:e.x()+a*Math.cos(n)+r*Math.sin(-n),y:e.y()+r*Math.cos(n)+a*Math.sin(n),width:i.width*e.scaleX(),height:i.height*e.scaleY(),rotation:e.rotation()}},getX:function(){return this._getNodeRect().x},getY:function(){return this._getNodeRect().y},getRotation:function(){return this._getNodeRect().rotation},getWidth:function(){return this._getNodeRect().width},getHeight:function(){return this._getNodeRect().height},_createElements:function(){this._createBack(),r.forEach(function(t){this._createAnchor(t)}.bind(this)),this._createAnchor("rotater")},_createAnchor:function(e){var i=new t.Rect({stroke:"rgb(0, 161, 255)",fill:"white",strokeWidth:1,name:e+" _anchor",dragDistance:0,draggable:!0}),n=this;i.on("mousedown touchstart",function(t){n._handleMouseDown(t)}),i.on("dragstart",function(t){t.cancelBubble=!0}),i.on("dragmove",function(t){t.cancelBubble=!0}),i.on("dragend",function(t){t.cancelBubble=!0}),i.on("mouseenter",function(){var n=this.getParent(),r=t.getAngle(n.rotation()),o=n.getNode().getAbsoluteScale(),s=o.y*o.x<0,h=function(e,i,n){if("rotater"===e)return"crosshair";i+=t.Util._degToRad(a[e]||0),n&&(i*=-1);var r=(t.Util._radToDeg(i)%360+360)%360;return t.Util._inRange(r,337.5,360)||t.Util._inRange(r,0,22.5)?"ns-resize":t.Util._inRange(r,22.5,67.5)?"nesw-resize":t.Util._inRange(r,67.5,112.5)?"ew-resize":t.Util._inRange(r,112.5,157.5)?"nwse-resize":t.Util._inRange(r,157.5,202.5)?"ns-resize":t.Util._inRange(r,202.5,247.5)?"nesw-resize":t.Util._inRange(r,247.5,292.5)?"ew-resize":t.Util._inRange(r,292.5,337.5)?"nwse-resize":(t.Util.error("Transformer has unknown angle for cursor detection: "+r),"pointer")}(e,r,s);i.getStage().content.style.cursor=h,n._cursorChange=!0}),i.on("mouseout",function(){i.getStage()&&this.getParent()&&(i.getStage().content.style.cursor="",this.getParent()._cursorChange=!1)}),this.add(i)},_createBack:function(){var e=new t.Shape({name:"back",width:0,height:0,listening:!1,sceneFunc:function(e){var i=this.getParent(),n=i.getPadding();e.beginPath(),e.rect(-n,-n,this.width()+2*n,this.height()+2*n),e.moveTo(this.width()/2,-n),i.rotateEnabled()&&e.lineTo(this.width()/2,-i.rotateAnchorOffset()*t.Util._sign(this.height())),e.fillStrokeShape(this)}});this.add(e)},_handleMouseDown:function(t){this.movingResizer=t.target.name().split(" ")[0];var e=this._getNodeRect(),i=e.width,n=e.height,a=Math.sqrt(Math.pow(i,2)+Math.pow(n,2));this.sin=n/a,this.cos=i/a,window.addEventListener("mousemove",this._handleMouseMove),window.addEventListener("touchmove",this._handleMouseMove),window.addEventListener("mouseup",this._handleMouseUp,!0),window.addEventListener("touchend",this._handleMouseUp,!0),this._transforming=!0,this._fire("transformstart",{evt:t}),this.getNode()._fire("transformstart",{evt:t})},_handleMouseMove:function(e){var i,n,a,r=this.findOne("."+this.movingResizer),o=r.getStage().getContent().getBoundingClientRect(),s=o.left,h=o.top,l={x:(void 0!==e.clientX?e.clientX:e.touches[0].clientX)-s,y:(void 0!==e.clientX?e.clientY:e.touches[0].clientY)-h};r.setAbsolutePosition(l);var c=this.keepRatio()||e.shiftKey;if("top-left"===this.movingResizer)c&&(i=(a=Math.sqrt(Math.pow(this.findOne(".bottom-right").x()-r.x(),2)+Math.pow(this.findOne(".bottom-right").y()-r.y(),2)))*this.cos,n=a*this.sin,this.findOne(".top-left").x(this.findOne(".bottom-right").x()-i),this.findOne(".top-left").y(this.findOne(".bottom-right").y()-n));else if("top-center"===this.movingResizer)this.findOne(".top-left").y(r.y());else if("top-right"===this.movingResizer){c&&(i=(a=Math.sqrt(Math.pow(this.findOne(".bottom-left").x()-r.x(),2)+Math.pow(this.findOne(".bottom-left").y()-r.y(),2)))*this.cos,n=a*this.sin,this.findOne(".top-right").x(i),this.findOne(".top-right").y(this.findOne(".bottom-left").y()-n));var d=r.position();this.findOne(".top-left").y(d.y),this.findOne(".bottom-right").x(d.x)}else if("middle-left"===this.movingResizer)this.findOne(".top-left").x(r.x());else if("middle-right"===this.movingResizer)this.findOne(".bottom-right").x(r.x());else if("bottom-left"===this.movingResizer)c&&(i=(a=Math.sqrt(Math.pow(this.findOne(".top-right").x()-r.x(),2)+Math.pow(this.findOne(".top-right").y()-r.y(),2)))*this.cos,n=a*this.sin,this.findOne(".bottom-left").x(this.findOne(".top-right").x()-i),this.findOne(".bottom-left").y(n)),d=r.position(),this.findOne(".top-left").x(d.x),this.findOne(".bottom-right").y(d.y);else if("bottom-center"===this.movingResizer)this.findOne(".bottom-right").y(r.y());else if("bottom-right"===this.movingResizer)c&&(i=(a=Math.sqrt(Math.pow(this.findOne(".bottom-right").x(),2)+Math.pow(this.findOne(".bottom-right").y(),2)))*this.cos,n=a*this.sin,this.findOne(".bottom-right").x(i),this.findOne(".bottom-right").y(n));else if("rotater"===this.movingResizer){var u=this.getPadding(),g=this._getNodeRect();i=r.x()-g.width/2,n=-r.y()+g.height/2;var f=Math.atan2(-n,i)+Math.PI/2;g.height<0&&(f-=Math.PI);for(var v=t.getAngle(this.rotation()),p=t.Util._radToDeg(v)+t.Util._radToDeg(f),m=t.getAngle(this.getNode().rotation()),_=t.Util._degToRad(p),y=this.rotationSnaps(),K=0;K<y.length;K++){var S=t.getAngle(y[K]);Math.abs(S-t.Util._degToRad(p))%(2*Math.PI)<.1&&(p=t.Util._radToDeg(S),_=t.Util._degToRad(p))}var b=u,x=u;this._fitNodeInto({rotation:t.angleDeg?p:t.Util._degToRad(p),x:g.x+(g.width/2+u)*(Math.cos(m)-Math.cos(_))+(g.height/2+u)*(Math.sin(-m)-Math.sin(-_))-(b*Math.cos(v)+x*Math.sin(-v)),y:g.y+(g.height/2+u)*(Math.cos(m)-Math.cos(_))+(g.width/2+u)*(Math.sin(m)-Math.sin(_))-(x*Math.cos(v)+b*Math.sin(v)),width:g.width+2*u,height:g.height+2*u},e)}else console.error(new Error("Wrong position argument of selection resizer: ",this.movingResizer));if("rotater"!==this.movingResizer){var C=this.findOne(".top-left").getAbsolutePosition(this.getParent());if(this.getCenteredScaling()||e.altKey){var w=this.findOne(".top-left"),F=this.findOne(".bottom-right"),T=w.x(),P=w.y(),A=this.getWidth()-F.x(),k=this.getHeight()-F.y();F.move({x:-T,y:-P}),w.move({x:A,y:k}),C=w.getAbsolutePosition(this.getParent())}i=C.x,n=C.y;var M=this.findOne(".bottom-right").x()-this.findOne(".top-left").x(),G=this.findOne(".bottom-right").y()-this.findOne(".top-left").y();this._fitNodeInto({x:i+this.offsetX(),y:n+this.offsetY(),width:M,height:G},e)}},_handleMouseUp:function(t){this._removeEvents(t)},_removeEvents:function(t){if(this._transforming){this._transforming=!1,window.removeEventListener("mousemove",this._handleMouseMove),window.removeEventListener("touchmove",this._handleMouseMove),window.removeEventListener("mouseup",this._handleMouseUp,!0),window.removeEventListener("touchend",this._handleMouseUp,!0),this._fire("transformend",{evt:t});var e=this.getNode();e&&e.fire("transformend",{evt:t})}},_fitNodeInto:function(e,i){var n=this.getBoundBoxFunc();if(n){var a=this._getNodeRect();e=n.call(this,a,e)}this._settings=!0;var r=this.getNode();void 0!==e.rotation&&this.getNode().rotation(e.rotation);var o=r.getClientRect({skipTransform:!0,skipShadow:!0,skipStroke:this.ignoreStroke()}),s=this.getPadding(),h=(e.width-2*s)/o.width,l=(e.height-2*s)/o.height,c=t.getAngle(r.getRotation()),d=o.x*h-s-r.offsetX()*h,u=o.y*l-s-r.offsetY()*l;this.getNode().setAttrs({scaleX:h,scaleY:l,x:e.x-(d*Math.cos(c)+u*Math.sin(-c)),y:e.y-(u*Math.cos(c)+d*Math.sin(c))}),this._settings=!1,this._fire("transform",{evt:i}),this.getNode()._fire("transform",{evt:i}),this.update(),this.getLayer().batchDraw()},forceUpdate:function(){this._resetTransformCache(),this.update()},update:function(){var e=this._getNodeRect(),i=this.getNode(),n={x:1,y:1};i&&i.getParent()&&(n=i.getParent().getAbsoluteScale());var a={x:1/n.x,y:1/n.y},r=e.width,o=e.height,s=this.enabledAnchors(),h=this.resizeEnabled(),l=this.getPadding(),c=this.getAnchorSize();this.find("._anchor").setAttrs({width:c,height:c,offsetX:c/2,offsetY:c/2,stroke:this.getAnchorStroke(),strokeWidth:this.getAnchorStrokeWidth(),fill:this.getAnchorFill(),cornerRadius:this.getAnchorCornerRadius()}),this.findOne(".top-left").setAttrs({x:-l,y:-l,scale:a,visible:h&&s.indexOf("top-left")>=0}),this.findOne(".top-center").setAttrs({x:r/2,y:-l,scale:a,visible:h&&s.indexOf("top-center")>=0}),this.findOne(".top-right").setAttrs({x:r+l,y:-l,scale:a,visible:h&&s.indexOf("top-right")>=0}),this.findOne(".middle-left").setAttrs({x:-l,y:o/2,scale:a,visible:h&&s.indexOf("middle-left")>=0}),this.findOne(".middle-right").setAttrs({x:r+l,y:o/2,scale:a,visible:h&&s.indexOf("middle-right")>=0}),this.findOne(".bottom-left").setAttrs({x:-l,y:o+l,scale:a,visible:h&&s.indexOf("bottom-left")>=0}),this.findOne(".bottom-center").setAttrs({x:r/2,y:o+l,scale:a,visible:h&&s.indexOf("bottom-center")>=0}),this.findOne(".bottom-right").setAttrs({x:r+l,y:o+l,scale:a,visible:h&&s.indexOf("bottom-right")>=0});var d=-this.rotateAnchorOffset()*Math.abs(a.y);this.findOne(".rotater").setAttrs({x:r/2,y:d*t.Util._sign(o),scale:a,visible:this.rotateEnabled()}),this.findOne(".back").setAttrs({width:r*n.x,height:o*n.y,scale:a,visible:this.borderEnabled(),stroke:this.getBorderStroke(),strokeWidth:this.getBorderStrokeWidth(),dash:this.getBorderDash()})},isTransforming:function(){return this._transforming},stopTransform:function(){if(this._transforming){this._removeEvents();var t=this.findOne("."+this.movingResizer);t&&t.stopDrag()}},destroy:function(){this.getStage()&&this._cursorChange&&(this.getStage().content.style.cursor=""),t.Group.prototype.destroy.call(this),this.detach(),this._removeEvents()},toObject:function(){return t.Node.prototype.toObject.call(this)}},t.Util.extend(t.Transformer,t.Group),t.Factory.addGetterSetter(t.Transformer,"enabledAnchors",r,function(e){return e instanceof Array||t.Util.warn("enabledAnchors value should be an array"),e instanceof Array&&e.forEach(function(e){-1===r.indexOf(e)&&t.Util.warn("Unknown anchor name: "+e+". Available names are: "+r.join(", "))}),e||[]}),t.Factory.addGetterSetter(t.Transformer,"resizeEnabled",!0),t.Factory.addGetterSetter(t.Transformer,"anchorSize",10,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Transformer,"rotateEnabled",!0),t.Factory.addGetterSetter(t.Transformer,"rotationSnaps",[]),t.Factory.addGetterSetter(t.Transformer,"rotateAnchorOffset",50,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Transformer,"borderEnabled",!0),t.Factory.addGetterSetter(t.Transformer,"anchorStroke","rgb(0, 161, 255)"),t.Factory.addGetterSetter(t.Transformer,"anchorStrokeWidth",1,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Transformer,"anchorFill","white"),t.Factory.addGetterSetter(t.Transformer,"anchorCornerRadius",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Transformer,"borderStroke","rgb(0, 161, 255)"),t.Factory.addGetterSetter(t.Transformer,"borderStrokeWidth",1,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Transformer,"borderDash"),t.Factory.addGetterSetter(t.Transformer,"keepRatio",!0),t.Factory.addGetterSetter(t.Transformer,"centeredScaling",!1),t.Factory.addGetterSetter(t.Transformer,"ignoreStroke",!1),t.Factory.addGetterSetter(t.Transformer,"padding",0,t.Validators.getNumberValidator()),t.Factory.addOverloadedGetterSetter(t.Transformer,"node"),t.Factory.addGetterSetter(t.Transformer,"boundBoxFunc"),t.Factory.backCompat(t.Transformer,{lineEnabled:"borderEnabled",rotateHandlerOffset:"rotateAnchorOffset",enabledHandlers:"enabledAnchors"}),t.Collection.mapMethods(t.Transformer)}(Konva);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],38:[function(require,module,exports){
!function(e,t,n){if(e){for(var r,i={8:"backspace",9:"tab",13:"enter",16:"shift",17:"ctrl",18:"alt",20:"capslock",27:"esc",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down",45:"ins",46:"del",91:"meta",93:"meta",224:"meta"},o={106:"*",107:"+",109:"-",110:".",111:"/",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'"},a={"~":"`","!":"1","@":"2","#":"3",$:"4","%":"5","^":"6","&":"7","*":"8","(":"9",")":"0",_:"-","+":"=",":":";",'"':"'","<":",",">":".","?":"/","|":"\\"},c={option:"alt",command:"meta",return:"enter",escape:"esc",plus:"+",mod:/Mac|iPod|iPhone|iPad/.test(navigator.platform)?"meta":"ctrl"},s=1;s<20;++s)i[111+s]="f"+s;for(s=0;s<=9;++s)i[s+96]=s.toString();d.prototype.bind=function(e,t,n){return e=e instanceof Array?e:[e],this._bindMultiple.call(this,e,t,n),this},d.prototype.unbind=function(e,t){return this.bind.call(this,e,function(){},t)},d.prototype.trigger=function(e,t){return this._directMap[e+":"+t]&&this._directMap[e+":"+t]({},e),this},d.prototype.reset=function(){return this._callbacks={},this._directMap={},this},d.prototype.stopCallback=function(e,n){return!((" "+n.className+" ").indexOf(" mousetrap ")>-1)&&(!function e(n,r){return null!==n&&n!==t&&(n===r||e(n.parentNode,r))}(n,this.target)&&("INPUT"==n.tagName||"SELECT"==n.tagName||"TEXTAREA"==n.tagName||n.isContentEditable))},d.prototype.handleKey=function(){return this._handleKey.apply(this,arguments)},d.addKeycodes=function(e){for(var t in e)e.hasOwnProperty(t)&&(i[t]=e[t]);r=null},d.init=function(){var e=d(t);for(var n in e)"_"!==n.charAt(0)&&(d[n]=function(t){return function(){return e[t].apply(e,arguments)}}(n))},d.init(),e.Mousetrap=d,"undefined"!=typeof module&&module.exports&&(module.exports=d),"function"==typeof define&&define.amd&&define(function(){return d})}function l(e,t,n){e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)}function u(e){if("keypress"==e.type){var t=String.fromCharCode(e.which);return e.shiftKey||(t=t.toLowerCase()),t}return i[e.which]?i[e.which]:o[e.which]?o[e.which]:String.fromCharCode(e.which).toLowerCase()}function f(e){return"shift"==e||"ctrl"==e||"alt"==e||"meta"==e}function p(e,t,n){return n||(n=function(){if(!r)for(var e in r={},i)e>95&&e<112||i.hasOwnProperty(e)&&(r[i[e]]=e);return r}()[e]?"keydown":"keypress"),"keypress"==n&&t.length&&(n="keydown"),n}function h(e,t){var n,r,i,o=[];for(n=function(e){return"+"===e?["+"]:(e=e.replace(/\+{2}/g,"+plus")).split("+")}(e),i=0;i<n.length;++i)r=n[i],c[r]&&(r=c[r]),t&&"keypress"!=t&&a[r]&&(r=a[r],o.push("shift")),f(r)&&o.push(r);return{key:r,modifiers:o,action:t=p(r,o,t)}}function d(e){var n=this;if(e=e||t,!(n instanceof d))return new d(e);n.target=e,n._callbacks={},n._directMap={};var r,i={},o=!1,a=!1,c=!1;function s(e){e=e||{};var t,n=!1;for(t in i)e[t]?n=!0:i[t]=0;n||(c=!1)}function p(e,t,r,o,a,c){var s,l,u,p,h=[],d=r.type;if(!n._callbacks[e])return[];for("keyup"==d&&f(e)&&(t=[e]),s=0;s<n._callbacks[e].length;++s)if(l=n._callbacks[e][s],(o||!l.seq||i[l.seq]==l.level)&&d==l.action&&("keypress"==d&&!r.metaKey&&!r.ctrlKey||(u=t,p=l.modifiers,u.sort().join(",")===p.sort().join(",")))){var y=!o&&l.combo==a,m=o&&l.seq==o&&l.level==c;(y||m)&&n._callbacks[e].splice(s,1),h.push(l)}return h}function y(e,t,r,i){n.stopCallback(t,t.target||t.srcElement,r,i)||!1===e(t,r)&&(function(e){e.preventDefault?e.preventDefault():e.returnValue=!1}(t),function(e){e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}(t))}function m(e){"number"!=typeof e.which&&(e.which=e.keyCode);var t=u(e);t&&("keyup"!=e.type||o!==t?n.handleKey(t,function(e){var t=[];return e.shiftKey&&t.push("shift"),e.altKey&&t.push("alt"),e.ctrlKey&&t.push("ctrl"),e.metaKey&&t.push("meta"),t}(e),e):o=!1)}function k(e,t,n,a){function l(t){return function(){c=t,++i[e],clearTimeout(r),r=setTimeout(s,1e3)}}function f(t){y(n,t,e),"keyup"!==a&&(o=u(t)),setTimeout(s,10)}i[e]=0;for(var p=0;p<t.length;++p){var d=p+1===t.length?f:l(a||h(t[p+1]).action);v(t[p],d,a,e,p)}}function v(e,t,r,i,o){n._directMap[e+":"+r]=t;var a,c=(e=e.replace(/\s+/g," ")).split(" ");c.length>1?k(e,c,t,r):(a=h(e,r),n._callbacks[a.key]=n._callbacks[a.key]||[],p(a.key,a.modifiers,{type:a.action},i,e,o),n._callbacks[a.key][i?"unshift":"push"]({callback:t,modifiers:a.modifiers,action:a.action,seq:i,level:o,combo:e}))}n._handleKey=function(e,t,n){var r,i=p(e,t,n),o={},l=0,u=!1;for(r=0;r<i.length;++r)i[r].seq&&(l=Math.max(l,i[r].level));for(r=0;r<i.length;++r)if(i[r].seq){if(i[r].level!=l)continue;u=!0,o[i[r].seq]=1,y(i[r].callback,n,i[r].combo,i[r].seq)}else u||y(i[r].callback,n,i[r].combo);var h="keypress"==n.type&&a;n.type!=c||f(e)||h||s(o),a=u&&"keydown"==n.type},n._bindMultiple=function(e,t,n){for(var r=0;r<e.length;++r)v(e[r],t,n)},l(e,"keypress",m),l(e,"keydown",m),l(e,"keyup",m)}}("undefined"!=typeof window?window:null,"undefined"!=typeof window?document:null);

},{}],39:[function(require,module,exports){
var cachedSetTimeout,cachedClearTimeout,process=module.exports={};function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}function runTimeout(e){if(cachedSetTimeout===setTimeout)return setTimeout(e,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(e,0);try{return cachedSetTimeout(e,0)}catch(t){try{return cachedSetTimeout.call(null,e,0)}catch(t){return cachedSetTimeout.call(this,e,0)}}}function runClearTimeout(e){if(cachedClearTimeout===clearTimeout)return clearTimeout(e);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(e);try{return cachedClearTimeout(e)}catch(t){try{return cachedClearTimeout.call(null,e)}catch(t){return cachedClearTimeout.call(this,e)}}}!function(){try{cachedSetTimeout="function"==typeof setTimeout?setTimeout:defaultSetTimout}catch(e){cachedSetTimeout=defaultSetTimout}try{cachedClearTimeout="function"==typeof clearTimeout?clearTimeout:defaultClearTimeout}catch(e){cachedClearTimeout=defaultClearTimeout}}();var currentQueue,queue=[],draining=!1,queueIndex=-1;function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var e=runTimeout(cleanUpNextTick);draining=!0;for(var t=queue.length;t;){for(currentQueue=queue,queue=[];++queueIndex<t;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,t=queue.length}currentQueue=null,draining=!1,runClearTimeout(e)}}function Item(e,t){this.fun=e,this.array=t}function noop(){}process.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];queue.push(new Item(e,t)),1!==queue.length||draining||runTimeout(drainQueue)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.prependListener=noop,process.prependOnceListener=noop,process.listeners=function(e){return[]},process.binding=function(e){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(e){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};

},{}],40:[function(require,module,exports){
"use strict";let Sseq=require("./Sseq.js"),SseqClassjs=require("./SseqClass.js"),SseqClass=SseqClassjs.SseqClass,Node=SseqClassjs.Node,Util=require("./Util.js"),Shapes=require("../src/Shape.js"),ExportToTex=require("./ExportToTex"),infinity=Util.infinity;function ensureMath(e){return e.startsWith("\\(")||e.startsWith("$")?e:e?"$"+e+"$":""}class DisplaySseq{constructor(){this.classes=[],this.edges=[],this.min_page_idx=0,this.page_list=[0,infinity],this.initialxRange=[0,20],this.initialyRange=[0,20],this.xRange=[0,100],this.yRange=[0,100],this.offset_size=.3,this.default_node=DisplaySseq.default_node,this.class_scale=1,this.eventHandlers={},this.class_tooltip_fields=["extra_info"],this.page_change_handler=(()=>!0),this.serializeSseqFields=Sseq.serializeSseqFields,this.serializeClassFields=Sseq.serializeClassFields,this.serializeEdgeFields=Sseq.serializeEdgeFields,this.update_listeners=new Map}static newClass(){return{x:0,y:0,idx:0,x_offset:!1,y_offset:!1,name:"",extra_info:"",page_list:[infinity],node_list:[this.default_node.copy()],visible:!0,_drawOnPageQ:()=>!0}}static newEdge(){let e={color:"black"};return e.page=infinity,e.page_min=0,e._drawOnPageQ=(()=>!0),e.visible=!0,e}addEventHandler(e,s){this.eventHandlers[e]=s,window.display&&window.display._updateEventHandlers()}setPageChangeHandler(e){this.page_change_handler=e}pageChangeHandler(e){this.page_change_handler(e),this.real_sseq&&this.real_sseq.update()}getPageDescriptor(e){let s=2;return this.page_list.includes(1)&&(s=1),e===infinity?"Page ∞":0===e?`Page ${s} with all differentials`:1===e&&2===s?`Page ${s} with no differentials`:e.length?e[1]===infinity?`Page ${e[0]} with all differentials`:-1===e[1]?`Page ${e[0]} with no differentials`:e[0]===e[1]?`Page ${e[0]}`:`Pages ${e[0]} – ${e[1]}`.replace(infinity,"∞"):`Page ${e}`}update(){for(let e of this.update_listeners.values())e()}display(){if("undefined"!=typeof window)return window.display?(window.display.setSseq(this),display.update()):window.display=new Display(this),this;console.log("Can only display in browser.")}_registerUpdateListener(e,s){this.update_listeners.set(e,s)}_removeUpdateListener(e){this.update_listeners.delete(e)}_calculateDrawnElements(e,s,t,i,a){let l;Util.checkArgumentsDefined(DisplaySseq.prototype._calculateDrawnElements,arguments),Array.isArray(e)?(l=e,e=e[0]):l=[e,e],this.display_classes=this.classes.filter(l=>!!l&&(l.in_range=DisplaySseq._classInRangeQ(l,s,t,i,a),l.in_range&&DisplaySseq._drawClassOnPageQ(l,e))),this.display_edges=this.edges.filter(s=>s&&DisplaySseq._drawEdgeOnPageQ(s,l)&&DisplaySseq._drawClassOnPageQ(s.source,e)&&DisplaySseq._drawClassOnPageQ(s.target,e)&&(s.source.in_range||s.target.in_range));for(let e=0;e<this.display_edges.length;e++){let s=this.display_edges[e];s.source.in_range||this.display_classes.push(s.source),s.target.in_range||this.display_classes.push(s.target)}}static _classInRangeQ(e,s,t,i,a){return s<=e.x&&e.x<=t&&i<=e.y&&e.y<=a}static _drawClassOnPageQ(e,s){return e._drawOnPageQ?e._drawOnPageQ(s):SseqClass.prototype._drawOnPageQ.call(e,s)}static _drawEdgeOnPageQ(e,s){if(e._drawOnPageQ)return e._drawOnPageQ(s);switch(e.type){case"Differential":return Differential.prototype._drawOnPageQ.call(e,s);case"Extension":return Extension.prototype._drawOnPageQ.call(e,s);case"Structline":return Structline.prototype._drawOnPageQ.call(e,s);default:return Edge.prototype._drawOnPageQ.call(e,s)}}_getClassesToDisplay(){return this.display_classes}_getEdgesToDisplay(){return this.display_edges}_getXOffset(e,s){if(!1!==e.x_offset)return e.x_offset*this.offset_size;let t=this.num_classes_by_degree.get([e.x,e.y]),i=(e.idx-(t-1)/2)*this.offset_size;return isNaN(i)?(console.log("Invalid offset for class:",e),0):i}_getYOffset(e,s){if(!1!==e.y_offset)return e.y_offset*this.offset_size;let t=this.num_classes_by_degree.get([e.x,e.y]),i=-(e.idx-(t-1)/2)*this.offset_size;return isNaN(i)?(console.log("Invalid offset for class:",e),0):i}getClassNode(e,s){return e.node_list[SseqClass.prototype._getPageIndex.call(e,s)]}getClassTooltip(e,s){let t="";""!==e.name&&(t=`\\(${e.name}\\) &mdash; `),t+=`(${e.x}, ${e.y})`;let i="";for(let t of this.class_tooltip_fields){let a=e[t],l=DisplaySseq.toTooltipString(a,s);l&&(i+="\n"+l)}return t+=i=i.split("\n").map(e=>ensureMath(e)).join("\n")}static toTooltipString(e,s){if(!e)return!1;if(e.constructor===String)return e;if(e.constructor===Array)return e.map(e=>DisplaySseq.toTooltipString(e,s)).filter(e=>e).join("\n");if(e.constructor===Map){let t;for(let i of e.keys()){if(i>s)break;t=i}return DisplaySseq.toTooltipString(e.get(t))}return!1}static async loadFromResolutionJSON(e){let s=await fetch(e),t=await s.json(),i=new StringifyingMap,a=new Map,l=[],n=0;for(let e of t.classes){n++;let s=DisplaySseq.newClass();s.unique_id=n,s.x=e.degree[0],s.y=e.degree[1];let t=i.getOrElse([s.x,s.y],0);i.set([s.x,s.y],t+1),a.set(e.name,s),s.idx=t,l.push(s)}let r=[];for(let e of t.structlines){let s=DisplaySseq.newEdge();s.source=a.get(e.sourceName),s.target=a.get(e.targetName),e.type&&(s.mult=e.type),r.push(s)}let o=new DisplaySseq;return o.num_classes_by_degree=i,o.classes=l,o.edges=r,o}static fromJSONObject(e){if(!e)return;let s=Object.assign(new DisplaySseq,e);s.default_node=Object.assign(new Node,s.default_node),s.default_node.shape=Shapes[s.default_node.shape.name];let t=new StringifyingMap,i=new Map;for(let e=0;e<s.classes.length;e++){let a=s.classes[e];if(i.set(e,a),!a)continue;let l=t.getOrElse([a.x,a.y],0);t.set([a.x,a.y],l+1);for(let e=0;e<a.node_list.length;e++)a.node_list[e]=new Node(s.master_node_list[a.node_list[e]]),a.node_list[e].shape=Shapes[a.node_list[e].shape.name]}for(let e of s.edges)"Extension"===e.type&&(e._drawOnPageQ=void 0),e.source=i.get(e.source),e.target=i.get(e.target);return s.num_classes_by_degree=t,s}toJSON(){let e={};for(let e of["serializeSseqFields","serializeClassFields","serializeEdgeFields"])this[e]||(this[e]=Sseq[e].slice());for(let s of this.serializeSseqFields)e[s]=this[s];let s=new StringifyingMap(e=>JSON.stringify(e));e.master_node_list=[],e.classes=[],e.edges=[];for(let t of this.classes){if(t.invalid)continue;let i={};for(let e of this.serializeClassFields)i[e]=t[e];i.node_list=[];for(let a of t.node_list)s.has(a)||(s.set(a,e.master_node_list.length),e.master_node_list.push(a)),i.node_list.push(s.get(a));t.list_index=e.classes.length,e.classes.push(i)}for(let s of this.edges){if(s.invalid)continue;let t={};for(let e of this.serializeEdgeFields)t[e]=s[e];t.source=s.source.list_index,t.target=s.target.list_index,e.edges.push(t)}return e}exportToTex(e,s,t,i,a,l){ExportToTex.DownloadSpectralSequenceTex(e,this,s,t,i,a,l)}}DisplaySseq.default_node=new Node,DisplaySseq.default_node.fill=!0,DisplaySseq.default_node.stroke=!0,DisplaySseq.default_node.shape=Shapes.circle,DisplaySseq.default_node.size=6,exports.DisplaySseq=DisplaySseq;

},{"../src/Shape.js":45,"./ExportToTex":42,"./Sseq.js":46,"./SseqClass.js":47,"./Util.js":49}],41:[function(require,module,exports){
"use strict";let Util=require("./Util.js"),infinity=Util.infinity;class Edge{constructor(t,e,s){if(e.y>s.y){let t=e;e=s,s=t}this.sseq=t,this.source=e,this.target=s,this.source_name=this.source.last_page_name,this.target_name=this.target.last_page_name,this.page=infinity,this.page_min=0,this.color="#000",this.type=this.constructor.name,this.visible=!0,this.args=[]}getMemento(){return Util.copyFields({},this)}restoreFromMemento(t){if(!t.delete)return this.invalid&&this.sseq.reviveEdge(this),Util.copyFields(this,t),this.sseq.updateEdge(this),this;this.invalid||this.sseq.deleteEdge(this)}otherClass(t){return this.source===t?this.target:this.target===t?this.source:void console.log("Invalid class")}setMinPage(t){return this.page_min=t,this}setColor(t){return t?(this.color=t,this):this}setBend(t){return t?(this.bend=t,this):this}isDummy(){return!1}delete(){this.invalid=!0,this.display_edge.invalid=!0,this.source.edges=this.source.edges.filter(t=>!t.invalid),this.target.edges=this.target.edges.filter(t=>!t.invalid),this.source.update(),this.target.update()}revive(){this.invalid=!1,this.display_edge.invalid=!1,this.source.edges.push(this),this.target.edges.push(this),this.source.update(),this.target.update()}static getDummy(){if(Edge._dummy)return Edge._dummy;let t=Object.create(Edge);return Edge._dummy=t,t.isDummy=(()=>!0),Util.setPrivateMethodsToInvalidOperation(t),t.setMinPage=Util.getDummyConstantFunction(t),t.constructor=Edge.constructor,t.otherClass=Util.getDummyConstantFunction(SseqClass.getDummy()),t.leibniz=Util.getDummyConstantFunction(t),t.delete=(()=>!0),Util.checkAllCommandsDefined(t),t}leibniz(t){for(let e of t){let s=this.source.getProductIfPresent(e),i=this.target.getProductIfPresent(e);this.sseq["add"+this.constructor.name](s,i,...this.args).leibniz(t)}return this}_drawOnPageQ(t){return t[0]<=this.page&&this.page_min<=t[0]}}exports.Edge=Edge;class Structline extends Edge{setProduct(t){return this.mult=t,this}}exports.Structline=Structline;class Extension extends Edge{_drawOnPageQ(t){return t[0]===infinity}setProduct(t){return this.mult=t,this}}exports.Extension=Extension;class Differential extends Edge{constructor(t,e,s,i){super(t,e,s),this.page=i,this.color="#00F",this.args=[i]}static getDummy(){if(Differential._dummy)return Differential._dummy;let t=Object.create(Differential);Differential._dummy=t;let e=Edge.getDummy();Object.assign(t,e);let s=Util.getDummyConstantFunction(t);return Util.setRemainingMethods(t,()=>!0,()=>s),Util.setPrivateMethodsToInvalidOperation(t),t.toString=Util.getDummyConstantFunction(""),t}delete(){let t=[];if(1!==this.source.page_list.length&&this.source.page_list.indexOf(this.page)===this.source.page_list.length-2&&this.source.page_list[this.source.page_list.length-1]===infinity)t.push(()=>this.source.page_list.pop());else if(-1!==this.source.page_list.indexOf(this.page)&&this.source.page_list.indexOf(this.page)!==this.source.page_list.length-1)return void console.log("Cannot remove differential, source has done stuff since.");if(1!==this.target.page_list.length&&this.target.page_list.indexOf(this.page)===this.target.page_list.length-2&&this.target.page_list[this.target.page_list.length-1]===infinity)t.push(()=>this.target.page_list.pop());else if(-1!==this.target.page_list.indexOf(this.page)&&this.target.page_list.indexOf(this.page)!==this.target.page_list.length-1)return void console.log("Cannot remove differential, target has done stuff since.");this.revive_source_page_list=this.source.page_list.slice(),this.revive_target_page_list=this.target.page_list.slice(),t.forEach(t=>t()),-1!==this.source.page_list.indexOf(this.page)&&(this.source.page_list[this.source.page_list.length-1]=infinity),-1!==this.target.page_list.indexOf(this.page)&&(this.target.page_list[this.target.page_list.length-1]=infinity),Edge.prototype.delete.call(this)}revive(){this.source.page_list=this.revive_source_page_list.slice(),this.target.page_list=this.revive_target_page_list.slice(),Edge.prototype.revive.call(this)}setMinPage(t){throw"Unsupported operation"}setKernel(t,e){return this.source.replace(t,e),this}replaceSource(t,e){return this.setKernel(t,e),this}setCokernel(t,e){return this.target.replace(t,e),this}replaceTarget(t,e){return this.setCokernel(t,e),this}setTargetName(t){return this.target_name=t,this}setSourceName(t){return this.source_name=t,this}addInfoToSource(){return this.source.addExtraInfo(this.toString(!0,!1)),this.source.update(),this}addInfoToTarget(){return this.target.addExtraInfo(this.toString(!1,!0)),this.target.update(),this}addInfoToSourceAndTarget(){return this.source.addExtraInfo(this.toString(!0,!1)),this.target.addExtraInfo(this.toString(!1,!0)),this.source.update(),this.target.update(),this}setSourceStructlinePages(){return this.source.setStructlinePages(this.page),this}setTargetStructlinePages(){return this.target.setStructlinePages(this.page),this}setStructlinePages(){let t=this.source.setStructlinePages(this.page),e=this.target.setStructlinePages(this.page);return t.concat(e)}toString(t,e){let s=this.source_name;s||(s=this.source.name);let i=this.target_name;return i||(i=this.target.name),t&&(s=`{\\color{blue}{${s}}}`),e&&(i=`{\\color{blue}{${i}}}`),`\\(d_{${this.page}}(${s}) = ${i}\\)`}_drawOnPageQ(t){return 0===t[0]||t[0]<=this.page&&this.page<=t[1]}}exports.Differential=Differential;

},{"./Util.js":49}],42:[function(require,module,exports){
let IO=require("./SaveLoad.js"),texHead="\\documentclass{spectralsequence-example}\n\\makeatletter\n\\begin{document}",beginSseqpage="\\begin{sseqpage}",texFoot="\\end{sseqpage}\n\\end{document}";function SpectralSequenceToTex(e,t,n,s,o,a){console.log(t),t&&e._calculateDrawnElements(t,n,s,o,a);let l=e._getClassesToDisplay(),u=e._getEdgesToDisplay();this.sseq=e;let c=[],i=[],r=[];for(let e of l)c.push(latexClassString(e));for(let e of u)i.push(latexStructlineString(e));return r.push(texHead),r.push(beginSseqpage),r.push(c.join("\n")),r.push(i.join("\n")),r.push(texFoot),r.join("\n")}function DownloadSpectralSequenceTex(e,t,n,s,o,a,l){IO.download(e,SpectralSequenceToTex(t,n,s,o,a,l))}function latexClassString(e){let t=[];return t.push(`name=${"id"+e.unique_id}`),0===e.x_offset&&t.push("offset={(0,0)}"),`\\class[${t.join(", ")}](${e.x},${e.y})`}function latexStructlineString(e){return`\\structline(${"id"+e.source.unique_id})(${"id"+e.target.unique_id})`}exports.SpectralSequenceToTex=SpectralSequenceToTex,exports.DownloadSpectralSequenceTex=DownloadSpectralSequenceTex;

},{"./SaveLoad.js":44}],43:[function(require,module,exports){
applyAttributesToElement=function(t,e){if(t&&e)for(let o of Object.entries(e))t.setAttribute(o[0],o[1])},fixFormHTML={},fixFormHTML.radio=function(t,e){let o=t.getElementsByName(e.name),s=e.options.items;for(let t=0;t<o.length;t++)applyAttributesToElement(o[t],s[t].attributes)};class PopupForm{static backupRecord(t){t.save_record={},Object.assign(t.save_record,t.record)}static saveRecord(t){Object.assign(t.original,t.save_record),Object.assign(t.record,t.save_record)}static restoreRecord(t){Object.assign(t.record,t.original)}constructor(t,e){let o=Object.assign({},PopupForm.default_form_obj,t);this.form_obj=o;let s=o.name;o.actions={},o.actions[this.form_obj.accept_button_name]=function(){w2ui[s].save(),PopupForm.backupRecord(w2ui[s]),w2ui[s].validate().length>0||(PopupForm.saveRecord(w2ui[s]),w2ui[s].onSuccess(),w2popup.close())},o.actions.Cancel=function(){w2popup.close()},$().w2form(this.form_obj);let i=w2ui[s];this.form=i,this.fixFormHTML(i),Object.assign(i.original,o.record),this.popup_obj=Object.assign({},PopupForm.default_popup_obj,e),this.popup_obj.onToggle=function(t){$(i.box).hide(),t.onComplete=function(){$(i.box).show(),i.resize()}},this.popup_obj.onKeydown=function(t){if("Enter"===t.originalEvent.key){if(document.getElementsByClassName("w2ui-error").length>0)return;i.actions[o.accept_button_name]()}},this.popup_obj.onClose=function(t){PopupForm.restoreRecord(i)},this.userOnOpen=this.popup_obj.onOpen,this.popup_obj.onOpen=(t=>{let e=document.createElement("style");e.innerText="#w2ui-popup, #w2ui-lock { opacity :  0 !important }",document.body.appendChild(e),t.onComplete=(()=>{$("#w2ui-popup #form").w2render(i),this.userOnOpen&&this.userOnOpen(t),document.body.removeChild(e)})}),this.open=this.open.bind(this)}open(){$("#w2ui-popup").length>0||$().w2popup(this.popup_obj)}fixFormHTML(){let t=(new DOMParser).parseFromString(this.form.formHTML,"text/html");for(let e of this.form.fields)e.attributes&&applyAttributesToElement(t.getElementsByName(e.name)[0],e.attributes),fixFormHTML[e.type]&&fixFormHTML[e.type](t,e);this.form.formHTML=(new XMLSerializer).serializeToString(t)}}PopupForm.default_form_obj={style:"border: 0px; background-color: transparent;"},PopupForm.default_popup_obj={body:'<div id="form" style="width: 100%; height: 100%;"></div>',style:"padding: 15px 0px 0px 0px opacity: 0",width:500,height:220},exports.PopupForm=PopupForm;class Undo{constructor(t){this.sseq=t,this.undoStack=[],this.undoObjStack=[],this.redoStack=[],this.redoObjStack=[],this.undo=this.undo.bind(this),this.redo=this.redo.bind(this)}add(t,e){this.undoStack.push(t),this.undoObjStack.push(e),this.redoStack=[],this.redoObjStack=[]}clear(){this.undoStack=[],this.redoStack=[]}merge(){let t=this.undoStack.pop(),e=this.undoStack.pop();this.add(Undo.mergeMutationMaps(t,e))}static mergeMutationMaps(t,e){let o=new Map(t);for(let t of e){let e=t[0],s=t[1];if(o.has(e)){let t=o.get(e);s.before=t.before}o.set(e,s)}return o}undo(){if(0===this.undoStack.length)return;let t=this.undoStack.pop();for(let e of t.values())e.obj.restoreFromMemento(e.before);this.redoStack.push(t);let e=this.undoObjStack.pop();this.redoObjStack.push(e),sseq.display_sseq.update()}redo(){if(0===this.redoStack.length)return;let t=this.redoStack.pop();for(let e of t.values())e.obj.restoreFromMemento(e.after);this.undoStack.push(t);let e=this.redoObjStack.pop();this.undoObjStack.push(e),sseq.display_sseq.update()}getEventObjects(){return this.undoObjStack}}exports.Undo=Undo;

},{}],44:[function(require,module,exports){
function nextString(e){return 0===e.length?"¦":e.substring(0,e.length-1)+String.fromCharCode(e.charCodeAt(e.length-1)+1)}exports.download=function(e,t){let n=document.createElement("a");n.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(t)),n.setAttribute("download",e),n.style.display="none",document.body.appendChild(n),n.click(),document.body.removeChild(n)},exports.upload=function(){return new Promise((e,t)=>{let n=document.createElement("input");n.setAttribute("type","file"),n.setAttribute("multiple",""),n.style.display="none";let o=new FileReader,s=0,a=[];n.onchange=function(){for(let e of n.files)a.push({name:e.name});o.readAsText(n.files[0])},o.onloadend=function(){a[s].content=o.result,++s<n.files.length?o.readAsText(n.files[s]):(e(a),document.body.removeChild(n))},document.body.appendChild(n),n.click()})},exports.saveToLocalStore=function(e,t,n){return sseqDatabase.open().catch(e=>console.log(e)).then(()=>sseqDatabase.createKey(e,JSON.stringify(t),n)).then(()=>console.log("Successfully saved."))},exports.loadKeysFromLocalStoreWithPrefix=async function(e){let t=nextString(e);return await sseqDatabase.open(),await sseqDatabase.fetchKeyRange(e,t)},exports.loadFromLocalStore=async function(e){await sseqDatabase.open();let t=await sseqDatabase.fetchKey(e);if(!t||!t.value)return;let n=JSON.parse(t.value);return n.name=t.key,n},exports.deleteFromLocalStore=async function(e){await sseqDatabase.open(),await sseqDatabase.deleteKey(e)},exports.loadFromServer=async function(e){let t=await fetch(e);return await t.json()};const sseqDatabase={};let datastore=null;sseqDatabase.open=function(){return new Promise(function(e,t){if(datastore)return void e();const n=indexedDB.open("sseq",6);n.onupgradeneeded=function(e){const t=e.target.result;e.target.transaction.onerror=sseqDatabase.onerror,t.objectStoreNames.contains("sseq")&&t.deleteObjectStore("sseq");const n=t.createObjectStore("sseq",{keyPath:"key"});n.createIndex("key","key",{unique:!0}),n.createIndex("collection","collection",{unique:!1})},n.onsuccess=function(t){datastore=t.target.result,e()},n.onerror=t})},sseqDatabase.fetchAllKeys=function(){return new Promise(function(e,t){const n=datastore.transaction(["sseq"],"readwrite"),o=n.objectStore("sseq"),s=IDBKeyRange.lowerBound(0),a=o.openCursor(s),r=[];n.oncomplete=function(t){e(r)},a.onsuccess=function(e){let t=e.target.result;!1!=!!t&&(r.push(t.value),t.continue())},a.onerror=t})},sseqDatabase.fetchKey=function(e){return new Promise(function(t,n){const o=datastore.transaction(["sseq"],"readwrite").objectStore("sseq"),s=(IDBKeyRange.lowerBound(0),o.index("key").get(e));s.onsuccess=function(e){t(s.result)},s.onerror=n})},sseqDatabase.fetchKeyRange=function(e,t){return new Promise(function(n,o){const s=datastore.transaction(["sseq"],"readwrite"),a=s.objectStore("sseq"),r=IDBKeyRange.bound(e,t,!0,!1),c=a.openCursor(r),i=[];s.oncomplete=function(e){n(i)},c.onsuccess=function(e){let t=e.target.result;!1!=!!t&&(i.push(t.value),t.continue())},c.onerror=o})},sseqDatabase.fetchCollection=function(e){return new Promise(function(t,n){const o=datastore.transaction(["sseq"],"readwrite"),s=o.objectStore("sseq");console.log(e);const a=s.index("collection").openCursor(e),r=[];o.oncomplete=function(e){t(r)},a.onsuccess=function(e){let t=e.target.result;0!=!!t&&(r.push(t.value),t.continue())},a.onerror=n})},sseqDatabase.createKey=function(e,t,n){return new Promise(function(o,s){const a=datastore.transaction(["sseq"],"readwrite").objectStore("sseq"),r=(new Date).getTime(),c={key:e,value:t,collection:n,timestamp:r},i=a.put(c);i.onsuccess=function(e){o(c)},i.onerror=s})},sseqDatabase.deleteKey=function(e){return new Promise(function(t,n){const o=datastore.transaction(["sseq"],"readwrite").objectStore("sseq").delete(e);o.onsuccess=function(e){t()},o.onerror=n})},exports.sseqDatabase=sseqDatabase;

},{}],45:[function(require,module,exports){
"use strict";let Shapes={};Shapes.circle={draw:function(i){!0!==this.fill()?this.save_fill=this.fill():!0===this.fill()&&this.save_fill&&this.fill(this.save_fill),i.beginPath(),i.arc(0,0,this.size(),0,2*Math.PI,!1),i.closePath(),i.fillStrokeShape(this)},hitRegion:function(i){i.beginPath(),i.arc(0,0,this.size(),0,2*Math.PI,!1),i.closePath();let l=this.fillEnabled();this.fillEnabled(!0),i.fillStrokeShape(this),this.fillEnabled(l)}},Shapes.circlen={draw:function(i){!0!==this.fill()?this.save_fill=this.fill():!0===this.fill()&&this.save_fill&&this.fill(this.save_fill),i.beginPath(),i.arc(0,0,this.size(),0,2*Math.PI,!1),i.closePath(),i.fillStrokeShape(this),i.textAlign="center",i.fillStyle="black";let l=2*this.size()|0;i.font=`${l}px Arial`,i.fillText(this.node.order,0,this.size()/2)},hitRegion:function(i){i.beginPath(),i.arc(0,0,this.size(),0,2*Math.PI,!1),i.closePath();let l=this.fillEnabled();this.fillEnabled(!0),i.fillStrokeShape(this),this.fillEnabled(l)}},Shapes.square={draw:function(i){let l=this.size();i.beginPath(),i.rect(-l,-l,2*l,2*l),i.closePath(),i.fillStrokeShape(this)},hitRegion:function(i){let l=this.size();i.beginPath(),i.rect(-l,-l,2*l,2*l),i.closePath();let t=this.fillEnabled();this.fillEnabled(!0),i.fillStrokeShape(this),this.fillEnabled(t)}};for(let i of Object.getOwnPropertyNames(Shapes))Shapes[i].name=i,exports[i]=Shapes[i];

},{}],46:[function(require,module,exports){
"use strict";let DisplaySseq=require("./DisplaySseq.js").DisplaySseq,Shapes=require("./Shape.js"),SseqClassjs=require("./SseqClass.js"),SseqClass=SseqClassjs.SseqClass,Node=SseqClassjs.Node,Edges=require("./Edges.js"),Edge=Edges.Edge,Structline=Edges.Structline,Extension=Edges.Extension,Differential=Edges.Differential,monomial_basisjs=require("./monomial_basis.js"),monomial_basis=monomial_basisjs.monomial_basis,slice_basis=monomial_basisjs.slice_basis,Util=require("./Util.js"),infinity=Util.infinity,IO=require("./SaveLoad"),sseqDatabase=IO.sseqDatabase;exports.DisplaySseq=DisplaySseq,exports.SseqClass=SseqClass,exports.Node=Node,exports.Edge=Edge,exports.Differential=Differential,exports.Structline=Structline,exports.Extension=Extension,exports.monomialString=monomial_basisjs.monomialString,exports.range=monomial_basisjs.range,exports.StringifyingMap=monomial_basisjs.StringifyingMap,exports.product=monomial_basisjs.product,exports.vectorSum=monomial_basisjs.vectorSum,exports.vectorScale=monomial_basisjs.vectorScale,exports.vectorLinearCombination=monomial_basisjs.vectorLinearCombination;let StringifyingMap=require("./StringifyingMap.js");function dot_product(e,s){let t=0;for(let i=0;i<e.length;i++)t+=e[i]*s[i];return t}function addToDictionaryOfLists(e,s,t){e.has(s)||e.set(s,[]),e.get(s).push(t)}class Sseq{constructor(){this.display_sseq=new DisplaySseq,this.display_class_to_real_class=new StringifyingMap(e=>`${e.x}, ${e.y}, ${e.unique_id}`),this.display_edge_to_real_edge=new StringifyingMap(e=>`${e.type} : (${e.source.x}, ${e.source.y}, ${e.source.unique_id}) => (${e.target.x}, ${e.target.y}, ${e.target.unique_id})`),this.total_classes=0,this.initialxRange=[0,10],this.initialyRange=[0,10],this.classes_by_degree=new StringifyingMap,this.num_classes_by_degree=new StringifyingMap,this.classes_by_stem=new Map,this.classes=[],this.class_tooltip_fields=["extra_info"],this.structlines=[],this.differentials=[],this.edges=[],this.display_classes=[],this.display_structlines=[],this.display_differentials=[],this.xshift=0,this.yshift=0,this.offset_size=.3,this.class_scale=1,this.min_page_idx=0,this.page_list=[0,infinity],this.default_node=new Node,this.default_node.fill=!0,this.default_node.stroke=!0,this.default_node.shape=Shapes.circle,this.default_node.size=6,this.projection=(e=>[e.degree.x,e.degree.y]),this.stem_degree=(e=>e.degree.x),this.filtration_degree=(e=>e.degree.y),this.products=[],this.selectedClasses=[],this._sseq_update_fields=[""],this._class_update_fields=["x","y","idx","unique_id","x_offset","y_offset","name","save_name","extra_info","page_list","node_list","visible","class_tooltip_fields","_classInRangeQ","_drawOnPageQ","selected","invalid"],this._edge_update_fields=["page","page_min","color","source_name","target_name","_drawOnPageQ","visible","bend","opacity","dash","lineWidth","source_name","target_name"],this.serializeSseqFields=Sseq.serializeSseqFields,this.serializeClassFields=Sseq.serializeClassFields,this.serializeEdgeFields=Sseq.serializeEdgeFields}startMutationTracking(){this.undo||(this.undo=new Interface.Undo(this)),this.mutationMap=new Map}addMutationsToUndoStack(e){this.undo.add(this.mutationMap,e),this.mutationMap=void 0}addMutation(e,s,t){this.mutationMap&&(this.mutationMap.get(e)&&(s=this.mutationMap.get(e).before),this.mutationMap.set(e,{obj:e,before:s,after:t}))}changeObject(e,s){if(!this.mutationList)return void s();let t=e.getMemento();s();let i=e.getMemento();this.mutationList.push({obj:e,before:t,after:i})}set_shift(e,s){return this.xshift=e,this.yshift=s,this}add_to_shift(e,s){return this.xshift+=e,this.yshift+=s,this}onClassAdded(e){return this.on_class_added=e,this}onEdgeAdded(e){return this.on_edge_added=e,this}onDifferentialAdded(e){return this.on_differential_added=e,this}onStructlineAdded(e){return this.on_structline_added=e,this}onExtensionAdded(e){return this.on_extension_added=e,this}onDraw(e){this.on_draw=e,this.display_sseq.on_draw=e}getClasses(){return this.classes}getEdges(){return this.edges}getStructlines(){return this.structlines}getDifferentials(){return this.differentials}getSelection(){}clearSelection(){for(let e of this.classes)e.selected=!1;return this.updateAll(),this}selectClass(e,s=!0){return e?(e.selected=s,this.updateClass(e),this):this}unselectClass(e){this.selectClass(e,!1)}unselectAll(){for(let e of this.getClasses())e.selected=!1;this.updateAll()}getPotentialTargets(e){let s=e.x-1;return sseq.getClasses().filter(e=>e.x===s)}getClassesInDegree(e,s){return this.classes.filter(t=>t.x===e&&t.y===s)}getClassesByName(e){return this.classes.filter(s=>s.name===e)}getOccupiedStems(){return Array.from(this.classes_by_degree.keys())}getStem(e){return this.classes_by_stem.get(e)||[]}addClass(e,s){if(void 0===e)return SseqClass.getDummy();let t;t=void 0===s?e:{x:e+=this.xshift,y:s+=this.yshift};let i=new SseqClass(this,t),a=this.num_classes_by_degree.getOrElse([i.x,i.y],0);return this.num_classes_by_degree.set([i.x,i.y],a+1),i.idx=a,i.class_list_index=this.classes.length,this.classes.push(i),addToDictionaryOfLists(this.classes_by_degree,t,i),addToDictionaryOfLists(this.classes_by_stem,i.x,i),this.total_classes++,this.on_class_added&&this.on_class_added(i),i.display_class={},this.display_sseq.classes[i.class_list_index]=i.display_class,this.updateClass(i),this.display_class_to_real_class.set(i.display_class,i),this.addMutation(i,{delete:!0},i.getMemento()),i}deleteClass(e){if(!e||e.invalid)return;e.invalid=!0,e.display_class.invalid=!0;let s=this.num_classes_by_degree.get([e.x,e.y]);return this.num_classes_by_degree.set([e.x,e.y],s-1),this.total_classes--,this.classes.splice(this.classes.indexOf(e),1),this.updateClass(e),e}reviveClass(e){if(!e||!e.invalid)return;e.invalid=!1,e.display_class.invalid=!1;let s=this.num_classes_by_degree.get([e.x,e.y]);return this.num_classes_by_degree.set([e.x,e.y],s+1),this.total_classes++,this.classes.push(e),this.updateClass(e),e}deleteEdge(e){e.delete()}reviveEdge(e){e.revive()}addStructline(e,s){if(this.duplicateEdge(Structline,e,s))return Structline.getDummy();if(!e||!s||e.isDummy()||s.isDummy())return Structline.getDummy();let t=new Structline(this,e,s);return e._addStructline(t),s._addStructline(t),this.structlines.push(t),t.edge_list_index=this.edges.length,this.edges.push(t),this.on_edge_added&&this.on_edge_added(t),this.on_structline_added&&this.on_structline_added(t),this.setupDisplayEdge(t),t}addDifferential(e,s,t){if("number"==typeof e)return console.log("addDifferential a SseqClass in position 1, got a number. Probably the arguments are in the wrong order."),Differential.getDummy();if("number"!=typeof t)return console.log(`Invalid page ${t} for differential.`),Differential.getDummy();if(this.duplicateEdge(Differential,e,s,t))return Differential.getDummy();if(t<=0)return console.log([e,s,t]),console.log("No page <= 0 differentials allowed."),Differential.getDummy();if(!e||!s||e.isDummy()||s.isDummy())return Differential.getDummy();let i=new Differential(this,e,s,t);return e._addOutgoingDifferential(i),s._addIncomingDifferential(i),i.edge_list_index=this.edges.length,this.differentials.push(i),this.edges.push(i),this.addPageToPageList(t),this.on_edge_added&&this.on_edge_added(i),this.on_differential_added&&this.on_differential_added(i),this.setupDisplayEdge(i),i}addExtension(e,s){if(!e||!s||e.isDummy()||s.isDummy())return Extension.getDummy();if(this.duplicateEdge(Extension,e,s))return Extension.getDummy();let t=new Extension(this,e,s);return t.edge_list_index=this.edges.length,this.edges.push(t),this.on_edge_added&&this.on_edge_added(t),this.on_extension_added&&this.on_extension_added(t),this.setupDisplayEdge(t),t}duplicateEdge(e,s,t,i){return this.edges.some(a=>a.constructor===e&&a.source===s&&a.target===t&&(!i||a.page===i))}addSumDifferential(e,s,t){let i=s.map(e=>e.name).join("+"),a=[];for(let l of s){let s=this.addDifferential(e,l,t);s.target_name=i,a.push(s)}for(let e=0;e<a.length-1;e++)a[e].replaceTarget();return a}getClassString(e){let s=e.name?`[${e.name}]`:"";return`(${e.x}, ${e.y})${s}`}getDifferentialQuery(e,s,t){return void 0===t?`Add differential from ${this.getClassString(e)} to ${this.getClassString(s)}?`:`Add d${t} differential from ${this.getClassString(e)} to ${this.getClassString(s)}?`}getStructlineQuery(e,s,t){return`Add${t=t?" *"+t:""} structline from ${this.getClassString(e)} to ${this.getClassString(s)}?`}getExtensionQuery(e,s,t){return`Add${t=t?" *"+t:""} extension from ${this.getClassString(e)} to ${this.getClassString(s)}?`}getPossibleEdgesToAdd(e,s){if(this.stem_degree(e)>this.stem_degree(s)){let t=s;s=e,e=t}let t=this.stem_degree(e),i=this.stem_degree(s),a=this.filtration_degree(e),l=i-t,r=this.filtration_degree(s)-a;if(1===l&&r<0)return{query:this.getDifferentialQuery(s,e,-r),callback:()=>this.addDifferential(s,e,-r)};for(let t of this.products){if(t.stem===l&&t.filtration===r)return{query:this.getStructlineQuery(e,s,t.name),callback:()=>this.addStructline(e,s).setProduct(t.name).setColor(t.color)};if(t.stem===-l&&t.filtration===r)return{query:this.getStructlineQuery(s,e,t.name),callback:()=>this.addStructline(s,e).setProduct(t.name).setColor(t.color)}}for(let t of this.products){if(t.stem===l&&t.filtration<r)return{query:this.getExtensionQuery(e,s,t.name),callback:()=>this.addExtension(e,s).setProduct(t.name).setColor(t.color)};if(t.stem===-l&&t.filtration<r)return{query:this.getExtensionQuery(s,e,t.name),callback:()=>this.addExtension(s,e).setProduct(t.name).setColor(t.color)}}return!1}setupDisplayEdge(e){let s={};e.display_edge=s,this.display_sseq.edges[e.edge_list_index]=s,s.source=e.source.display_class,s.target=e.target.display_class,s.type=e.constructor.name,this.display_edge_to_real_edge.set(e.display_edge,e),this.updateEdge(e),this.addMutation(e,{delete:!0},e.getMemento())}display(){let e=this.getDisplaySseq();return this.updateAll(),e.display(),e}update(){this.display_sseq.update()}updateAll(){Util.assignFields(this.display_sseq,this,this._sseq_update_fields);for(let e of this.classes)this.updateClass(e);for(let e of this.edges)this.updateEdge(e);this.display_sseq.update()}updateObject(e){e.constructor===SseqClass?this.updateClass(e):this.updateEdge(e)}updateClass(e){Util.assignFields(e.display_class,e,this._class_update_fields),Util.assignFields(e.display_class,e,this.class_tooltip_fields),e.display_class.tooltip=void 0}updateEdge(e){if(e.isDummy())return;let s=e.display_edge;Util.assignFields(s,e,this._edge_update_fields)}decrementClassIndex(e){let s=this.getClassesInDegree(e.x,e.y),t=e.idx;if(0!==t)for(let i of s)if(i.idx===t-1)return e.idx--,void i.idx++}incrementClassIndex(e){let s=this.getClassesInDegree(e.x,e.y),t=e.idx;if(t!==s.length)for(let i of s)if(i.idx===t+1)return e.idx++,void i.idx--}addPageToPageList(e){for(let s=0;s<this.page_list.length;s++){let t;if((t=Array.isArray(this.page_list[s])?this.page_list[s][0]:this.page_list[s])>e&&this.page_list.splice(s,0,e),t>=e&&!Array.isArray(this.page_list[s]))return this}}addPageRangeToPageList(e){let s=e[0];for(let t=0;t<this.page_list.length;t++){let i;if((i=Array.isArray(this.page_list[t])?this.page_list[t][0]:this.page_list[t])>s)return this.page_list.splice(t,0,e),this;if(i==s){if(!Array.isArray(this.page_list[t]))return this.page_list.splice(t,0,e),this;if(this.page_list[t][1]>e[1])return this.page_list.splice(t,0,e),this;if(this.page_list[t][1]==e[1])return this}}}addPolynomialClasses(e,s,t={"":[0,0]}){if(!Array.isArray(s))throw"Second argument of addPolynomialClasses should be an array";return new monomial_basis(this,e,s,t)}deserializePolynomialClasses(e){return new monomial_basis(this,e)}addSliceClasses(e,s,t){if(!Array.isArray(s))throw"Second argument of addPolynomialClasses should be an array";return new slice_basis(this,e,s,t)}getSurvivingClasses(e){return void 0===e&&(e=infinity-1),this.classes.filter(s=>s.page_list[s.page_list.length-1]>=e)}static getSseqFromDisplay(e){let s=new Sseq;e.real_sseq=s,Object.assign(s,e),s.num_classes_by_degree=new StringifyingMap,s.classes=[],s.edges=[],s.display_class_to_real_class=new StringifyingMap(e=>`${e.x}, ${e.y}, ${e.unique_id}`);let t=e.classes,i=e.edges;for(let e of t){if(!e)continue;let t=s.addClass(e.x,e.y);t.unique_id=e.unique_id,Object.assign(t,e),t.constructor=SseqClass.constructor,t.display_class=e,s.display_class_to_real_class.set(e,t),s.updateClass(t)}for(let e of i){if(!e)continue;if(e.source.y>e.target.y){let s=e.target;e.target=e.source,e.source=s}let t,i=s.display_class_to_real_class.get(e.source),a=s.display_class_to_real_class.get(e.target);switch(e.type){case"Differential":let l=i.page_list.slice(),r=a.page_list.slice();t=s.addDifferential(i,a,e.page),i.page_list=l,a.page_list=r;break;case"Extension":t=s.addExtension(i,a);break;case"Structline":default:t=s.addStructline(i,a)}Object.assign(t,e),t.source=i,t.target=a,t.display_edge=e,s.updateEdge(t)}return s.display_sseq=e,s.getDisplaySseq(),s}getDisplaySseq(){let e=this.display_sseq;return e.real_sseq=this,e.min_page_idx=this.min_page_idx,e.initial_page_idx=this.initial_page_idx,e.page_list=this.page_list,e.initialxRange=this.initialxRange,e.initialyRange=this.initialyRange,e.xRange=this.xRange,e.yRange=this.yRange,e.on_draw=this.on_draw,e.class_scale=this.class_scale,e.num_classes_by_degree=this.num_classes_by_degree,e.serializeSseqFields=this.serializeSseqFields,e.serializeClassFields=this.serializeClassFields,e.serializeEdgeFields=this.serializeEdgeFields,e.class_tooltip_fields=this.class_tooltip_fields,this._getXOffset&&(e._getXOffset=this._getXOffset),this._getYOffset&&(e._getYOffset=this._getYOffset),this.offset_size&&(e.offset_size=this.offset_size),this.onmouseoverClass&&(e.onmouseoverClass=this.onmouseoverClass),e}deleteDuplicateEdges(){for(let e of this.getClasses()){let s=[];for(let t of e.getEdges())s.includes(t.otherClass(e))?t.delete():s.push(t.otherClass(e))}}addSseqFieldToSerialize(e){Array.isArray(e)?e.forEach(e=>this.addSseqFieldToSerialize(e)):this.serializeSseqFields.includes(e)||this.serializeSseqFields.push(e)}addClassFieldToSerialize(e){Array.isArray(e)?e.forEach(e=>this.addClassFieldToSerialize(e)):this.serializeClassFields.includes(e)||this.serializeClassFields.push(e)}addEdgeFieldToSerialize(e){Array.isArray(e)?e.forEach(e=>this.addEdgeFieldToSerialize(e)):this.serializeEdgeFields.includes(e)||this.serializeEdgeFields.push(e)}download(e){IO.download(e,JSON.stringify(this))}static upload(){return IO.upload().then(e=>DisplaySseq.fromJSONObject(JSON.parse(e)))}save(){this.save_name?this.saveToLocalStore(name):this.saveAs()}saveAs(){let e=prompt("Save as:",this.save_name||"");e&&(this.save_name=e,this.saveToLocalStore(e))}saveToLocalStore(e){return IO.saveToLocalStore(e,this)}static async loadFromDataStoreOrServer(e){let s;(s=await IO.loadFromLocalStore(e))||(s=await IO.loadFromServer(e));let t=DisplaySseq.fromJSONObject(s);return t.path=e,t}static async loadFromServer(e){let s=await IO.loadFromServer(e);return DisplaySseq.fromJSONObject(s)}static async loadFromLocalStore(e){let s=await IO.loadFromLocalStore(e);return console.log(s),DisplaySseq.fromJSONObject(s)}toJSON(){for(let e of this.serializeSseqFields)this[e]&&(this.display_sseq[e]=this[e]);for(let e of this.getClasses())for(let s of this.serializeClassFields)e[s]&&(e.display_class[s]=e[s]);for(let e of this.getEdges())for(let s of this.serializeEdgeFields)e[s]&&(e.display_edge[s]=e[s]);let e=this.getDisplaySseq().toJSON();for(let e of this.getClasses())this.display_class_to_real_class.set(e.display_class,e);return e}toSVG(e){IO.download(e,display.toSVG())}}Sseq.serializeSseqFields=["min_page_idx","page_list","xRange","yRange","initialxRange","initialyRange","default_node","class_scale","offset_size","serializeSseqFields","serializeClassFields","serializeEdgeFields","class_tooltip_fields"],Sseq.serializeClassFields=["x","y","name","extra_info","unique_id","idx","x_offset","y_offset","page_list","visible"],Sseq.serializeEdgeFields=["color","bend","dash","lineWidth","opacity","page_min","page","type","mult","source_name","target_name"],exports.Sseq=Sseq;

},{"./DisplaySseq.js":40,"./Edges.js":41,"./SaveLoad":44,"./Shape.js":45,"./SseqClass.js":47,"./StringifyingMap.js":48,"./Util.js":49,"./monomial_basis.js":53}],47:[function(require,module,exports){
"use strict";let Util=require("./Util.js"),infinity=Util.infinity;class Node{constructor(t){this.opacity=1,this.color="black",t&&Object.assign(this,t)}copy(){return this.isDummy()?new Node:Object.assign(new Node,this)}getShape(){return this.shape}setShape(t){return this.shape=t,this}getSize(){return this.size}setSize(t){return this.size=t,this}getColor(){return this.color}setColor(t){return this.color=t,this}setFill(t){return this.fill=t,this}setStroke(t){return this.stroke=t,this}setOpacity(t){return this.opacity=t,this}isDummy(){return!1}static getDummy(){if(Node._dummy)return Node._dummy;let t=new Node,e=Util.getDummyConstantFunction(t);t.isDummy=function(){return!0},t.setShape=e,t.setColor=e}static merge(...t){let e=new Node;for(var s=0;s<t.length;s++)if(!t[s].isDummy||!t[s].isDummy())for(var i in t[s])e[i]=t[s][i];return e}}let unique_id=0;class SseqClass{constructor(t,e){this.sseq=t,this.degree=e,this.projection=t.projection(this),this.x=this.projection[0],this.y=this.projection[1],this.x_offset=!1,this.y_offset=!1,this.idx=0,this.unique_id=unique_id++,this.edges=[],this.structlines=[],this.name="",this.last_page_name="",this.extra_info="",this.differential_strings=[],this.page_list=[infinity],this.node_list=[t.default_node.copy()],this.visible=!0,this._last_page=0,this._last_page_idx=0}getMemento(){let t=Util.copyFields({},this);return t.node_list=t.node_list.map(t=>t.copy()),t}restoreFromMemento(t){if(t.delete){if(this.invalid)return;return void this.sseq.deleteClass(this)}this.invalid&&this.sseq.reviveClass(this);Util.copyFields(this,t);return this.node_list=this.node_list.map(t=>t.copy()),this.sseq.updateClass(this),this}static getDummy(){if(SseqClass._dummy)return SseqClass._dummy;let t=Object.create(SseqClass);SseqClass._dummy=t;let e=Util.getDummyConstantFunction(t);t.isDummy=Util.getDummyConstantFunction(!0),t.getName=Util.getDummyConstantFunction("dummy"),t.getColor=Util.getDummyConstantFunction("black"),t.getShape=Util.getDummyConstantFunction(null),t.getTooltip=Util.getDummyConstantFunction(""),t.getPage=Util.getDummyConstantFunction(-1),t.getNode=Util.getDummyConstantFunction(Node.getDummy()),t.toString=t.getName,t.constructor=SseqClass.constructor,t.update=e,t.replace=e,t.addExtraInfo=e,t.isAlive=Util.getDummyConstantFunction(!1);for(let e of["getEdges","getDifferentials","getIncomingDifferentials","getOutgoingDifferentials","getStructlines","getIncomingStructlines","getOutgoingStructlines","getProducts","getDivisors","getExtensions"])t[e]=Util.getDummyConstantFunction([]);return t.getProductIfPresent=Util.getDummyConstantFunction(t),t.getDivisorIfPresent=Util.getDummyConstantFunction(t),t.getStringifyingMapKey=Util.getDummyInvalidOperation(t,"getStringifyingMapKey"),Util.setPrivateMethodsToInvalidOperation(t),Util.setDummyMethods(t,t=>t.startsWith("set"),()=>e),Util.checkAllCommandsDefined(t,SseqClass),t}isDummy(){return!1}update(){this.sseq.updateClass(this)}getName(){return this.name}setName(t){return this.name=t,this.last_page_name=t,this}getPage(){return this.page_list[this.page_list.length-1]}setPage(t){return this.page_list[this.page_list.length-1]=t,this}isAlive(t){return t||(t=infinity-1),this.getPage()>t}getNode(t){const e=this._getPageIndex(t);return this.node_list[e]}setNode(t,e){void 0===t&&(t={});let s=this.getMemento();const i=this._getPageIndex(e);this.node_list[i]=Node.merge(this.node_list[i],t);let n=this.getMemento();return this.sseq.addMutation(this,s,n),this}getColor(t){return this.getNode(t).getColor()}setColor(t,e){let s=this.getMemento();this.getNode(e).setColor(t);let i=this.getMemento();return this.sseq.addMutation(this,s,i),this}getShape(t){return this.getNode(t).getShape()}setShape(t,e){let s=this.getMemento();this.getNode(e).setShape(t);let i=this.getMemento();return this.sseq.addMutation(this,s,i),this}setStructlinePages(t){let e=this.getStructlines();for(let s=0;s<e.length;s++){let i=e[s];if(i.page>t){let e=i.getMemento();i.page=t;let s=i.getMemento();this.sseq.addMutation(i,e,s),this.sseq.updateEdge(i)}}return this}replace(t,e){let s=this.getMemento();e&&(this.last_page_name="string"==typeof e?e:e(this.name)),this._appendPage(infinity),this.setNode(t);let i=this.getMemento();return this.sseq.addMutation(this,s,i),this}addExtraInfo(t){let e=this.getMemento();this.extra_info+="\n"+t;let s=this.getMemento();return this.sseq.addMutation(this,e,s),this}setPermanentCycleInfo(t){let e=this.getMemento();this.permanent_cycle_info=t,this.addExtraInfo(this.permanent_cycle_info);let s=this.getMemento();return this.sseq.addMutation(this,e,s),this}getEdges(){return this.edges}getDifferentials(){return this.edges.filter(t=>"Differential"===t.type)}getOutgoingDifferentials(){return this.edges.filter(t=>"Differential"===t.type&&this===t.source)}getIncomingDifferentials(){return this.edges.filter(t=>"Differential"===t.type&&this===t.target)}getStructlines(){return this.edges.filter(t=>"Structline"===t.type)}getOutgoingStructlines(){return this.edges.filter(t=>"Structline"===t.type&&this===t.source)}getIncomingStructlines(){return this.edges.filter(t=>"Structline"===t.type&&this===t.target)}getExtensions(){return this.edges.filter(t=>"Extension"===t.type)}getProducts(t){let e=this.edges.filter(t=>"Structline"===t.type&&t.otherClass(this).y>this.y);return t&&(e=e.filter(e=>e.mult===t)),e}getDivisors(t){let e=this.edges.filter(t=>"Structline"===t.type&&t.otherClass(this).y<this.y);return t&&(e=e.filter(e=>e.mult===t)),e}getProductIfPresent(t){let e=this.getProducts(t);return 1===e.length?e[0].otherClass(this):SseqClass.getDummy()}getDivisorIfPresent(t){let e=this.getDivisors(t);return 1===e.length?e[0].otherClass(this):SseqClass.getDummy()}toString(){return this.name}getStringifyingMapKey(){return this.x+","+this.y+","+this.idx}_getPageIndex(t){if(void 0===t)return this.page_list.length-1;if(t===this._last_page)return this._last_page_idx;let e;for(let s=0;s<this.page_list.length;s++)if(this.page_list[s]>=t){e=s;break}return void 0===e&&console.log(new Error("Page too large. This probably shouldn't happen.")),this._last_page=t,this._last_page_idx=e,e}_appendPage(t){return this.page_list.push(t),this.node_list.push(this.node_list[this.node_list.length-1].copy()),this}_addStructline(t){this.edges.push(t)}_addOutgoingDifferential(t){this.getPage(),t.page,this.setPage(t.page),this.edges.push(t),this._updateDifferentialStrings()}_addIncomingDifferential(t){this.getPage(),t.page,this.setPage(t.page),this.edges.push(t),this._updateDifferentialStrings()}_updateDifferentialStrings(){let t=this.getDifferentials().sort((t,e)=>t.page>e.page);this.differential_strings=t.map(t=>t.toString(t.source===this,t.target===this))}_drawOnPageQ(t){return this.page_list[this.page_list.length-1]>=t&&this.visible}_inRangeQ(t,e,s,i){return t<=this.x&&this.x<=e&&s<=this.y&&this.y<=i}}exports.Node=Node,exports.SseqClass=SseqClass;

},{"./Util.js":49}],48:[function(require,module,exports){
"use strict";function stdCatToString(t){if(void 0!==t)return void 0!==t.getStringifyingMapKey?t.getStringifyingMapKey():t.toString()}var StringifyingMap=function(){function t(t){void 0===t&&(t=stdCatToString),this.catToString=t,this.m=new Map,this.key_string_to_key_object=new Map}return t.prototype.set=function(t,e){let i=this.catToString(t);if(void 0===i)throw new Error("Key encoding undefined.");return this.key_string_to_key_object.set(i,t),this.m.set(i,e)},t.prototype.get=function(t){if(void 0!==this.catToString(t))return this.m.get(this.catToString(t))},t.prototype.delete=function(t){return this.key_string_to_key_object.delete(this.catToString(t)),this.m.delete(this.catToString(t))},t.prototype.has=function(t){return void 0!==t&&this.m.has(this.catToString(t))},t.prototype.getOrElse=function(t,e){return this.has(t)?this.get(t):e},t.prototype[Symbol.iterator]=function*(){for(let t of this.m)yield[this.key_string_to_key_object.get(t[0]),t[1]]},t.prototype.keys=function(){return this.key_string_to_key_object.values()},t.prototype.toJSON=function(){return[...this]},Object.defineProperty(t.prototype,"size",{get:function(){return this.m.size},enumerable:!0,configurable:!0}),t}();module.exports=StringifyingMap;

},{}],49:[function(require,module,exports){
let assert=require("assert");exports.infinity=1e4,exports.limited_logger=function(e){let t=function(e){t.msgs_so_far<t.max_msgs&&(console.log(e),t.msgs_so_far++)};return t.max_msgs=e,t.msgs_so_far=0,t},exports.download=function(e,t){let o=document.createElement("a");o.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(t)),o.setAttribute("download",e),o.style.display="none",document.body.appendChild(o),o.click(),document.body.removeChild(o)},exports.getDummyConstantFunction=function(e){return function(){return e}},exports.getDummyInvalidOperation=function(e,t){return function(){throw new ReferenceError(`Invalid operation: cannot use method ${t} on a dummy ${e.prototype.constructor.name}.`)}},exports.setDummyMethods=function(e,t,o){Object.getOwnPropertyNames(e.prototype).filter(t).forEach(function(t){e[t]=o(t)})},exports.setRemainingMethods=function(e,t,o){Object.getOwnPropertyNames(e.prototype).filter(t=>!e.hasOwnProperty(t)).filter(t).forEach(function(t){e[t]=o(t)})},exports.setPrivateMethodsToInvalidOperation=function(e){exports.setDummyMethods(e,e=>"_"===e[0],t=>exports.getDummyInvalidOperation(e,t))},exports.checkAllCommandsDefined=function(e){let t=Object.getOwnPropertyNames(e.prototype).filter(t=>!e.hasOwnProperty(t));if(t.length>0){let o=e.prototype.constructor.name;console.log(`Not all fields of ${o} have been defined in ${o} dummy. The list of undefined fields is:\n${t}`)}},exports.getArguments=function(e){return(e+"").replace(/[\/][\/].*$/gm,"").replace(/\s+/g,"").replace(/[\/][*][^\/*]*[*][\/]/g,"").split("){",1)[0].replace(/^[^(]*[(]/,"").replace(/=[^,]+/g,"").split(",").filter(Boolean)},exports.checkArgumentsDefined=function(e,t){for(let o=0;o<t.length;o++)if(void 0===t[o]){let t=exports.getArguments(e)[o];throw Error(`Argument ${t} of ${e.name} is undefined`)}},exports.getObjectWithFields=function(e,t){let o=new Object;for(let n of t)o[n]=e[n];return o},exports.assignFields=function(e,t,o){for(let n of o)e[n]=t[n];return e},exports.copyFields=function(e,t){for(let o of Object.entries(t)){let t=o[0],n=o[1];Array.isArray(n)&&(n=n.slice()),e[t]=n}return e},Map.prototype.getOrElse=function(e,t){return this.has(e)?this.get(e):t};

},{"assert":1}],50:[function(require,module,exports){
let Sseqjs=require("./Sseq.js"),Sseq=Sseqjs.Sseq;function variablePowerString(e,s){return 1===s?e:`${e}^{${s}}`}exports.getClassExpression=function(e){let s=`(${e.x}, ${e.y})`;return e.name&&(s+=` [${e.name}]`),s},exports.multiply_monomial=function(e,s,t){let o=new RegExp(`${e}(\\^{?(.)}?)?`.replace("\\","\\\\").replace(/\{/g,"\\{").replace(/\}/g,"\\}")),l=o.exec(t);if(!o.test(t))return console.log(t),variablePowerString(e,s)+t;console.log(o),console.log(l[2]);let r=Number.parseInt(l[2]||1)+s;return t.replace(o,`${e}^{${r}}`)},exports.straightenTowers=function(e){exports.markTowers(e);for(let s=1;s<xmax;s++){if(!e.longest_tower_map.has(s))continue;let t=e.longest_tower_map.get(s);if(t.length>3)for(let s=t.base;s;s=s.h0mult[0]){s.x_offset=0,e.updateClass(s);for(let t of e.getClassesInDegree(s.x,s.y))t.display_class.has_fixed_class=!0}}},exports.markTowers=function(e){new Map;for(let s of e.classes)s.h0div=[],s.h0mult=[],s.tower={length:0,base:s};for(let s of e.getStructlines()){if(s.source.x!==s.target.x)continue;let e,t;s.source.y<s.target.y?(e=s.source,t=s.target):(e=s.target,t=s.source),e.h0mult.push(t),t.h0div.push(e)}let s=new Map,t=(new Map,0),o=0;for(let l of e.classes)s.has(l.x)||s.set(l.x,new Map),s.get(l.x).has(l.y)||s.get(l.x).set(l.y,[]),s.get(l.x).get(l.y).push(l),l.x>0&&l.y>o&&(o=l.y),l.x>t&&(t=l.x);let l=new Map;for(let e=1;e<t;e++){if(!s.has(e))continue;let t=s.get(e),r={},a=-1;for(let e=1;e<o;e++)if(t.has(e))for(let s of t.get(e)){let e=s.tower;for(let t of s.h0div)t.tower.length>e.length&&(e=t.tower);e.length++,s.tower=e,e.length>a&&(a=e.length,r=e)}l.set(e,r)}e.columns=s,e.longest_tower_map=l},exports.minimizeCrossings=function(e){new StringifyingMap;for(let s of e.getOccupiedStems()){e.getStem(s);let t=new Map;for(let s of e.getClasses())t.has(s.y)||t.set(s.y,[]),t.get(s.y).push(s);for(let e of t.values())if(1!==e.length){for(let s of e){s.crossing_score=0;for(let e of s.structlines){let t=otherClass(e,s);t.x<s.x?s.crossing_score--:t.x>s.x&&s.crossing_score++}}e.sort(e=>e.crossing_score);for(let s=0;s<e.length;s++)e[s].idx=s}}},exports.fixed_tower_xOffset=function(e,s){if(!1!==e.x_offset)return e.x_offset*this.offset_size;let t=this.num_classes_by_degree.get([e.x,e.y]),o=e.idx-(t-1)/2;if(e.has_fixed_class){t%2==0?o>=0?o+=.5:o-=.5:o>=0&&(o+=1)}return o*this.offset_size},exports.install_edit_handlers=function(e,s){e.addEventHandler("q",e=>{e.mouseover_class&&sseq.incrementClassIndex(sseq.display_class_to_real_class.get(e.mouseover_class))}),e.addEventHandler("w",e=>{e.mouseover_class&&sseq.decrementClassIndex(sseq.display_class_to_real_class.get(e.mouseover_class))}),e.addEventHandler("d",t=>{e.real_sseq.download(s+".json")}),e.addEventHandler("s",s=>{if(s.mouseover_class){let t=s.mouseover_class;e.temp_source_class=t,display.status_div.html(`Adding differential. Source: ${exports.getClassExpression(t)}`)}}),e.addEventHandler("t",s=>{if(s.mouseover_class&&e.temp_source_class){let t=e.temp_source_class,o=s.mouseover_class;if(console.log(t),console.log(o),t.x!==o.x+1)return;let l=o.y-t.y;if(confirm(`Add d${l} differential from ${exports.getClassExpression(t)} to ${exports.getClassExpression(o)}`)){let s=sseq.addDifferential(sseq.display_class_to_real_class.get(t),sseq.display_class_to_real_class.get(o),l);s.display_edge.color=s.color,e.update()}}}),e.addEventHandler("n",s=>{if(s.mouseover_class&&e.temp_source_class){let t=e.temp_source_class,o=s.mouseover_class,l=sseq.display_class_to_real_class.get(t),r=sseq.display_class_to_real_class.get(o);confirm(`Delete edges ${exports.getClassExpression(t)} to ${exports.getClassExpression(o)}`)&&(l.getEdges().filter(e=>e.otherClass(l)===r).forEach(e=>e.delete()),e.update())}}),e.addEventHandler("onclick",s=>{let t=e.real_sseq;if(!s.mouseover_class)return;let o=s.mouseover_class,l="";o.name&&(l=o.name);let r=prompt(`Enter new name for class at position (${o.x},${o.y})`,l),a=t.display_class_to_real_class.get(o);(r||""===r)&&(a.name=r,a.setColor("black"),t.update()),o.tooltip_html=void 0}),e.addEventHandler("p",e=>{e.mouseover_class&&(e.mouseover_class.problem=!0)})},exports.addProductNames=function(e,s){let t=e.classes.filter(e=>!e.structlines.some(s=>otherClass(s,e).y<e.y&&s.visible));for(let o of t){let t=o.name;if(!t)continue;let l=1;for(;o;){let r=o.getProducts(s);if(1!==r.length)break;if((o=otherClass(r[0],o)).name)break;o.name=tools.multiply_monomial(s,l,t),e.update(),l++}}};

},{"./Sseq.js":46}],51:[function(require,module,exports){
"use strict";let d3=require("d3"),Mousetrap=require("mousetrap"),Konva=require("konva");document.documentElement.style.overflow="hidden";const gridGo="go",gridChess="chess";function setNode(t){this.node=t;let e=Object.assign({},t);e.fill=void 0,e.stroke=void 0,e.color=void 0,this.setAttrs(e),this.sceneFunc(t.shape.draw),t.shape.hitRegion&&this.hitFunc(t.shape.hitRegion),this.setFillEnabled(t.fill),this.setStrokeEnabled(t.stroke);let s=!0!==t.fill&&t.fill||t.color;s&&this.fill(s);let i=!0!==t.stroke&&t.stroke||t.color;i&&this.stroke(i),t.opacity&&this.opacity(t.opacity)}Konva.Factory.addGetterSetter(Konva.Shape,"size"),Konva.Shape.prototype.setNode=setNode;class Display{constructor(t){this.body=d3.select("body"),this.container=d3.select("#main"),this.container.style("overflow","hidden"),this.xScaleInit=d3.scaleLinear(),this.yScaleInit=d3.scaleLinear(),this.stage=new Konva.Stage({container:"main"}),this._makeLayer("gridLayer"),this._makeLayer("edgeLayer"),this._makeLayer("classLayer"),this._makeLayer("marginLayer"),this._makeLayer("supermarginLayer"),this.eventHandlerLayer=this.supermarginLayerDOM;let e=["tooltip_div","tooltip_div_dummy"].map(t=>this.container.append("div").attr("id",t).attr("class","tooltip").style("opacity",0));this.status_div=this.body.append("div").attr("id","status").style("position","absolute").style("left","20px").style("bottom","20px"),this.page_indicator_div=this.container.append("div").attr("id","page_indicator").style("position","absolute").style("left","120px").style("top","10px").style("font-family","Arial").style("font-size","15px").html("test"),this.tooltip_div=e[0],this.tooltip_div_dummy=e[1],this._initializeCanvas.bind(this),window.addEventListener("resize",()=>this.resize()),this.zoom=d3.zoom().scaleExtent([0,4]),this.updateBatch=this.updateBatch.bind(this),this.zoom.on("zoom",this.updateBatch),this.zoomDomElement=d3.select("#supermarginLayer"),this.zoomDomElement.call(this.zoom).on("dblclick.zoom",null),this.nextPage=this.nextPage.bind(this),this.previousPage=this.previousPage.bind(this),this.gridStyle=gridGo,this.setSseq(t,!0),this.update()}resize(t,e){let s=this.xminFloat,i=this.yminFloat;this._initializeCanvas(t,e),this._updateScale();let a=this.xminFloat-s,h=this.yminFloat-i;this.zoom.on("zoom",null),this.zoom.translateBy(this.zoomDomElement,this.dxScale(a),this.dyScale(h)),this.zoom.on("zoom",this.updateBatch),this.updateBatch()}_initializeCanvas(t,e){this.gridColor="#c6c6c6",this.gridStrokeWidth=.3,this.TICK_STEP_LOG_BASE=1.1;const s=document.getElementById("main").getBoundingClientRect(),i=t||.99*s.width,a=e||.97*s.height;this.stage.clear(),this.stage.width(i).height(a),this.canvasWidth=this.stage.width(),this.canvasHeight=this.stage.height(),this.leftMargin=40,this.rightMargin=5,this.topMargin=30,this.bottomMargin=60,this.clipWidth=this.canvasWidth-this.rightMargin,this.clipHeight=this.canvasHeight-this.bottomMargin,this.plotWidth=this.canvasWidth-this.leftMargin-this.rightMargin,this.plotHeight=this.canvasHeight-this.bottomMargin-this.topMargin;for(let t of["left","right","top","bottom"]){let e=t+"Margin";this.sseq[e]&&(this[e]=this.sseq[e])}this.xScaleInit=this.xScaleInit.range([this.leftMargin,this.canvasWidth-this.rightMargin]),this.yScaleInit=this.yScaleInit.range([this.canvasHeight-this.bottomMargin,this.topMargin]),this.classLayerContext.clearRect(0,0,this.canvasWidth,this.canvasHeight),this._clipLayer(this.gridLayerContext),this._clipLayer(this.edgeLayerContext),this._clipLayer(this.classLayerContext),this._drawSupermarginLayer(),this.hitCtx=this.classLayer.getHitCanvas().context}_makeLayer(t){let e=new Konva.Layer;this.stage.add(e);let s=document.getElementsByTagName("canvas");s[s.length-1].setAttribute("id",t);let i=d3.select("#"+t).node().getContext("2d");this[t]=e,this[t+"Context"]=i,this[t+"DOM"]=s[s.length-1]}_clipLayer(t){t.rect(this.leftMargin,this.topMargin,this.plotWidth,this.plotHeight),t.clip()}setSseq(t,e=!1){this.sseq&&(this.sseq._removeUpdateListener("display"),this.eventHandlerLayer.onclick=void 0,this.eventHandlerLayer.oncontextmenu=void 0,Mousetrap.reset()),this.sseq=t,this.sseq.initial_page_idx?this.page_idx=this.sseq.initial_page_idx:this.page_idx=this.sseq.min_page_idx,this.page_idx>=this.sseq.page_list.length&&(console.log(`Warning: min_page_idx ${this.sseq.min_page_idx} greater than page list length ${this.sseq.page_list.length}. Using 0 for min_page_idx instead.`),this.page_idx=0,this.min_page_idx=0),this.setPage(),e&&(this._initializeScale(),this._initializeCanvas()),t.gridStyle&&(this.gridStyle=t.gridStyle),this._updateEventHandlers(),Mousetrap.bind("left",this.previousPage),Mousetrap.bind("right",this.nextPage),Mousetrap.bind("x",()=>{this.mouseover_class&&console.log(this.mouseover_class)}),this._addClasses(),this.sseq._registerUpdateListener("display",()=>setTimeout(this.updateBatch.bind(this)))}addEventHandler(t,e){let s=t=>{t.mouseover_class=this.mouseover_class,t.selectedX=this.selectedX,t.selectedY=this.selectedY,e(t)};["onclick","oncontextmenu"].includes(t)?this.eventHandlerLayer[t]=s:Mousetrap.bind(t,s)}removeEventHandler(t){["onclick","oncontextmenu"].includes(t)?this.eventHandlerLayer[t]=(()=>!1):Mousetrap.unbind(t)}_updateEventHandlers(){for(let t of Object.getOwnPropertyNames(this.sseq.eventHandlers))this.sseq.eventHandlers[t]&&!this.sseq.eventHandlers[t].constructor!==Function&&this.addEventHandler(t,this.sseq.eventHandlers[t].bind(this.sseq))}_initializeScale(){this.old_scales_maxed=!1,this.domainOffset=.5,this.xScaleInit.domain([this.sseq.initialxRange[0]-this.domainOffset,this.sseq.initialxRange[1]+this.domainOffset]),this.yScaleInit.domain([this.sseq.initialyRange[0]-this.domainOffset,this.sseq.initialyRange[1]+this.domainOffset])}nextPage(){this.page_idx<this.sseq.page_list.length-1&&(this.setPage(this.page_idx+1),this.update())}previousPage(){this.page_idx>this.sseq.min_page_idx&&(this.setPage(this.page_idx-1),this.update(),this.stage.getPointerPosition()&&this.stage.getIntersection(this.stage.getPointerPosition())&&this._handleMouseover(this.stage.getIntersection(this.stage.getPointerPosition())))}setPage(t){void 0!==t&&(this.page_idx=t),this.pageRange=this.sseq.page_list[this.page_idx],Array.isArray(this.pageRange)?this.page=this.pageRange[0]:this.page=this.pageRange,this.page_indicator_div.html(this.sseq.getPageDescriptor(this.pageRange)),this.sseq.pageChangeHandler&&this.sseq.pageChangeHandler(this.page)}updateBatch(){this.update(!0)}update(t=!1){let e=()=>{this._updateScale(),this._updateGridAndTickStep(),this._updateSseq(),this._drawGrid(),this._drawTicks(),this._drawSseq(),d3.event&&this.stage._setPointerPosition(d3.event.sourceEvent),void 0!==this.stage.getPointerPosition()&&null!==this.stage.getIntersection(this.stage.getPointerPosition())||this._handleMouseout()};t?requestAnimationFrame(e):e()}_updateScale(){let t=this.zoomDomElement;this.transform=d3.zoomTransform(t.node()),this.scale=this.transform.k;let e,s,i=this.scale,a=this.sseq;e=this.transform.rescaleX(this.xScaleInit),s=this.transform.rescaleY(this.yScaleInit),a.fixY&&(s=this.yScaleInit);let h=i>1?10*i:10,o=h,n=i>1?10*i:10,l=n;this.xMinOffset=h,this.xMaxOffset=o,this.yMinOffset=n,this.yMaxOffset=l,this.zoom.on("zoom",null),this.old_scales_maxed||(a.xRange&&(e(a.xRange[0])>this.leftMargin+h?this.zoom.translateBy(t,(this.leftMargin+h-e(a.xRange[0])-.1)/i,0):e(a.xRange[1])<this.canvasWidth-o&&this.zoom.translateBy(t,(this.canvasWidth-o-e(a.xRange[1]+this.domainOffset)+.1)/i,0)),a.fixY||a.yRange&&(s(a.yRange[0])<this.clipHeight-n?this.zoom.translateBy(t,0,(this.clipHeight-n-s(a.yRange[0])-.1)/i):s(a.yRange[1])>l&&this.zoom.translateBy(t,0,(l-s(a.yRange[1]+this.domainOffset)+.1)/i))),this.transform=d3.zoomTransform(t.node()),e=this.transform.rescaleX(this.xScaleInit),a.fixY||(s=this.transform.rescaleY(this.yScaleInit));let r=Math.ceil(e.invert(this.leftMargin)),d=Math.floor(e.invert(this.canvasWidth)),c=Math.ceil(s.invert(this.canvasHeight-this.bottomMargin)),g=Math.floor(s.invert(0)),p=!1,m=!1;a.xRange&&d-r>a.xRange[1]-a.xRange[0]&&(p=!0,e.domain([a.xRange[0],a.xRange[1]]),e.domain([a.xRange[0]-(e.invert(h)-e.invert(0)),a.xRange[1]+(e.invert(o)-e.invert(0))+this.domainOffset])),a.yRange&&g-c>a.yRange[1]-a.yRange[0]&&(m=!0,s.domain([a.yRange[0],a.yRange[1]]),s.domain([a.yRange[0]+(s.invert(n)-s.invert(0)),a.yRange[1]-(s.invert(l)-s.invert(0))+this.domainOffset])),p&&m?this.old_scales_maxed?this.zoom.transform(t,this.zoom_max_transform):(this.old_scales_maxed=!0,this.zoom_max_transform=this.transform):this.old_scales_maxed?this.old_scales_maxed=!1:this.pre_zoom_max_transform=this.transform,this.zoom.on("zoom",this.updateBatch),this.transform=d3.zoomTransform(t.node()),this.scale=this.transform.k,this.xminFloat=e.invert(this.leftMargin),this.xmaxFloat=e.invert(this.canvasWidth),this.yminFloat=s.invert(this.canvasHeight-this.bottomMargin),this.ymaxFloat=s.invert(0),this.xmin=Math.ceil(this.xminFloat),this.xmax=Math.floor(this.xmaxFloat),this.ymin=Math.ceil(this.yminFloat),this.ymax=Math.floor(this.ymaxFloat),this.xScale=e,this.yScale=s}dxScale(t){return this.xScale(t)-this.xScale(0)}dyScale(t){return this.yScale(t)-this.yScale(0)}_updateGridAndTickStep(){this.xZoom=Math.log(this.scale)/Math.log(this.TICK_STEP_LOG_BASE),this.yZoom=this.xZoom,this.xTicks=this.xScale.ticks(this.canvasWidth/70),this.yTicks=this.yScale.ticks(this.canvasHeight/70),this.xTickStep=Math.ceil(this.xTicks[1]-this.xTicks[0]),this.yTickStep=Math.ceil(this.yTicks[1]-this.yTicks[0]),this.xGridStep=0===Math.floor(this.xTickStep/5)?1:Math.floor(this.xTickStep/5),this.yGridStep=0===Math.floor(this.yTickStep/5)?1:Math.floor(this.yTickStep/5),this.sseq.squareAspectRatio&&(this.xGridStep=this.yGridStep)}_drawTicks(t){t||((t=this.marginLayerContext).clearRect(0,0,this.canvasWidth,this.canvasHeight),t.textBaseline="middle",t.font="15px Arial"),t.textAlign="center";for(let e=Math.floor(this.xTicks[0]);e<=this.xTicks[this.xTicks.length-1];e+=this.xTickStep)t.fillText(e,this.xScale(e),this.clipHeight+20);t.textAlign="right";for(let e=Math.floor(this.yTicks[0]);e<=this.yTicks[this.yTicks.length-1];e+=this.yTickStep)t.fillText(e,this.leftMargin-10,this.yScale(e))}_drawGrid(t){switch(t||(t=this.gridLayerContext),t.strokeStyle=this.gridColor,t.clearRect(0,0,this.canvasWidth,this.canvasHeight),t.lineWidth=this.gridStrokeWidth,this.gridStyle){case gridGo:this._drawGoGrid(t);break;case gridChess:this._drawChessGrid(t)}this._drawSelection(t)}_drawGoGrid(t){this._drawGridWithOffset(t,0,0)}_drawChessGrid(t){this._drawGridWithOffset(t,.5,.5)}_drawGridWithOffset(t,e,s){t.beginPath();for(let s=Math.floor(this.xmin/this.xGridStep)*this.xGridStep-e;s<=this.xmax;s+=this.xGridStep)t.moveTo(this.xScale(s),0),t.lineTo(this.xScale(s),this.clipHeight);t.stroke(),t.beginPath();for(let e=Math.floor(this.ymin/this.yGridStep)*this.yGridStep-s;e<=this.ymax;e+=this.yGridStep)t.moveTo(this.leftMargin,this.yScale(e)),t.lineTo(this.canvasWidth-this.rightMargin,this.yScale(e));t.stroke()}_drawSupermarginLayer(t){t||(t=this.supermarginLayerContext),t.clearRect(0,0,this.canvasWidth,this.canvasHeight),t.fillStyle="#FFF",t.rect(0,this.clipHeight,this.leftMargin-5,this.bottomMargin),t.fill(),t.fillStyle="#000",t.beginPath(),t.moveTo(this.leftMargin,this.topMargin),t.lineTo(this.leftMargin,this.clipHeight),t.lineTo(this.canvasWidth-this.rightMargin,this.clipHeight),t.stroke()}_updateSseq(){this.sseq._calculateDrawnElements(this.pageRange,this.xmin,this.xmax,this.ymin,this.ymax),this._updateClasses()}_updateClasses(){let t,e=this.classLayerContext;e.clearRect(0,0,this.canvasWidth,this.canvasHeight),e.save(),t=this.scale<.5?.5:this.scale>2?2:this.scale,this.classLayer.removeChildren();for(let e of this.sseq._getClassesToDisplay()){if(!e||e.invalid)continue;let s=e.canvas_shape;s||(this._addClass(e),s=e.canvas_shape);let i=["x","y"].filter(t=>isNaN(e[t]));i.length>0&&(console.log(`Invalid ${i.join(" and ")} coodinate${2===i.length?"s":""} for class:`),console.log(e)),s.setPosition({x:this.xScale(e.x+this.sseq._getXOffset(e)),y:this.yScale(e.y+this.sseq._getYOffset(e))});let a=this.sseq.getClassNode(e,this.page);if(void 0===a&&(console.log("Error: node for class is undefined. Using default node.",e),a=this.sseq.default_node),s.setNode(a),s.size(s.size()*t*this.sseq.class_scale),e.selected){let t=s.clone();t.size(1.3*s.size()),t.stroke("orange"),t.fill("orange"),this.classLayer.add(t)}this.classLayer.add(s)}}_drawSseq(){this._drawClasses(),this._drawEdges(),this.sseq.edgeLayerSVG&&this.drawSVG(this.edgeLayerContext,this.sseq.edgeLayerSVG),this.sseq.on_draw&&this.sseq.on_draw(this)}_drawClasses(){this.classLayer.draw()}_drawEdges(t){t||(t=this.edgeLayerContext).clearRect(0,0,this.canvasWidth,this.canvasHeight);let e=this.sseq._getEdgesToDisplay();for(let s=0;s<e.length;s++){let i=e[s];if(!i||i.invalid||!i.visible)continue;let a=i.source.canvas_shape,h=i.target.canvas_shape;if(!a||!h)continue;(!i.sourceOffset||0===i.sourceOffset.x&&0===i.sourceOffset.y)&&(i.sourceOffset={x:0,y:0},i.targetOffset={x:0,y:0}),t.save(),t.strokeStyle=i.color,i.lineWidth&&(t.lineWidth=i.lineWidth),i.opacity&&(t.opacity=i.opacity),i.dash&&t.setLineDash(i.dash);let o=a.x()+i.sourceOffset.x,n=a.y()+i.sourceOffset.y,l=h.x()+i.targetOffset.x,r=h.y()+i.targetOffset.y;if(t.beginPath(),i.bend){let e=Math.sqrt((l-o)*(l-o)+(r-n)*(r-n)),s=.4;i.looseness&&(s=i.looseness);let a=Math.atan((r-n)/(l-o)),h=-i.bend*Math.PI/180,d=o+Math.cos(a+h)*s*e,c=n+Math.sin(a+h)*s*e,g=l-Math.cos(a-h)*s*e,p=r-Math.sin(a-h)*s*e;t.moveTo(o,n),t.bezierCurveTo(d,c,g,p,l,r)}else t.moveTo(o,n),t.lineTo(l,r);t.stroke(),t.restore()}}_addClasses(){this.classLayer.removeChildren();for(let t of this.sseq.classes)this._addClass(t)}_addClass(t){if(!t||t.invalid)return;if(!Number.isInteger(t.x)||!Number.isInteger(t.y))return console.log("Class has invalid coordinates:\n"),void console.log(t);t.canvas_shape=new Konva.Shape,t.canvas_shape.sseq_class=t,t.canvas_shape.on("mouseover",t=>this._handleMouseover(t.currentTarget));let e=this;t.canvas_shape.on("mouseout",function(){e._handleMouseout(this)}),this.classLayer.add(t.canvas_shape)}_setUpEdge(t){let e=t.source.canvas_shape,s=t.target.canvas_shape;e.show(),e.draw(),s.show(),s.draw();let i=this._findBoundaryTowards(e,s.x(),s.y()),a=this._findBoundaryTowards(s,e.x(),e.y());t.sourceOffset={x:i.x-e.x(),y:i.y-e.y()},t.targetOffset={x:a.x-e.x(),y:a.y-e.y()}}_handleMouseover(t){let e=t.sseq_class;if(!e)return;this.mouseover_class=e;let s=this.sseq.getClassTooltip(e,this.page).replace(/\n/g,"\n<hr>\n");if(e.tooltip_html){this.tooltip_div_dummy.html(e.tooltip_html),this._setupTooltipDiv(t);let s=this.sseq.getClassTooltip(e,this.page).replace(/\n/g,"\n<hr>\n");this.tooltip_div_dummy.html(e.tooltip),MathJax.Hub.Queue(["Typeset",MathJax.Hub,"tooltip_div_dummy"]),MathJax.Hub.Queue(()=>this.copyTooltipHTMLFromDummyTooltip(t,s))}else this.tooltip_div_dummy.html(s),window.MathJax&&MathJax.Hub?(MathJax.Hub.Queue(["Typeset",MathJax.Hub,"tooltip_div_dummy"]),MathJax.Hub.Queue(()=>this._setupTooltipDiv(t,s))):this._setupTooltipDiv(t,s);this.sseq.onmouseoverClass&&this.sseq.onmouseoverClass(e),e.onmouseover&&e.onmouseover()}_setupTooltipDiv(t){let e=this.tooltip_div.node().getBoundingClientRect(),s=(e.width,e.height);this.copyTooltipHTMLFromDummyTooltip(t),this.tooltip_div.html(this.tooltip_div_dummy.html()),this.tooltip_div.style("left",t.x()+25+"px").style("top",t.y()-s+"px").style("right",null).style("bottom",null);let i=this.tooltip_div.node().getBoundingClientRect();i.right>this.canvasWidth&&this.tooltip_div.style("left",null).style("right",this.canvasWidth-t.x()+10+"px"),i.top<0&&this.tooltip_div.style("top",t.y()+10+"px"),this.tooltip_div.transition().duration(200).style("opacity",.9)}copyTooltipHTMLFromDummyTooltip(t){this.tooltip_div_dummy.html().includes("\\(")||(t.sseq_class.tooltip_html=this.tooltip_div_dummy.html())}_handleMouseout(){this.mouseover_class=null,this.tooltip_div.transition().duration(500).style("opacity",0)}drawSVG(t,e){let s="data:image/svg+xml;base64,"+btoa(e),i=new Image;i.src=s,t.drawImage(i,this.xScale(this.sseq.xRange[0])-this.xMinOffset,this.yScale(this.sseq.yRange[1]+1),this.canvasWidth/(this.xmaxFloat-this.xminFloat)*(this.sseq.xRange[1]-this.sseq.xRange[0]+1),this.canvasHeight/(this.ymaxFloat-this.yminFloat)*(this.sseq.yRange[1]-this.sseq.yRange[0]+1))}toSVG(){let t=new C2S(this.canvasWidth,this.canvasHeight);t.translate(10,20),t._fill=t.fill,t._stroke=t.stroke,t.fillStrokeShape=Konva.Context.prototype.fillStrokeShape,t.save(),this._drawGrid(t),t.restore(),t.save(),this._drawTicks(t),t.restore(),t.save(),this._drawEdges(t),t.restore(),t.save();for(let e of this.sseq._getClassesToDisplay()){let s=e.canvas_shape;t.save(),t.transform(...s.getAbsoluteTransform().m);this.sseq.getClassNode(e,display.page);this._updateClasses(),t.fillStyle=s.fill(),t.strokeStyle=s.stroke(),s.sceneFunc().call(s,t),t.restore()}return t.restore(),t.beginPath(),t.moveTo(this.leftMargin,this.topMargin),t.lineTo(this.leftMargin,this.clipHeight),t.lineTo(this.canvasWidth-this.rightMargin,this.clipHeight),t.stroke(),this.sseq.on_draw&&this.sseq.on_draw(this),t.getSerializedSvg(!0)}updateSelection(t){t.mouseover_class=this.mouseover_class,this.selectedX=Math.floor(display.xScale.invert(t.layerX)+.5),this.selectedY=Math.floor(display.yScale.invert(t.layerY)+.5),this.update()}enableSelection(t){this.gridStyle=gridChess,this.addEventHandler("onclick",this.updateSelection.bind(this)),t&&(this.addEventHandler("left",()=>{void 0!==this.selectedX&&(this.selectedX--,this.update())}),this.addEventHandler("right",()=>{void 0!==this.selectedX&&(this.selectedX++,this.update())}),this.addEventHandler("down",()=>{void 0!==this.selectedY&&(this.selectedY--,this.update())}),this.addEventHandler("up",()=>{void 0!==this.selectedY&&(this.selectedY++,this.update())})),this.update()}disableSelection(){this.selectedX=void 0,this.gridStyle=gridGo,Mousetrap.bind("left",this.previousPage),Mousetrap.bind("right",this.nextPage),this.eventHandlerLayer.onclick=(t=>{}),this.update()}_drawSelection(t){let e=this.selectedX,s=this.selectedY;void 0!==e&&void 0!==s&&(t.fillStyle=this.gridColor,t.rect(display.xScale(e-.5),display.yScale(s-.5),display.dxScale(1),display.dyScale(1)),t.fill())}seek(t,e){return new Promise(s=>{let i=0,a=0;if(t>this.xmaxFloat-1?i=this.xmaxFloat-1-t:t<this.xminFloat+1&&(i=this.xminFloat+1-t),e>this.ymaxFloat-1?a=this.ymaxFloat-1-e:e<this.xminFloat+1&&(a=this.yminFloat+1-e),0===i&&0===a)return;let h=this.dxScale(i),o=this.dyScale(a),n=Math.sqrt(h*h+o*o),l=Math.ceil(n/10),r=h/l,d=o/l,c=0,g=d3.interval(()=>{c++,this.translateBy(r,d),c>=l&&(g.stop(),s())},5)})}translateBy(t,e){this.zoom.on("zoom",null),this.zoom.translateBy(this.zoomDomElement,t/this.transform.k,e/this.transform.k),this.update(),this.zoom.on("zoom",this.updateBatch)}_getPositionColorKey(t,e){return"#"+Konva.Util._rgbToHex(...this.hitCtx.getImageData(t,e,1,1).data)}_findBoundaryTowards(t,e,s){const i=t.colorKey;let a=t.x(),h=t.y(),o=e-a,n=s-h,l=Math.sqrt(o*o+n*n);if(0===l)return{x:a,y:h};for(o=o/l*8,n=n/l*8,l=8;l>.5;)l/=2,o/=2,n/=2,this._getPositionColorKey(a+o,h+n)===i&&(a+=o,h+=n);return{x:a,y:h}}}exports.Display=Display;

},{"d3":36,"konva":37,"mousetrap":38}],52:[function(require,module,exports){
window.infinity=1e4,window.mod=function(e,i){return(e%i+i)%i},window.Util=require("./Util.js"),window.IO=require("./SaveLoad"),window.Interface=require("./Interface"),window.sseqDatabase=IO.sseqDatabase,window.Shapes=require("./Shape.js"),window.Display=require("./display.js").Display;let Sseqjs=require("./Sseq.js");window.Sseq=Sseqjs.Sseq,window.DisplaySseq=Sseqjs.DisplaySseq,window.SseqClass=Sseqjs.SseqClass,window.Node=Sseqjs.Node,window.Edge=Sseqjs.Edge,window.Differential=Sseqjs.Differential,window.Structline=Sseqjs.Structline,window.Extension=Sseqjs.Extension,window.tools=require("./ass_tools.js"),window.d3=require("d3"),window.range=Sseqjs.range,window.monomialString=Sseqjs.monomialString,window.StringifyingMap=Sseqjs.StringifyingMap,window.product=Sseqjs.product,window.vectorSum=Sseqjs.vectorSum,window.vectorScale=Sseqjs.vectorScale,window.vectorLinearCombination=Sseqjs.vectorLinearCombination,window.on_public_website="math.mit.edu"===new URL(document.location).hostname,window.getJSONFilename=function(e){return e=`json/${e}.json`,on_public_website&&(e="js_spectralsequences/"+e),e};

},{"./Interface":43,"./SaveLoad":44,"./Shape.js":45,"./Sseq.js":46,"./Util.js":49,"./ass_tools.js":50,"./display.js":51,"d3":36}],53:[function(require,module,exports){
"use strict";let StringifyingMap=require("./StringifyingMap.js");function range(t,e,s=1){return 1===arguments.length&&(t=1,e=arguments[0],s=1),Array(Math.ceil((e-t+s)/s)).fill(t).map((t,e)=>t+e*s)}function product(){return Array.prototype.slice.call(arguments).reduce(function(t,e){const s=[];return t.forEach(function(t){e.forEach(function(e){s.push(t.concat(e))})}),s},[[]])}function convert_exponent_map_to_vector(t,e){return t.map(t=>e.hasOwnProperty(t)?e[t]:0)}function monomialString(t,e,s=""){let i=[];i[0]=s,Array.isArray(e)||(e=convert_exponent_map_to_vector(t,e));for(let s=0;s<t.length;s++){let r=e[s];i[s+1]=0===r?"":1===r?t[s]:`${t[s]}^{${r}}`}let r=i.filter(t=>""!==t).join(" ");return""===r&&(r="1"),r}function vectorSum(t){let e=[];for(let s=0;s<t.length;s++){let t=0;for(let e of arguments)t+=e[s];e.push(t)}return e}function vectorScale(t,e){return e.map(e=>t*e)}function vectorLinearCombination(t,e){let s=[];for(let i=0;i<t.length;i++)s.push(vectorScale(e[i],t[i]));return vectorSum(...s)}exports.StringifyingMap=StringifyingMap,exports.range=range,exports.product=product,exports.monomialString=monomialString,exports.vectorSum=vectorSum,exports.vectorScale=vectorScale,exports.vectorLinearCombination=vectorLinearCombination;class monomial_ring{constructor(t,e,s,i){this._var_degree_dict=s,this._var_list=t,this._var_name_list=e,this._var_degree_list=this._var_list.map(t=>this._var_degree_dict[t]),this._module_generators_dict=i}addModuleGenerator(t,e){this._module_generators_dict[t]=e}_exponent_map_to_vector(t){return convert_exponent_map_to_vector(this._var_list,t)}getElement(t,e=""){let s;if(Array.isArray(t))s=t;else if("string"==typeof t){let e=new Object;e[t]=1,s=convert_exponent_map_to_vector(this._var_name_list,e)}else{let e=Object.keys(t);for(let t of e)if(!this._var_degree_dict.hasOwnProperty(t))throw new Error(`Invalid variable ${t}`);s=convert_exponent_map_to_vector(this._var_name_list,t)}return this.getElementFromVector(s,e)}getElementFromVector(t,e=""){if(""!==e&&!this._module_generators_dict.hasOwnProperty(e))throw new Error(`Invalid module generator ${e}`);if(t.length!=this._var_name_list.length)throw new Error(`Exponent vector ${t} should have length ${this._var_name_list.length}, has length ${t.length}`);return new monomial_element(this,t,e)}}class monomial_element{constructor(t,e,s=""){this._ring=t,this.exponent_vector=e,this._module_generator=s;for(let t=0;t<e.length;t++)this[t]=e[t]}_initializeDegree(){let t=0,e=0;""!==this._module_generator&&(t+=this._ring._module_generators_dict[this._module_generator][0],e+=this._ring._module_generators_dict[this._module_generator][1]);for(let s=0;s<this.exponent_vector.length;s++)t+=this._ring._var_degree_list[s][0]*this.exponent_vector[s],e+=this._ring._var_degree_list[s][1]*this.exponent_vector[s];this._degree=[t,e]}getName(){return this._name||(this._name=monomialString(this._ring._var_name_list,this.exponent_vector,this._module_generator)),this._name}getDegree(){return this._degree||this._initializeDegree(),this._degree}multiply(t){if(this._ring!==t._ring)throw new Error("Cannot multiply elements from different rings.");if(""!==this._module_generator&&""!==t._module_generator)throw new Error("Cannot multiply two module elements, only a module element by a ring element.");let e=this._module_generator||t._module_generator,s=vectorSum(this.exponent_vector,t.exponent_vector);return new monomial_element(this._ring,s,e)}getStringifyingMapKey(){return this._module_generator+this.exponent_vector.toString()}toJSON(){let t=Object.assign({},this);return t._ring=void 0,t}toString(){return this.getName()}}class monomial_basis{constructor(t,e,s,i){if(this.sseq=t,this._tuples_to_classes=new StringifyingMap,this._tuples_to_ids=new StringifyingMap,this._strings_to_classes=new Map,this._tuples_to_strings=new StringifyingMap,this._strings_to_tuples=new Map,this._structlines=[],this.length=0,!s)return void this._fromSerializedMonomialBasis(t,e);this.var_degree_dict=e,this.var_spec_list=s,this.module_generators_dict={},this.module_generators=[];let r=[],n=[],o=[],_=[];for(let t=0;t<s.length;t++){let i=s[t],l=i[0];monomial_basis._validateVarSpec(i,e,t),r.push(l),n.push(e[l][0]),o.push(e[l][1]),_.push(range(...i.slice(1)))}this._stem_list=n,this._filtration_list=o,this._range_list=_,this._ring=new monomial_ring(r,r,e,{});for(let t of Object.entries(i)){let e=t[0],s=t[1];this.addModuleGenerator(e,s)}this.sseq.update()}addModuleGenerator(t,e,s){this.module_generators_dict[t]=e,this.module_generators.push(t),this._ring.addModuleGenerator(t,e);let i=product(...this._range_list);for(let e=0;e<i.length;e++){let r=i[e],n=this._ring.getElementFromVector(r,t),o=n.getDegree(),_=o[0],l=o[1],a=n.getName();if(sseq.yRange&&sseq.max_differential_length&&(l>sseq.yRange[1]+sseq.max_differential_length||l<sseq.yRange[0]))continue;let h=sseq.addClass(_,l).setName(a);this._add_class(n,h),h.module_generator=t,s&&s(h)}for(let e of this._structlines)for(let s=0;s<i.length;s++){let r=i[s],n=this._ring.getElementFromVector(r,t),o=this.get(n),_=this.get(n.multiply(e.offset));if(void 0!==_){let t=this.sseq.addStructline(o,_);e.callback&&e.callback(t)}}this.sseq.update()}_fromSerializedMonomialBasis(t,e){let s=new Map;for(let e of t.getClasses())s.set(e.unique_id,e);this.var_degree_dict=e.var_degree_dict,this.var_spec_list=e.var_spec_list,this.module_generators_dict=e.module_generators_dict,this.module_generators=Object.keys(e.module_generators_dict);let i=this.var_spec_list.map(t=>t[0]);this._ring=new monomial_ring(i,i,this.var_degree_dict,this.module_generators_dict);for(let t of e._tuples_to_ids){let e=t[0],i=t[1],r=this._ring.getElementFromVector(e.exponent_vector,e._module_generator);this._add_class(r,s.get(i))}}toJSON(){let t={};return t.var_degree_dict=this.var_degree_dict,t.var_spec_list=this.var_spec_list,t.module_generators_dict=this.module_generators_dict,t._tuples_to_ids=this._tuples_to_ids,t}_add_class(t,e){this.length++;let s=t.getName();this._tuples_to_classes.set(t,e),this._strings_to_classes.set(s,e),this._tuples_to_strings.set(t,s),this._strings_to_tuples.set(s,t),this._tuples_to_ids.set(t,e.unique_id),e.vector=t,e.vector.length=this.var_spec_list.length}_ensure_vect(t){if(!Array.isArray(t))if("string"==typeof t){if(!this._strings_to_classes.has(t))throw new Error("Invalid variable name");t=this._strings_to_tuples.get(t)}else t=this._ring._exponent_map_to_vector(t);return t}addStructline(t,e){t=this._ring.getElement(t);for(let s of this){let i=s[1],r=this.get(s[0].multiply(t));if(void 0!==r){let t=this.sseq.addStructline(i,r);e&&e(t)}}return this._structlines.push({offset:t,callback:e}),this.sseq.update(),this}addDifferential(t,e,s,i){e=this._ring.getElement(e);for(let r of this){let n=r[0],o=r[1],_=this.get(r[0].multiply(e));if(s(n))if(_){let e=this.sseq.addDifferential(o,_,t);void 0!==i&&i(e,n)}else o.getPage()>t&&o.setPage(t)}return this}has(t){return!!this._strings_to_classes.has(t)||(t=this._ensure_vect(t),this._tuples_to_classes.has(t))}get(t,e){if(this._strings_to_classes.has(t))return this._strings_to_classes.get(t);if(this._tuples_to_classes.has(t))return this._tuples_to_classes.get(t);try{if(t=this._ring.getElement(t),this._tuples_to_classes.has(t))return this._tuples_to_classes.get(t)}catch(t){}return e}static _validateVarSpec(t,e,s){let i="Invalid variable specification '"+t+"' at position "+s+".";if(!Array.isArray(t))throw i+" Variable specification must be a list.";if(t.length<2||t.length>4)throw i+" Variable specification should be of length at least 2 and at most 4.";if("string"!=typeof t[0])throw i+" First entry of variable specification should be a string, the name of a variable.";if(!e.hasOwnProperty(t[0]))throw i+" Variable '"+t[0]+"' does not have an entry in the degree dictionary";for(let e=1;e<t.length;e++)if(!Number.isInteger(t[e]))throw i+" Expecting an integer in position '"+e+"'."}}monomial_basis.prototype[Symbol.iterator]=function*(){for(let t of this._tuples_to_classes)yield t},exports.monomial_basis=monomial_basis;class slice_basis{constructor(t,e,s,i){this.sseq=t,this._tuples_to_slices=new StringifyingMap,this.length=0,this.var_degree_dict=e,this.var_spec_list=s;let r=[],n=[],o=[],_=[];for(let t=0;t<s.length;t++){let i=s[t],l=i[0];monomial_basis._validateVarSpec(i,e,t),r.push(l),e[l].name?n.push(e[l].name):n.push(l),o.push(e[l].degree),_.push(range(...i.slice(1)))}this._stem_list=o,this._range_list=_;let l=Object.assign({},...Object.keys(e).map(t=>({[t]:[e[t],0]})));this._ring=new monomial_ring(r,n,l);for(let t of product(..._)){let e=this._ring.getElementFromVector(t);e.getDegree()[0],e.getName();this._add_slice(e,i)}}_add_slice(t,e){this.length++;t.exponent_vector,t.getName();this._tuples_to_slices.set(t,e(this.sseq,t))}addStructline(t,e,s){t=this._ring.getElement(t);for(let i of this){let r=i[1],n=this.get(i[0].multiply(t));if(void 0!==n)for(let t of Object.keys(r))if(n.hasOwnProperty(t+e)){let i=this.sseq.addStructline(r.get(t),n.get(t+e));s&&s(i)}}return this}addDifferential(t,e,s,i){let r=this._ring.getElement(e);for(let e of this){let n=e[0],o=e[1],_=this.get(n.multiply(r));for(let e of o){let r=e[0];if(s(n,r,o.get(r).y)){let e=o.get(r);if(_&&_.has(r-1)){let s=this.sseq.addDifferential(e,_.get(r-1),t);void 0!==i&&i(s,n)}else!_&&e.getPage()>t&&e.setPage(t)}}}return this}addDifferentialLeibniz(t,e,s,i,r,n,o){e=this._ensure_vect(e),i=this._ensure_vect(i);for(let _ of product(...n.map(t=>range(...t)))){let n=vectorLinearCombination(r,_),l=n.pop()+s,a=vectorSum(e,n);if(!this.has(a)||!this.get(a).has(l))continue;let h=this.get(a).get(l),g=vectorSum(i,n);if(this.has(g)&&this.get(g).has(l-1)){let e=this.get(g).get(l-1),s=this.sseq.addDifferential(h,e,t);void 0!==o&&o(s)}else!this.has(g)&&h.getPage()>t&&h.setPage(t)}}has(t){return t=this._ensure_vect(t),this._tuples_to_slices.has(t)}get(t,e){if(this._tuples_to_slices.has(t))return this._tuples_to_slices.get(t);try{if(t=this._ring.getElement(t),this._tuples_to_slices.has(t))return this._tuples_to_slices.get(t)}catch(t){}return e}}slice_basis.prototype[Symbol.iterator]=function*(){for(let t of this._tuples_to_slices)yield t},slice_basis.prototype._ensure_vect=monomial_basis.prototype._ensure_vect,exports.slice_basis=slice_basis;

},{"./StringifyingMap.js":48}]},{},[52])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
